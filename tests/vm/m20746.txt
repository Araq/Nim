include ../prelude

const BindingPrefix {.strdefine.} = ""
{.compile: BindingPrefix&"engine.nim.cpp".}

import inputcore
import physicscore
import clothingsystemruntimeinterface
import audioplatformconfiguration
import developersettings
import slatecore
import typedelementframework
import slate
import audioextensions
import staticmeshdescription
import typedelementruntime
type
  USceneComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UActorComponent
  USceneComponentPtr* = ptr USceneComponent
  UPrimitiveComponent* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of USceneComponent
  UPrimitiveComponentPtr* = ptr UPrimitiveComponent
  USubsystem* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USubsystemPtr* = ptr USubsystem
  UDynamicSubsystem* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USubsystem
  UDynamicSubsystemPtr* = ptr UDynamicSubsystem
  UBlueprintFunctionLibrary* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UObject
  UBlueprintFunctionLibraryPtr* = ptr UBlueprintFunctionLibrary
  UAssetImportData* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAssetImportDataPtr* = ptr UAssetImportData
  UAssetExportTask* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAssetExportTaskPtr* = ptr UAssetExportTask
  UDataAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UDataAssetPtr* = ptr UDataAsset
  UMeshComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UMeshComponentPtr* = ptr UMeshComponent
  UBlueprintAsyncActionBase* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UObject
  UBlueprintAsyncActionBasePtr* = ptr UBlueprintAsyncActionBase
  AInfo* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  AInfoPtr* = ptr AInfo
  AGameModeBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AInfo
  AGameModeBasePtr* = ptr AGameModeBase
  AGameMode* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AGameModeBase
  AGameModePtr* = ptr AGameMode
  AGameStateBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AInfo
  AGameStateBasePtr* = ptr AGameStateBase
  AController* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  AControllerPtr* = ptr AController
  APlayerController* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AController
  APlayerControllerPtr* = ptr APlayerController
  ASkyLight* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AInfo
  ASkyLightPtr* = ptr ASkyLight
  UStreamableRenderAsset* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UObject
  UStreamableRenderAssetPtr* = ptr UStreamableRenderAsset
  UTexture* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UStreamableRenderAsset
  UTexturePtr* = ptr UTexture
  UTextureCube* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UTexture
  UTextureCubePtr* = ptr UTextureCube
  UStaticMeshComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UMeshComponent
  UStaticMeshComponentPtr* = ptr UStaticMeshComponent
  UDebugDrawComponent* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UDebugDrawComponentPtr* = ptr UDebugDrawComponent
  UAISystemBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAISystemBasePtr* = ptr UAISystemBase
  APawn* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  APawnPtr* = ptr APawn
  ACharacter* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of APawn
  ACharacterPtr* = ptr ACharacter
  UNavAreaBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UNavAreaBasePtr* = ptr UNavAreaBase
  UNavCollisionBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UNavCollisionBasePtr* = ptr UNavCollisionBase
  UNavigationSystemBase* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UNavigationSystemBasePtr* = ptr UNavigationSystemBase
  UNavLinkDefinition* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UObject
  UNavLinkDefinitionPtr* = ptr UNavLinkDefinition
  UNavigationDataChunk* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UObject
  UNavigationDataChunkPtr* = ptr UNavigationDataChunk
  ACameraActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ACameraActorPtr* = ptr ACameraActor
  UCameraComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USceneComponent
  UCameraComponentPtr* = ptr UCameraComponent
  UEngineSubsystem* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UDynamicSubsystem
  UEngineSubsystemPtr* = ptr UEngineSubsystem
  UDynamicBlueprintBinding* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UObject
  UDynamicBlueprintBindingPtr* = ptr UDynamicBlueprintBinding
  UEdGraphSchema* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UEdGraphSchemaPtr* = ptr UEdGraphSchema
  USkinnedMeshComponent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UMeshComponent
  USkinnedMeshComponentPtr* = ptr USkinnedMeshComponent
  USkeletalMeshComponent* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USkinnedMeshComponent
  USkeletalMeshComponentPtr* = ptr USkeletalMeshComponent
  UAnimInstance* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimInstancePtr* = ptr UAnimInstance
  UAnimSingleNodeInstance* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UAnimInstance
  UAnimSingleNodeInstancePtr* = ptr UAnimSingleNodeInstance
  UAnimNotify* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimNotifyPtr* = ptr UAnimNotify
  UAnimNotifyState* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimNotifyStatePtr* = ptr UAnimNotifyState
  UEngineCustomTimeStep* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UEngineCustomTimeStepPtr* = ptr UEngineCustomTimeStep
  UTimecodeProvider* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UTimecodeProviderPtr* = ptr UTimecodeProvider
  USoundEffectPreset* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UObject
  USoundEffectPresetPtr* = ptr USoundEffectPreset
  USoundEffectSubmixPreset* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of USoundEffectPreset
  USoundEffectSubmixPresetPtr* = ptr USoundEffectSubmixPreset
  UWorldSubsystem* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USubsystem
  UWorldSubsystemPtr* = ptr UWorldSubsystem
  UTickableWorldSubsystem* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UWorldSubsystem
  UTickableWorldSubsystemPtr* = ptr UTickableWorldSubsystem
  USoundBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundBasePtr* = ptr USoundBase
  USoundWave* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundBase
  USoundWavePtr* = ptr USoundWave
  UAssetUserData* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAssetUserDataPtr* = ptr UAssetUserData
  UExporter* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UExporterPtr* = ptr UExporter
  UCommandlet* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCommandletPtr* = ptr UCommandlet
  UBrushBuilder* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UBrushBuilderPtr* = ptr UBrushBuilder
  UEngine* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UEnginePtr* = ptr UEngine
  UInstancedPlacemenClientSettings* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UObject
  UInstancedPlacemenClientSettingsPtr* = ptr UInstancedPlacemenClientSettings
  UMaterialInterface* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UObject
  UMaterialInterfacePtr* = ptr UMaterialInterface
  UMaterial* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UMaterialInterface
  UMaterialPtr* = ptr UMaterial
  UThumbnailInfo* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UThumbnailInfoPtr* = ptr UThumbnailInfo
  ASkeletalMeshActor* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of AActor
  ASkeletalMeshActorPtr* = ptr ASkeletalMeshActor
  UInstancedStaticMeshComponent* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UStaticMeshComponent
  UInstancedStaticMeshComponentPtr* = ptr UInstancedStaticMeshComponent
  UHierarchicalInstancedStaticMeshComponent* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UInstancedStaticMeshComponent
  UHierarchicalInstancedStaticMeshComponentPtr* = ptr UHierarchicalInstancedStaticMeshComponent
  APartitionActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  APartitionActorPtr* = ptr APartitionActor
  AISMPartitionActor* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of APartitionActor
  AISMPartitionActorPtr* = ptr AISMPartitionActor
  AStaticMeshActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  AStaticMeshActorPtr* = ptr AStaticMeshActor
  UHLODBuilder* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UHLODBuilderPtr* = ptr UHLODBuilder
  UMaterialInstance* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UMaterialInterface
  UMaterialInstancePtr* = ptr UMaterialInstance
  UMaterialInstanceConstant* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UMaterialInstance
  UMaterialInstanceConstantPtr* = ptr UMaterialInstanceConstant
  UMaterialExpression* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UObject
  UMaterialExpressionPtr* = ptr UMaterialExpression
  UMaterialExpressionCustomOutput* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCustomOutputPtr* = ptr UMaterialExpressionCustomOutput
  UActiveSoundUpdateInterface* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterface
  UActiveSoundUpdateInterfacePtr* = ptr UActiveSoundUpdateInterface
  UChannel* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UChannelPtr* = ptr UChannel
  ULevel* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  ULevelPtr* = ptr ULevel
  UActorSoundParameterInterface* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UInterface
  UActorSoundParameterInterfacePtr* = ptr UActorSoundParameterInterface
  UAnimationAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimationAssetPtr* = ptr UAnimationAsset
  UBlendSpace* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimationAsset
  UBlendSpacePtr* = ptr UBlendSpace
  UAimOffsetBlendSpace* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UBlendSpace
  UAimOffsetBlendSpacePtr* = ptr UAimOffsetBlendSpace
  UBlendSpace1D* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UBlendSpace
  UBlendSpace1DPtr* = ptr UBlendSpace1D
  UAimOffsetBlendSpace1D* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UBlendSpace1D
  UAimOffsetBlendSpace1DPtr* = ptr UAimOffsetBlendSpace1D
  AAmbientSound* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  AAmbientSoundPtr* = ptr AAmbientSound
  UAnimationAssetExtensions* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UAnimationAssetExtensionsPtr* = ptr UAnimationAssetExtensions
  UAnimationSettings* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UDeveloperSettings
  UAnimationSettingsPtr* = ptr UAnimationSettings
  UAnimBlueprint* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimBlueprintPtr* = ptr UAnimBlueprint
  UAnimBlueprintClassSubsystem_PropertyAccess* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UObject
  UAnimBlueprintClassSubsystem_PropertyAccessPtr* = ptr UAnimBlueprintClassSubsystem_PropertyAccess
  UAnimBoneCompressionCodec* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UObject
  UAnimBoneCompressionCodecPtr* = ptr UAnimBoneCompressionCodec
  UAnimClassInterface* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UInterface
  UAnimClassInterfacePtr* = ptr UAnimClassInterface
  UAnimSequenceBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimationAsset
  UAnimSequenceBasePtr* = ptr UAnimSequenceBase
  UAnimCompositeBase* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UAnimSequenceBase
  UAnimCompositeBasePtr* = ptr UAnimCompositeBase
  UAnimComposite* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimCompositeBase
  UAnimCompositePtr* = ptr UAnimComposite
  UAnimCompress* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimBoneCompressionCodec
  UAnimCompressPtr* = ptr UAnimCompress
  UAnimCompress_BitwiseCompressOnly* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UAnimCompress
  UAnimCompress_BitwiseCompressOnlyPtr* = ptr UAnimCompress_BitwiseCompressOnly
  UAnimCompress_RemoveLinearKeys* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UAnimCompress
  UAnimCompress_RemoveLinearKeysPtr* = ptr UAnimCompress_RemoveLinearKeys
  UAnimCompress_RemoveEverySecondKey* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UAnimCompress
  UAnimCompress_RemoveEverySecondKeyPtr* = ptr UAnimCompress_RemoveEverySecondKey
  UAnimCompress_RemoveTrivialKeys* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UAnimCompress
  UAnimCompress_RemoveTrivialKeysPtr* = ptr UAnimCompress_RemoveTrivialKeys
  UAnimCurveCompressionCodec* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UAnimCurveCompressionCodecPtr* = ptr UAnimCurveCompressionCodec
  UAnimDataModel* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimDataModelPtr* = ptr UAnimDataModel
  UAnimationDataModelNotifiesExtensions* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UAnimationDataModelNotifiesExtensionsPtr* = ptr UAnimationDataModelNotifiesExtensions
  UAnimLayerInterface* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UInterface
  UAnimLayerInterfacePtr* = ptr UAnimLayerInterface
  UAnimMetaData* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimMetaDataPtr* = ptr UAnimMetaData
  UAnimMontage* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimCompositeBase
  UAnimMontagePtr* = ptr UAnimMontage
  UAnimNotifyMirrorInspectionLibrary* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UAnimNotifyMirrorInspectionLibraryPtr* = ptr UAnimNotifyMirrorInspectionLibrary
  UAnimNotifyStateMachineInspectionLibrary* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UAnimNotifyStateMachineInspectionLibraryPtr* = ptr UAnimNotifyStateMachineInspectionLibrary
  UAnimNotifyState_DisableRootMotion* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UAnimNotifyState
  UAnimNotifyState_DisableRootMotionPtr* = ptr UAnimNotifyState_DisableRootMotion
  UAnimNotifyState_TimedParticleEffect* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UAnimNotifyState
  UAnimNotifyState_TimedParticleEffectPtr* = ptr UAnimNotifyState_TimedParticleEffect
  UAnimNotifyState_Trail* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UAnimNotifyState
  UAnimNotifyState_TrailPtr* = ptr UAnimNotifyState_Trail
  UAnimSequence* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimSequenceBase
  UAnimSequencePtr* = ptr UAnimSequence
  UAnimSet* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAnimSetPtr* = ptr UAnimSet
  UAnimStreamable* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimSequenceBase
  UAnimStreamablePtr* = ptr UAnimStreamable
  URawAnimSequenceTrackExtensions* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  URawAnimSequenceTrackExtensionsPtr* = ptr URawAnimSequenceTrackExtensions
  UApplicationLifecycleComponent* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UActorComponent
  UApplicationLifecycleComponentPtr* = ptr UApplicationLifecycleComponent
  UArrowComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UArrowComponentPtr* = ptr UArrowComponent
  UAssetMappingTable* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UObject
  UAssetMappingTablePtr* = ptr UAssetMappingTable
  UAsyncActionHandleSaveGame* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UBlueprintAsyncActionBase
  UAsyncActionHandleSaveGamePtr* = ptr UAsyncActionHandleSaveGame
  UAsyncActionLoadPrimaryAssetBase* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UBlueprintAsyncActionBase
  UAsyncActionLoadPrimaryAssetBasePtr* = ptr UAsyncActionLoadPrimaryAssetBase
  UAsyncActionLoadPrimaryAsset* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UAsyncActionLoadPrimaryAssetBase
  UAsyncActionLoadPrimaryAssetPtr* = ptr UAsyncActionLoadPrimaryAsset
  UAsyncActionLoadPrimaryAssetClass* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UAsyncActionLoadPrimaryAssetBase
  UAsyncActionLoadPrimaryAssetClassPtr* = ptr UAsyncActionLoadPrimaryAssetClass
  UAsyncActionLoadPrimaryAssetList* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UAsyncActionLoadPrimaryAssetBase
  UAsyncActionLoadPrimaryAssetListPtr* = ptr UAsyncActionLoadPrimaryAssetList
  UAsyncActionLoadPrimaryAssetClassList* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UAsyncActionLoadPrimaryAssetBase
  UAsyncActionLoadPrimaryAssetClassListPtr* = ptr UAsyncActionLoadPrimaryAssetClassList
  UAsyncActionChangePrimaryAssetBundles* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UAsyncActionLoadPrimaryAssetBase
  UAsyncActionChangePrimaryAssetBundlesPtr* = ptr UAsyncActionChangePrimaryAssetBundles
  AAtmosphericFog* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AInfo
  AAtmosphericFogPtr* = ptr AAtmosphericFog
  USkyAtmosphereComponent* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of USceneComponent
  USkyAtmosphereComponentPtr* = ptr USkyAtmosphereComponent
  UAtmosphericFogComponent* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of USkyAtmosphereComponent
  UAtmosphericFogComponentPtr* = ptr UAtmosphericFogComponent
  UAnimationAttributeIdentifierExtensions* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UAnimationAttributeIdentifierExtensionsPtr* = ptr UAnimationAttributeIdentifierExtensions
  UAudioBus* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAudioBusPtr* = ptr UAudioBus
  UInitialActiveSoundParams* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UObject
  UInitialActiveSoundParamsPtr* = ptr UInitialActiveSoundParams
  UAudioComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USceneComponent
  UAudioComponentPtr* = ptr UAudioComponent
  UAudioEngineSubsystem* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UDynamicSubsystem
  UAudioEngineSubsystemPtr* = ptr UAudioEngineSubsystem
  UAudioPanelWidgetInterface* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UInterface
  UAudioPanelWidgetInterfacePtr* = ptr UAudioPanelWidgetInterface
  AAudioVolume* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AVolume
  AAudioVolumePtr* = ptr AAudioVolume
  UAvoidanceManager* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UAvoidanceManagerPtr* = ptr UAvoidanceManager
  UBillboardComponent* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UBillboardComponentPtr* = ptr UBillboardComponent
  UBlendableInterface* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UInterface
  UBlendableInterfacePtr* = ptr UBlendableInterface
  USkeleton* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USkeletonPtr* = ptr USkeleton
  UAnalysisProperties* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UObject
  UAnalysisPropertiesPtr* = ptr UAnalysisProperties
  ABlockingVolume* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AVolume
  ABlockingVolumePtr* = ptr ABlockingVolume
  UBlueprintMapLibrary* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UBlueprintMapLibraryPtr* = ptr UBlueprintMapLibrary
  UBlueprintPathsLibrary* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UBlueprintPathsLibraryPtr* = ptr UBlueprintPathsLibrary
  UGameInstance* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UGameInstancePtr* = ptr UGameInstance
  UPlatformGameInstance* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UGameInstance
  UPlatformGameInstancePtr* = ptr UPlatformGameInstance
  UBlueprintPlatformLibrary* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UBlueprintPlatformLibraryPtr* = ptr UBlueprintPlatformLibrary
  UBlueprintSetLibrary* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UBlueprintSetLibraryPtr* = ptr UBlueprintSetLibrary
  UBodySetup* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UBodySetupPtr* = ptr UBodySetup
  UBoneMaskFilter* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UBoneMaskFilterPtr* = ptr UBoneMaskFilter
  UBookmarkBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UBookmarkBasePtr* = ptr UBookmarkBase
  UBookMark* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UBookmarkBase
  UBookMarkPtr* = ptr UBookMark
  UBoundsCopyComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UActorComponent
  UBoundsCopyComponentPtr* = ptr UBoundsCopyComponent
  UShapeComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UShapeComponentPtr* = ptr UShapeComponent
  UBoxComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UShapeComponent
  UBoxComponentPtr* = ptr UBoxComponent
  AReflectionCapture* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of AActor
  AReflectionCapturePtr* = ptr AReflectionCapture
  ABoxReflectionCapture* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of AReflectionCapture
  ABoxReflectionCapturePtr* = ptr ABoxReflectionCapture
  UReflectionCaptureComponent* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of USceneComponent
  UReflectionCaptureComponentPtr* = ptr UReflectionCaptureComponent
  UBoxReflectionCaptureComponent* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UReflectionCaptureComponent
  UBoxReflectionCaptureComponentPtr* = ptr UBoxReflectionCaptureComponent
  UBrushComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UBrushComponentPtr* = ptr UBrushComponent
  ABrushShape* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ABrushShapePtr* = ptr ABrushShape
  UBuiltInAttributesExtensions* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UBuiltInAttributesExtensionsPtr* = ptr UBuiltInAttributesExtensions
  UButtonStyleAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UButtonStyleAssetPtr* = ptr UButtonStyleAsset
  UCachedAnimDataLibrary* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UCachedAnimDataLibraryPtr* = ptr UCachedAnimDataLibrary
  UCameraAnim* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCameraAnimPtr* = ptr UCameraAnim
  UCameraAnimInst* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCameraAnimInstPtr* = ptr UCameraAnimInst
  UCameraLensEffectInterface* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UInterface
  UCameraLensEffectInterfacePtr* = ptr UCameraLensEffectInterface
  UCameraLensEffectInterfaceClassSupportLibrary* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UCameraLensEffectInterfaceClassSupportLibraryPtr* = ptr UCameraLensEffectInterfaceClassSupportLibrary
  UCameraModifier* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCameraModifierPtr* = ptr UCameraModifier
  UCameraShakeBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCameraShakeBasePtr* = ptr UCameraShakeBase
  UCameraShakePattern* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UObject
  UCameraShakePatternPtr* = ptr UCameraShakePattern
  UCameraShakeSourceComponent* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of USceneComponent
  UCameraShakeSourceComponentPtr* = ptr UCameraShakeSourceComponent
  UCancellableAsyncAction* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UBlueprintAsyncActionBase
  UCancellableAsyncActionPtr* = ptr UCancellableAsyncAction
  UCanvas* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCanvasPtr* = ptr UCanvas
  UTextureRenderTarget* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UTexture
  UTextureRenderTargetPtr* = ptr UTextureRenderTarget
  UTextureRenderTarget2D* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UTextureRenderTarget
  UTextureRenderTarget2DPtr* = ptr UTextureRenderTarget2D
  UCanvasRenderTarget2D* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UTextureRenderTarget2D
  UCanvasRenderTarget2DPtr* = ptr UCanvasRenderTarget2D
  UCapsuleComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UShapeComponent
  UCapsuleComponentPtr* = ptr UCapsuleComponent
  UMovementComponent* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UActorComponent
  UMovementComponentPtr* = ptr UMovementComponent
  UNavMovementComponent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UMovementComponent
  UNavMovementComponentPtr* = ptr UNavMovementComponent
  UPawnMovementComponent* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UNavMovementComponent
  UPawnMovementComponentPtr* = ptr UPawnMovementComponent
  UCharacterMovementComponent* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UPawnMovementComponent
  UCharacterMovementComponentPtr* = ptr UCharacterMovementComponent
  UCheatManager* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCheatManagerPtr* = ptr UCheatManager
  UCheatManagerExtension* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UObject
  UCheatManagerExtensionPtr* = ptr UCheatManagerExtension
  UCheckBoxStyleAsset* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UObject
  UCheckBoxStyleAssetPtr* = ptr UCheckBoxStyleAsset
  UChildActorComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of USceneComponent
  UChildActorComponentPtr* = ptr UChildActorComponent
  UPlayer* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UPlayerPtr* = ptr UPlayer
  UNetConnection* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UPlayer
  UNetConnectionPtr* = ptr UNetConnection
  UChildConnection* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UNetConnection
  UChildConnectionPtr* = ptr UChildConnection
  UPlatformInterfaceBase* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UObject
  UPlatformInterfaceBasePtr* = ptr UPlatformInterfaceBase
  UCollisionProfile* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UDeveloperSettings
  UCollisionProfilePtr* = ptr UCollisionProfile
  UCurveTable* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCurveTablePtr* = ptr UCurveTable
  UCompositeCurveTable* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UCurveTable
  UCompositeCurveTablePtr* = ptr UCompositeCurveTable
  UDataTable* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UDataTablePtr* = ptr UDataTable
  UCompositeDataTable* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UDataTable
  UCompositeDataTablePtr* = ptr UCompositeDataTable
  UConstraintInstanceBlueprintLibrary* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UConstraintInstanceBlueprintLibraryPtr* = ptr UConstraintInstanceBlueprintLibrary
  ACullDistanceVolume* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of AVolume
  ACullDistanceVolumePtr* = ptr ACullDistanceVolume
  UCurveBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UCurveBasePtr* = ptr UCurveBase
  UCurveFloat* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UCurveBase
  UCurveFloatPtr* = ptr UCurveFloat
  UAnimationCurveIdentifierExtensions* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UAnimationCurveIdentifierExtensionsPtr* = ptr UAnimationCurveIdentifierExtensions
  UCurveLinearColor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UCurveBase
  UCurveLinearColorPtr* = ptr UCurveLinearColor
  UTexture2D* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UTexture
  UTexture2DPtr* = ptr UTexture2D
  UCurveLinearColorAtlas* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UTexture2D
  UCurveLinearColorAtlasPtr* = ptr UCurveLinearColorAtlas
  UCurveSourceInterface* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UInterface
  UCurveSourceInterfacePtr* = ptr UCurveSourceInterface
  UCurveVector* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UCurveBase
  UCurveVectorPtr* = ptr UCurveVector
  UDamageType* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UDamageTypePtr* = ptr UDamageType
  UPrimaryDataAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UDataAsset
  UPrimaryDataAssetPtr* = ptr UPrimaryDataAsset
  UDataLayer* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UDataLayerPtr* = ptr UDataLayer
  UDataLayerSubsystem* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UWorldSubsystem
  UDataLayerSubsystemPtr* = ptr UDataLayerSubsystem
  UDataTableFunctionLibrary* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UDataTableFunctionLibraryPtr* = ptr UDataTableFunctionLibrary
  ADebugCameraController* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of APlayerController
  ADebugCameraControllerPtr* = ptr ADebugCameraController
  AHUD* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  AHUDPtr* = ptr AHUD
  ADecalActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ADecalActorPtr* = ptr ADecalActor
  UDecalComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USceneComponent
  UDecalComponentPtr* = ptr UDecalComponent
  ADefaultPawn* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of APawn
  ADefaultPawnPtr* = ptr ADefaultPawn
  ADefaultPhysicsVolume* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of AVolume
  ADefaultPhysicsVolumePtr* = ptr ADefaultPhysicsVolume
  UNetDriver* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UNetDriverPtr* = ptr UNetDriver
  UDestructibleInterface* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UInterface
  UDestructibleInterfacePtr* = ptr UDestructibleInterface
  UDialogueVoice* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UDialogueVoicePtr* = ptr UDialogueVoice
  UDialogueWave* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UDialogueWavePtr* = ptr UDialogueWave
  ALight* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ALightPtr* = ptr ALight
  ADirectionalLight* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ALight
  ADirectionalLightPtr* = ptr ADirectionalLight
  ULightComponentBase* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of USceneComponent
  ULightComponentBasePtr* = ptr ULightComponentBase
  ULightComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ULightComponentBase
  ULightComponentPtr* = ptr ULightComponent
  UDirectionalLightComponent* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of ULightComponent
  UDirectionalLightComponentPtr* = ptr UDirectionalLightComponent
  UDistribution* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UDistributionPtr* = ptr UDistribution
  UDistributionFloat* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UDistribution
  UDistributionFloatPtr* = ptr UDistributionFloat
  UDistributionFloatParameterBase* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UDistributionFloat
  UDistributionFloatParameterBasePtr* = ptr UDistributionFloatParameterBase
  UDistributionVector* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UDistribution
  UDistributionVectorPtr* = ptr UDistributionVector
  UDistributionVectorParameterBase* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UDistributionVector
  UDistributionVectorParameterBasePtr* = ptr UDistributionVectorParameterBase
  UDPICustomScalingRule* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UDPICustomScalingRulePtr* = ptr UDPICustomScalingRule
  UDrawFrustumComponent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UDrawFrustumComponentPtr* = ptr UDrawFrustumComponent
  USphereComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UShapeComponent
  USphereComponentPtr* = ptr USphereComponent
  UDrawSphereComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of USphereComponent
  UDrawSphereComponentPtr* = ptr UDrawSphereComponent
  UEdGraphNode_Documentation* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UEdGraphNode_DocumentationPtr* = ptr UEdGraphNode_Documentation
  UEdGraphPin_Deprecated* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UObject
  UEdGraphPin_DeprecatedPtr* = ptr UEdGraphPin_Deprecated
  AEmitter* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  AEmitterPtr* = ptr AEmitter
  AEmitterCameraLensEffectBase* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of AEmitter
  AEmitterCameraLensEffectBasePtr* = ptr AEmitterCameraLensEffectBase
  UEngineBaseTypes* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UEngineBaseTypesPtr* = ptr UEngineBaseTypes
  UEngineElementsLibrary* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UEngineElementsLibraryPtr* = ptr UEngineElementsLibrary
  ULocalMessage* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  ULocalMessagePtr* = ptr ULocalMessage
  UEngineMessage* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ULocalMessage
  UEngineMessagePtr* = ptr UEngineMessage
  UEngineTypes* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UEngineTypesPtr* = ptr UEngineTypes
  AExponentialHeightFog* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of AInfo
  AExponentialHeightFogPtr* = ptr AExponentialHeightFog
  UExponentialHeightFogComponent* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of USceneComponent
  UExponentialHeightFogComponentPtr* = ptr UExponentialHeightFogComponent
  UFloatingPawnMovement* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UPawnMovementComponent
  UFloatingPawnMovementPtr* = ptr UFloatingPawnMovement
  UFont* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UFontPtr* = ptr UFont
  UFontFace* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UFontFacePtr* = ptr UFontFace
  UFontImportOptions* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UObject
  UFontImportOptionsPtr* = ptr UFontImportOptions
  UForceFeedbackAttenuation* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UObject
  UForceFeedbackAttenuationPtr* = ptr UForceFeedbackAttenuation
  UForceFeedbackComponent* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of USceneComponent
  UForceFeedbackComponentPtr* = ptr UForceFeedbackComponent
  UForceFeedbackEffect* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UObject
  UForceFeedbackEffectPtr* = ptr UForceFeedbackEffect
  UGameInstanceSubsystem* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USubsystem
  UGameInstanceSubsystemPtr* = ptr UGameInstanceSubsystem
  UGameplayStatics* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UGameplayStaticsPtr* = ptr UGameplayStatics
  UGameUserSettings* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UGameUserSettingsPtr* = ptr UGameUserSettings
  ASpotLight* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ALight
  ASpotLightPtr* = ptr ASpotLight
  AGeneratedMeshAreaLight* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of ASpotLight
  AGeneratedMeshAreaLightPtr* = ptr AGeneratedMeshAreaLight
  UHapticFeedbackEffect_Base* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UHapticFeedbackEffect_BasePtr* = ptr UHapticFeedbackEffect_Base
  UHapticFeedbackEffect_Buffer* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UHapticFeedbackEffect_Base
  UHapticFeedbackEffect_BufferPtr* = ptr UHapticFeedbackEffect_Buffer
  UHapticFeedbackEffect_Curve* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UHapticFeedbackEffect_Base
  UHapticFeedbackEffect_CurvePtr* = ptr UHapticFeedbackEffect_Curve
  UHapticFeedbackEffect_SoundWave* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UHapticFeedbackEffect_Base
  UHapticFeedbackEffect_SoundWavePtr* = ptr UHapticFeedbackEffect_SoundWave
  UHealthSnapshotBlueprintLibrary* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UHealthSnapshotBlueprintLibraryPtr* = ptr UHealthSnapshotBlueprintLibrary
  UHLODLayer* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UHLODLayerPtr* = ptr UHLODLayer
  UAnimationDataController* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UInterface
  UAnimationDataControllerPtr* = ptr UAnimationDataController
  UImportanceSamplingLibrary* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UImportanceSamplingLibraryPtr* = ptr UImportanceSamplingLibrary
  UImportantToggleSettingInterface* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UInterface
  UImportantToggleSettingInterfacePtr* = ptr UImportantToggleSettingInterface
  UInputDelegateBinding* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UDynamicBlueprintBinding
  UInputDelegateBindingPtr* = ptr UInputDelegateBinding
  UInputComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UActorComponent
  UInputComponentPtr* = ptr UInputComponent
  UInputSettings* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UInputSettingsPtr* = ptr UInputSettings
  UInterface_ActorSubobject* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UInterface
  UInterface_ActorSubobjectPtr* = ptr UInterface_ActorSubobject
  UInterface_AssetUserData* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UInterface
  UInterface_AssetUserDataPtr* = ptr UInterface_AssetUserData
  UInterface_AsyncCompilation* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterface
  UInterface_AsyncCompilationPtr* = ptr UInterface_AsyncCompilation
  UBoneReferenceSkeletonProvider* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UInterface
  UBoneReferenceSkeletonProviderPtr* = ptr UBoneReferenceSkeletonProvider
  UInterface_CollisionDataProvider* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UInterface
  UInterface_CollisionDataProviderPtr* = ptr UInterface_CollisionDataProvider
  UInterface_PostProcessVolume* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UInterface
  UInterface_PostProcessVolumePtr* = ptr UInterface_PostProcessVolume
  UInterface_PreviewMeshProvider* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UInterface
  UInterface_PreviewMeshProviderPtr* = ptr UInterface_PreviewMeshProvider
  UInterpCurveEdSetup* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UObject
  UInterpCurveEdSetupPtr* = ptr UInterpCurveEdSetup
  UInterpData* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UInterpDataPtr* = ptr UInterpData
  UInterpFilter_Custom* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UObject
  UInterpFilter_CustomPtr* = ptr UInterpFilter_Custom
  UInterpGroup* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UInterpGroupPtr* = ptr UInterpGroup
  UInterpGroupCamera* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UInterpGroup
  UInterpGroupCameraPtr* = ptr UInterpGroupCamera
  UInterpGroupDirector* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UInterpGroup
  UInterpGroupDirectorPtr* = ptr UInterpGroupDirector
  UInterpGroupInst* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UInterpGroupInstPtr* = ptr UInterpGroupInst
  UInterpGroupInstDirector* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UInterpGroupInst
  UInterpGroupInstDirectorPtr* = ptr UInterpGroupInstDirector
  UInterpToMovementComponent* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMovementComponent
  UInterpToMovementComponentPtr* = ptr UInterpToMovementComponent
  UInterpTrack* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UInterpTrackPtr* = ptr UInterpTrack
  UInterpTrackFloatBase* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackFloatBasePtr* = ptr UInterpTrackFloatBase
  UInterpTrackAnimControl* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UInterpTrackFloatBase
  UInterpTrackAnimControlPtr* = ptr UInterpTrackAnimControl
  UInterpTrackVectorBase* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackVectorBasePtr* = ptr UInterpTrackVectorBase
  UInterpTrackAudioMaster* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UInterpTrackVectorBase
  UInterpTrackAudioMasterPtr* = ptr UInterpTrackAudioMaster
  UInterpTrackBoolProp* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackBoolPropPtr* = ptr UInterpTrackBoolProp
  UInterpTrackColorProp* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UInterpTrackVectorBase
  UInterpTrackColorPropPtr* = ptr UInterpTrackColorProp
  UInterpTrackDirector* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackDirectorPtr* = ptr UInterpTrackDirector
  UInterpTrackEvent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackEventPtr* = ptr UInterpTrackEvent
  UInterpTrackFloatMaterialParam* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UInterpTrackFloatBase
  UInterpTrackFloatMaterialParamPtr* = ptr UInterpTrackFloatMaterialParam
  UInterpTrackFloatProp* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UInterpTrackFloatBase
  UInterpTrackFloatPropPtr* = ptr UInterpTrackFloatProp
  UInterpTrackInst* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UInterpTrackInstPtr* = ptr UInterpTrackInst
  UInterpTrackInstAnimControl* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterpTrackInst
  UInterpTrackInstAnimControlPtr* = ptr UInterpTrackInstAnimControl
  UInterpTrackInstDirector* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UInterpTrackInst
  UInterpTrackInstDirectorPtr* = ptr UInterpTrackInstDirector
  UInterpTrackInstEvent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UInterpTrackInst
  UInterpTrackInstEventPtr* = ptr UInterpTrackInstEvent
  UInterpTrackInstFloatProp* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UInterpTrackInst
  UInterpTrackInstFloatPropPtr* = ptr UInterpTrackInstFloatProp
  UInterpTrackInstMove* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UInterpTrackInst
  UInterpTrackInstMovePtr* = ptr UInterpTrackInstMove
  UInterpTrackLinearColorBase* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackLinearColorBasePtr* = ptr UInterpTrackLinearColorBase
  UInterpTrackLinearColorProp* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterpTrackLinearColorBase
  UInterpTrackLinearColorPropPtr* = ptr UInterpTrackLinearColorProp
  UInterpTrackMove* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackMovePtr* = ptr UInterpTrackMove
  UInterpTrackMoveAxis* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UInterpTrackFloatBase
  UInterpTrackMoveAxisPtr* = ptr UInterpTrackMoveAxis
  UInterpTrackParticleReplay* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackParticleReplayPtr* = ptr UInterpTrackParticleReplay
  UInterpTrackSound* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UInterpTrackVectorBase
  UInterpTrackSoundPtr* = ptr UInterpTrackSound
  UInterpTrackToggle* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackTogglePtr* = ptr UInterpTrackToggle
  UInterpTrackVectorMaterialParam* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UInterpTrackVectorBase
  UInterpTrackVectorMaterialParamPtr* = ptr UInterpTrackVectorMaterialParam
  UInterpTrackVectorProp* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UInterpTrackVectorBase
  UInterpTrackVectorPropPtr* = ptr UInterpTrackVectorProp
  UInterpTrackVisibility* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UInterpTrack
  UInterpTrackVisibilityPtr* = ptr UInterpTrackVisibility
  UISMPartitionInstanceManager* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UInterface
  UISMPartitionInstanceManagerPtr* = ptr UISMPartitionInstanceManager
  UISMPartitionInstanceManagerProvider* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UInterface
  UISMPartitionInstanceManagerProviderPtr* = ptr UISMPartitionInstanceManagerProvider
  UKismetArrayLibrary* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetArrayLibraryPtr* = ptr UKismetArrayLibrary
  UKismetGuidLibrary* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetGuidLibraryPtr* = ptr UKismetGuidLibrary
  UKismetInputLibrary* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetInputLibraryPtr* = ptr UKismetInputLibrary
  UKismetInternationalizationLibrary* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetInternationalizationLibraryPtr* = ptr UKismetInternationalizationLibrary
  UKismetMaterialLibrary* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetMaterialLibraryPtr* = ptr UKismetMaterialLibrary
  UKismetNodeHelperLibrary* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetNodeHelperLibraryPtr* = ptr UKismetNodeHelperLibrary
  UKismetRenderingLibrary* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetRenderingLibraryPtr* = ptr UKismetRenderingLibrary
  UKismetStringLibrary* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetStringLibraryPtr* = ptr UKismetStringLibrary
  UKismetStringTableLibrary* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetStringTableLibraryPtr* = ptr UKismetStringTableLibrary
  UKismetSystemLibrary* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetSystemLibraryPtr* = ptr UKismetSystemLibrary
  UKismetTextLibrary* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UKismetTextLibraryPtr* = ptr UKismetTextLibrary
  ULevelPartitionInterface* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UInterface
  ULevelPartitionInterfacePtr* = ptr ULevelPartitionInterface
  ULevelActorContainer* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UObject
  ULevelActorContainerPtr* = ptr ULevelActorContainer
  ULevelStreaming* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  ULevelStreamingPtr* = ptr ULevelStreaming
  ULevelStreamingAlwaysLoaded* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of ULevelStreaming
  ULevelStreamingAlwaysLoadedPtr* = ptr ULevelStreamingAlwaysLoaded
  ULevelStreamingLevelInstanceEditor* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of ULevelStreamingAlwaysLoaded
  ULevelStreamingLevelInstanceEditorPtr* = ptr ULevelStreamingLevelInstanceEditor
  ULevelStreamingDynamic* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of ULevelStreaming
  ULevelStreamingDynamicPtr* = ptr ULevelStreamingDynamic
  ALevelScriptActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ALevelScriptActorPtr* = ptr ALevelScriptActor
  ULevelScriptBlueprint* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  ULevelScriptBlueprintPtr* = ptr ULevelScriptBlueprint
  ALevelStreamingVolume* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of AVolume
  ALevelStreamingVolumePtr* = ptr ALevelStreamingVolume
  ULightmappedSurfaceCollection* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UObject
  ULightmappedSurfaceCollectionPtr* = ptr ULightmappedSurfaceCollection
  ULightMapTexture2D* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UTexture2D
  ULightMapTexture2DPtr* = ptr ULightMapTexture2D
  ALightmassCharacterIndirectDetailVolume* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of AVolume
  ALightmassCharacterIndirectDetailVolumePtr* = ptr ALightmassCharacterIndirectDetailVolume
  ALightmassImportanceVolume* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of AVolume
  ALightmassImportanceVolumePtr* = ptr ALightmassImportanceVolume
  ALightmassPortal* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ALightmassPortalPtr* = ptr ALightmassPortal
  ULightmassPortalComponent* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of USceneComponent
  ULightmassPortalComponentPtr* = ptr ULightmassPortalComponent
  ULightmassPrimitiveSettingsObject* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UObject
  ULightmassPrimitiveSettingsObjectPtr* = ptr ULightmassPrimitiveSettingsObject
  ULightWeightInstanceBlueprintFunctionLibrary* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  ULightWeightInstanceBlueprintFunctionLibraryPtr* = ptr ULightWeightInstanceBlueprintFunctionLibrary
  ALightWeightInstanceManager* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of AActor
  ALightWeightInstanceManagerPtr* = ptr ALightWeightInstanceManager
  ALightWeightInstanceStaticMeshManager* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of ALightWeightInstanceManager
  ALightWeightInstanceStaticMeshManagerPtr* = ptr ALightWeightInstanceStaticMeshManager
  ULineBatchComponent* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  ULineBatchComponentPtr* = ptr ULineBatchComponent
  ULocalLightComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of ULightComponent
  ULocalLightComponentPtr* = ptr ULocalLightComponent
  ULocalPlayerSubsystem* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of USubsystem
  ULocalPlayerSubsystemPtr* = ptr ULocalPlayerSubsystem
  ULODSyncComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UActorComponent
  ULODSyncComponentPtr* = ptr ULODSyncComponent
  ULODSyncInterface* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UInterface
  ULODSyncInterfacePtr* = ptr ULODSyncInterface
  UMapBuildDataRegistry* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UMapBuildDataRegistryPtr* = ptr UMapBuildDataRegistry
  UMaterialBillboardComponent* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UMaterialBillboardComponentPtr* = ptr UMaterialBillboardComponent
  UMaterialExpressionAbs* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionAbsPtr* = ptr UMaterialExpressionAbs
  UMaterialExpressionAbsorptionMediumMaterialOutput* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionCustomOutput
  UMaterialExpressionAbsorptionMediumMaterialOutputPtr* = ptr UMaterialExpressionAbsorptionMediumMaterialOutput
  UMaterialExpressionAdd* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionAddPtr* = ptr UMaterialExpressionAdd
  UMaterialExpressionTextureBase* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTextureBasePtr* = ptr UMaterialExpressionTextureBase
  UMaterialExpressionTextureSampleParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureBase
  UMaterialExpressionTextureSampleParameterPtr* = ptr UMaterialExpressionTextureSampleParameter
  UMaterialExpressionAntialiasedTextureMask* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureSampleParameter
  UMaterialExpressionAntialiasedTextureMaskPtr* = ptr UMaterialExpressionAntialiasedTextureMask
  UMaterialExpressionAppendVector* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionAppendVectorPtr* = ptr UMaterialExpressionAppendVector
  UMaterialExpressionArccosine* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionArccosinePtr* = ptr UMaterialExpressionArccosine
  UMaterialExpressionArcsine* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionArcsinePtr* = ptr UMaterialExpressionArcsine
  UMaterialExpressionArctangent* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionArctangentPtr* = ptr UMaterialExpressionArctangent
  UMaterialExpressionArctangent2* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionArctangent2Ptr* = ptr UMaterialExpressionArctangent2
  UMaterialExpressionBinaryOp* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionBinaryOpPtr* = ptr UMaterialExpressionBinaryOp
  UMaterialExpressionLess* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UMaterialExpressionBinaryOp
  UMaterialExpressionLessPtr* = ptr UMaterialExpressionLess
  UMaterialExpressionBlackBody* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionBlackBodyPtr* = ptr UMaterialExpressionBlackBody
  UMaterialExpressionBlendMaterialAttributes* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionBlendMaterialAttributesPtr* = ptr UMaterialExpressionBlendMaterialAttributes
  UMaterialExpressionBreakMaterialAttributes* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionBreakMaterialAttributesPtr* = ptr UMaterialExpressionBreakMaterialAttributes
  UMaterialExpressionBumpOffset* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionBumpOffsetPtr* = ptr UMaterialExpressionBumpOffset
  UMaterialExpressionCameraPositionWS* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCameraPositionWSPtr* = ptr UMaterialExpressionCameraPositionWS
  UMaterialExpressionCameraVectorWS* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCameraVectorWSPtr* = ptr UMaterialExpressionCameraVectorWS
  UMaterialExpressionCeil* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCeilPtr* = ptr UMaterialExpressionCeil
  UMaterialExpressionParameter* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionParameterPtr* = ptr UMaterialExpressionParameter
  UMaterialExpressionVectorParameter* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpressionParameter
  UMaterialExpressionVectorParameterPtr* = ptr UMaterialExpressionVectorParameter
  UMaterialExpressionChannelMaskParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionVectorParameter
  UMaterialExpressionChannelMaskParameterPtr* = ptr UMaterialExpressionChannelMaskParameter
  UMaterialExpressionClamp* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionClampPtr* = ptr UMaterialExpressionClamp
  UMaterialExpressionClearCoatNormalCustomOutput* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionCustomOutput
  UMaterialExpressionClearCoatNormalCustomOutputPtr* = ptr UMaterialExpressionClearCoatNormalCustomOutput
  UMaterialExpressionCollectionParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCollectionParameterPtr* = ptr UMaterialExpressionCollectionParameter
  UMaterialExpressionComment* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCommentPtr* = ptr UMaterialExpressionComment
  UMaterialExpressionComponentMask* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionComponentMaskPtr* = ptr UMaterialExpressionComponentMask
  UMaterialExpressionComposite* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCompositePtr* = ptr UMaterialExpressionComposite
  UMaterialExpressionConstant* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionConstantPtr* = ptr UMaterialExpressionConstant
  UMaterialExpressionConstant2Vector* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionConstant2VectorPtr* = ptr UMaterialExpressionConstant2Vector
  UMaterialExpressionConstant3Vector* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionConstant3VectorPtr* = ptr UMaterialExpressionConstant3Vector
  UMaterialExpressionConstant4Vector* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionConstant4VectorPtr* = ptr UMaterialExpressionConstant4Vector
  UMaterialExpressionConstantBiasScale* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionConstantBiasScalePtr* = ptr UMaterialExpressionConstantBiasScale
  UMaterialExpressionCosine* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCosinePtr* = ptr UMaterialExpressionCosine
  UMaterialExpressionCrossProduct* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCrossProductPtr* = ptr UMaterialExpressionCrossProduct
  UMaterialExpressionScalarParameter* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpressionParameter
  UMaterialExpressionScalarParameterPtr* = ptr UMaterialExpressionScalarParameter
  UMaterialExpressionCurveAtlasRowParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionScalarParameter
  UMaterialExpressionCurveAtlasRowParameterPtr* = ptr UMaterialExpressionCurveAtlasRowParameter
  UMaterialExpressionCustom* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionCustomPtr* = ptr UMaterialExpressionCustom
  UMaterialExpressionDDX* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionDDXPtr* = ptr UMaterialExpressionDDX
  UMaterialExpressionDDY* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionDDYPtr* = ptr UMaterialExpressionDDY
  UMaterialExpressionDesaturation* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionDesaturationPtr* = ptr UMaterialExpressionDesaturation
  UMaterialExpressionDistance* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionDistancePtr* = ptr UMaterialExpressionDistance
  UMaterialExpressionDivide* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionDividePtr* = ptr UMaterialExpressionDivide
  UMaterialExpressionDotProduct* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionDotProductPtr* = ptr UMaterialExpressionDotProduct
  UMaterialExpressionDoubleVectorParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionParameter
  UMaterialExpressionDoubleVectorParameterPtr* = ptr UMaterialExpressionDoubleVectorParameter
  UMaterialExpressionDynamicParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionDynamicParameterPtr* = ptr UMaterialExpressionDynamicParameter
  UMaterialExpressionExecBegin* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionExecBeginPtr* = ptr UMaterialExpressionExecBegin
  UMaterialExpressionExecEnd* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionExecEndPtr* = ptr UMaterialExpressionExecEnd
  UMaterialExpressionFeatureLevelSwitch* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFeatureLevelSwitchPtr* = ptr UMaterialExpressionFeatureLevelSwitch
  UMaterialExpressionFloor* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFloorPtr* = ptr UMaterialExpressionFloor
  UMaterialExpressionFmod* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFmodPtr* = ptr UMaterialExpressionFmod
  UMaterialExpressionFontSample* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFontSamplePtr* = ptr UMaterialExpressionFontSample
  UMaterialExpressionFontSampleParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionFontSample
  UMaterialExpressionFontSampleParameterPtr* = ptr UMaterialExpressionFontSampleParameter
  UMaterialExpressionForLoop* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionForLoopPtr* = ptr UMaterialExpressionForLoop
  UMaterialExpressionFrac* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFracPtr* = ptr UMaterialExpressionFrac
  UMaterialExpressionFresnel* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFresnelPtr* = ptr UMaterialExpressionFresnel
  UMaterialExpressionFunctionInput* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFunctionInputPtr* = ptr UMaterialExpressionFunctionInput
  UMaterialExpressionFunctionOutput* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionFunctionOutputPtr* = ptr UMaterialExpressionFunctionOutput
  UMaterialExpressionGenericConstant* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionGenericConstantPtr* = ptr UMaterialExpressionGenericConstant
  UMaterialExpressionConstantDouble* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UMaterialExpressionGenericConstant
  UMaterialExpressionConstantDoublePtr* = ptr UMaterialExpressionConstantDouble
  UMaterialExpressionGetLocal* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionGetLocalPtr* = ptr UMaterialExpressionGetLocal
  UMaterialExpressionGetMaterialAttributes* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionGetMaterialAttributesPtr* = ptr UMaterialExpressionGetMaterialAttributes
  UMaterialExpressionHairAttributes* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionHairAttributesPtr* = ptr UMaterialExpressionHairAttributes
  UMaterialExpressionHairColor* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionHairColorPtr* = ptr UMaterialExpressionHairColor
  UMaterialExpressionIf* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionIfPtr* = ptr UMaterialExpressionIf
  UMaterialExpressionIfThenElse* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionIfThenElsePtr* = ptr UMaterialExpressionIfThenElse
  UMaterialExpressionInverseLinearInterpolate* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionInverseLinearInterpolatePtr* = ptr UMaterialExpressionInverseLinearInterpolate
  UMaterialExpressionLinearInterpolate* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionLinearInterpolatePtr* = ptr UMaterialExpressionLinearInterpolate
  UMaterialExpressionLogarithm10* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionLogarithm10Ptr* = ptr UMaterialExpressionLogarithm10
  UMaterialExpressionLogarithm2* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionLogarithm2Ptr* = ptr UMaterialExpressionLogarithm2
  UMaterialExpressionMakeMaterialAttributes* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionMakeMaterialAttributesPtr* = ptr UMaterialExpressionMakeMaterialAttributes
  UMaterialExpressionMaterialAttributeLayers* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionMaterialAttributeLayersPtr* = ptr UMaterialExpressionMaterialAttributeLayers
  UMaterialExpressionMaterialFunctionCall* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionMaterialFunctionCallPtr* = ptr UMaterialExpressionMaterialFunctionCall
  UMaterialExpressionMaterialLayerOutput* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionFunctionOutput
  UMaterialExpressionMaterialLayerOutputPtr* = ptr UMaterialExpressionMaterialLayerOutput
  UMaterialExpressionMax* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionMaxPtr* = ptr UMaterialExpressionMax
  UMaterialExpressionMin* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionMinPtr* = ptr UMaterialExpressionMin
  UMaterialExpressionMultiply* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionMultiplyPtr* = ptr UMaterialExpressionMultiply
  UMaterialExpressionRerouteBase* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionRerouteBasePtr* = ptr UMaterialExpressionRerouteBase
  UMaterialExpressionNamedRerouteBase* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionRerouteBase
  UMaterialExpressionNamedRerouteBasePtr* = ptr UMaterialExpressionNamedRerouteBase
  UMaterialExpressionNoise* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionNoisePtr* = ptr UMaterialExpressionNoise
  UMaterialExpressionNormalize* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionNormalizePtr* = ptr UMaterialExpressionNormalize
  UMaterialExpressionOneMinus* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionOneMinusPtr* = ptr UMaterialExpressionOneMinus
  UMaterialExpressionPanner* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPannerPtr* = ptr UMaterialExpressionPanner
  UMaterialExpressionParticleSubUV* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureBase
  UMaterialExpressionParticleSubUVPtr* = ptr UMaterialExpressionParticleSubUV
  UMaterialExpressionParticleSubUVProperties* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionParticleSubUVPropertiesPtr* = ptr UMaterialExpressionParticleSubUVProperties
  UMaterialExpressionPinBase* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPinBasePtr* = ptr UMaterialExpressionPinBase
  UMaterialExpressionPixelDepth* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPixelDepthPtr* = ptr UMaterialExpressionPixelDepth
  UMaterialExpressionPixelNormalWS* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPixelNormalWSPtr* = ptr UMaterialExpressionPixelNormalWS
  UMaterialExpressionPower* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPowerPtr* = ptr UMaterialExpressionPower
  UMaterialExpressionPreSkinnedNormal* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPreSkinnedNormalPtr* = ptr UMaterialExpressionPreSkinnedNormal
  UMaterialExpressionPreSkinnedPosition* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPreSkinnedPositionPtr* = ptr UMaterialExpressionPreSkinnedPosition
  UMaterialExpressionPreviousFrameSwitch* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionPreviousFrameSwitchPtr* = ptr UMaterialExpressionPreviousFrameSwitch
  UMaterialExpressionQualitySwitch* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionQualitySwitchPtr* = ptr UMaterialExpressionQualitySwitch
  UMaterialExpressionReflectionVectorWS* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionReflectionVectorWSPtr* = ptr UMaterialExpressionReflectionVectorWS
  UMaterialExpressionRotateAboutAxis* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionRotateAboutAxisPtr* = ptr UMaterialExpressionRotateAboutAxis
  UMaterialExpressionRuntimeVirtualTextureSampleParameter* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionRuntimeVirtualTextureSampleParameterPtr* = ptr UMaterialExpressionRuntimeVirtualTextureSampleParameter
  UMaterialExpressionSaturate* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSaturatePtr* = ptr UMaterialExpressionSaturate
  UMaterialExpressionSetLocal* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSetLocalPtr* = ptr UMaterialExpressionSetLocal
  UMaterialExpressionSetMaterialAttributes* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSetMaterialAttributesPtr* = ptr UMaterialExpressionSetMaterialAttributes
  UMaterialExpressionShaderStageSwitch* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionShaderStageSwitchPtr* = ptr UMaterialExpressionShaderStageSwitch
  UMaterialExpressionShadingModel* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionShadingModelPtr* = ptr UMaterialExpressionShadingModel
  UMaterialExpressionShadingPathSwitch* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionShadingPathSwitchPtr* = ptr UMaterialExpressionShadingPathSwitch
  UMaterialExpressionSine* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSinePtr* = ptr UMaterialExpressionSine
  UMaterialExpressionSingleLayerWaterMaterialOutput* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionCustomOutput
  UMaterialExpressionSingleLayerWaterMaterialOutputPtr* = ptr UMaterialExpressionSingleLayerWaterMaterialOutput
  UMaterialExpressionSmoothStep* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSmoothStepPtr* = ptr UMaterialExpressionSmoothStep
  UMaterialExpressionSobol* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSobolPtr* = ptr UMaterialExpressionSobol
  UMaterialExpressionSpeedTree* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSpeedTreePtr* = ptr UMaterialExpressionSpeedTree
  UMaterialExpressionSphereMask* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSphereMaskPtr* = ptr UMaterialExpressionSphereMask
  UMaterialExpressionSquareRoot* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSquareRootPtr* = ptr UMaterialExpressionSquareRoot
  UMaterialExpressionStaticBool* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionStaticBoolPtr* = ptr UMaterialExpressionStaticBool
  UMaterialExpressionStaticBoolParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionParameter
  UMaterialExpressionStaticBoolParameterPtr* = ptr UMaterialExpressionStaticBoolParameter
  UMaterialExpressionStaticComponentMaskParameter* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionParameter
  UMaterialExpressionStaticComponentMaskParameterPtr* = ptr UMaterialExpressionStaticComponentMaskParameter
  UMaterialExpressionStaticSwitch* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionStaticSwitchPtr* = ptr UMaterialExpressionStaticSwitch
  UMaterialExpressionStaticSwitchParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionStaticBoolParameter
  UMaterialExpressionStaticSwitchParameterPtr* = ptr UMaterialExpressionStaticSwitchParameter
  UMaterialExpressionStep* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionStepPtr* = ptr UMaterialExpressionStep
  UMaterialExpressionStrataBSDF* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionStrataBSDFPtr* = ptr UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataLegacyConversion* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataLegacyConversionPtr* = ptr UMaterialExpressionStrataLegacyConversion
  UMaterialExpressionStrataSlabBSDF* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataSlabBSDFPtr* = ptr UMaterialExpressionStrataSlabBSDF
  UMaterialExpressionStrataVolumetricFogCloudBSDF* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataVolumetricFogCloudBSDFPtr* = ptr UMaterialExpressionStrataVolumetricFogCloudBSDF
  UMaterialExpressionStrataUnlitBSDF* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataUnlitBSDFPtr* = ptr UMaterialExpressionStrataUnlitBSDF
  UMaterialExpressionStrataHairBSDF* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataHairBSDFPtr* = ptr UMaterialExpressionStrataHairBSDF
  UMaterialExpressionStrataSingleLayerWaterBSDF* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataSingleLayerWaterBSDFPtr* = ptr UMaterialExpressionStrataSingleLayerWaterBSDF
  UMaterialExpressionStrataHorizontalMixing* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataHorizontalMixingPtr* = ptr UMaterialExpressionStrataHorizontalMixing
  UMaterialExpressionStrataVerticalLayering* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataVerticalLayeringPtr* = ptr UMaterialExpressionStrataVerticalLayering
  UMaterialExpressionStrataAdd* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataAddPtr* = ptr UMaterialExpressionStrataAdd
  UMaterialExpressionStrataWeight* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataWeightPtr* = ptr UMaterialExpressionStrataWeight
  UMaterialExpressionStrataTransmittanceToMFP* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionStrataBSDF
  UMaterialExpressionStrataTransmittanceToMFPPtr* = ptr UMaterialExpressionStrataTransmittanceToMFP
  UMaterialExpressionSubtract* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionSubtractPtr* = ptr UMaterialExpressionSubtract
  UMaterialExpressionTangent* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTangentPtr* = ptr UMaterialExpressionTangent
  UMaterialExpressionTangentOutput* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpressionCustomOutput
  UMaterialExpressionTangentOutputPtr* = ptr UMaterialExpressionTangentOutput
  UMaterialExpressionTemporalSobol* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTemporalSobolPtr* = ptr UMaterialExpressionTemporalSobol
  UMaterialExpressionTextureCoordinate* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTextureCoordinatePtr* = ptr UMaterialExpressionTextureCoordinate
  UMaterialExpressionTextureObject* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureBase
  UMaterialExpressionTextureObjectPtr* = ptr UMaterialExpressionTextureObject
  UMaterialExpressionTextureObjectParameter* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureSampleParameter
  UMaterialExpressionTextureObjectParameterPtr* = ptr UMaterialExpressionTextureObjectParameter
  UMaterialExpressionTextureSampleParameter2DArray* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureSampleParameter
  UMaterialExpressionTextureSampleParameter2DArrayPtr* = ptr UMaterialExpressionTextureSampleParameter2DArray
  UMaterialExpressionTextureSampleParameterCube* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureSampleParameter
  UMaterialExpressionTextureSampleParameterCubePtr* = ptr UMaterialExpressionTextureSampleParameterCube
  UMaterialExpressionTextureSampleParameterCubeArray* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureSampleParameter
  UMaterialExpressionTextureSampleParameterCubeArrayPtr* = ptr UMaterialExpressionTextureSampleParameterCubeArray
  UMaterialExpressionTextureSampleParameterSubUV* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureSampleParameter
  UMaterialExpressionTextureSampleParameterSubUVPtr* = ptr UMaterialExpressionTextureSampleParameterSubUV
  UMaterialExpressionTextureSampleParameterVolume* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionTextureSampleParameter
  UMaterialExpressionTextureSampleParameterVolumePtr* = ptr UMaterialExpressionTextureSampleParameterVolume
  UMaterialExpressionThinTranslucentMaterialOutput* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionCustomOutput
  UMaterialExpressionThinTranslucentMaterialOutputPtr* = ptr UMaterialExpressionThinTranslucentMaterialOutput
  UMaterialExpressionTime* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTimePtr* = ptr UMaterialExpressionTime
  UMaterialExpressionTransform* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTransformPtr* = ptr UMaterialExpressionTransform
  UMaterialExpressionTransformPosition* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTransformPositionPtr* = ptr UMaterialExpressionTransformPosition
  UMaterialExpressionTwoSidedSign* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionTwoSidedSignPtr* = ptr UMaterialExpressionTwoSidedSign
  UMaterialExpressionVectorNoise* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionVectorNoisePtr* = ptr UMaterialExpressionVectorNoise
  UMaterialExpressionVertexColor* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionVertexColorPtr* = ptr UMaterialExpressionVertexColor
  UMaterialExpressionVertexInterpolator* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialExpressionCustomOutput
  UMaterialExpressionVertexInterpolatorPtr* = ptr UMaterialExpressionVertexInterpolator
  UMaterialExpressionVertexNormalWS* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionVertexNormalWSPtr* = ptr UMaterialExpressionVertexNormalWS
  UMaterialExpressionVertexTangentWS* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionVertexTangentWSPtr* = ptr UMaterialExpressionVertexTangentWS
  UMaterialExpressionViewProperty* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionViewPropertyPtr* = ptr UMaterialExpressionViewProperty
  UMaterialExpressionVolumetricAdvancedMaterialOutput* {.importcpp: "$1_",
      inheritable, header: "UEGenClassDefs.h".} = object of UMaterialExpressionCustomOutput
  UMaterialExpressionVolumetricAdvancedMaterialOutputPtr* = ptr UMaterialExpressionVolumetricAdvancedMaterialOutput
  UMaterialExpressionWhileLoop* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionWhileLoopPtr* = ptr UMaterialExpressionWhileLoop
  UMaterialExpressionWorldPosition* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UMaterialExpression
  UMaterialExpressionWorldPositionPtr* = ptr UMaterialExpressionWorldPosition
  UMaterialFunctionInterface* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UMaterialFunctionInterfacePtr* = ptr UMaterialFunctionInterface
  UMaterialFunction* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UMaterialFunctionInterface
  UMaterialFunctionPtr* = ptr UMaterialFunction
  UMaterialFunctionInstance* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UMaterialFunctionInterface
  UMaterialFunctionInstancePtr* = ptr UMaterialFunctionInstance
  UMaterialFunctionMaterialLayer* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UMaterialFunction
  UMaterialFunctionMaterialLayerPtr* = ptr UMaterialFunctionMaterialLayer
  UMaterialFunctionMaterialLayerInstance* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialFunctionInstance
  UMaterialFunctionMaterialLayerInstancePtr* = ptr UMaterialFunctionMaterialLayerInstance
  UMaterialFunctionMaterialLayerBlend* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialFunction
  UMaterialFunctionMaterialLayerBlendPtr* = ptr UMaterialFunctionMaterialLayerBlend
  UMaterialFunctionMaterialLayerBlendInstance* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UMaterialFunctionInstance
  UMaterialFunctionMaterialLayerBlendInstancePtr* = ptr UMaterialFunctionMaterialLayerBlendInstance
  AMaterialInstanceActor* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of AActor
  AMaterialInstanceActorPtr* = ptr AMaterialInstanceActor
  UMaterialInstanceDynamic* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UMaterialInstance
  UMaterialInstanceDynamicPtr* = ptr UMaterialInstanceDynamic
  UMaterialParameterCollection* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UObject
  UMaterialParameterCollectionPtr* = ptr UMaterialParameterCollection
  AMatineeActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  AMatineeActorPtr* = ptr AMatineeActor
  AMatineeActorCameraAnim* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of AMatineeActor
  AMatineeActorCameraAnimPtr* = ptr AMatineeActorCameraAnim
  UMatineeAnimInterface* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UInterface
  UMatineeAnimInterfacePtr* = ptr UMatineeAnimInterface
  UMatineeInterface* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UInterface
  UMatineeInterfacePtr* = ptr UMatineeInterface
  UMeshDeformer* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UMeshDeformerPtr* = ptr UMeshDeformer
  UMeshDeformerInstance* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UMeshDeformerInstancePtr* = ptr UMeshDeformerInstance
  AMeshMergeCullingVolume* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of AVolume
  AMeshMergeCullingVolumePtr* = ptr AMeshMergeCullingVolume
  UMeshVertexPainterKismetLibrary* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UMeshVertexPainterKismetLibraryPtr* = ptr UMeshVertexPainterKismetLibrary
  UMirrorDataTable* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UDataTable
  UMirrorDataTablePtr* = ptr UMirrorDataTable
  UModelComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UModelComponentPtr* = ptr UModelComponent
  UMorphTarget* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UMorphTargetPtr* = ptr UMorphTarget
  UNavAgentInterface* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UInterface
  UNavAgentInterfacePtr* = ptr UNavAgentInterface
  UNavEdgeProviderInterface* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UInterface
  UNavEdgeProviderInterfacePtr* = ptr UNavEdgeProviderInterface
  UNavigationDataInterface* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UInterface
  UNavigationDataInterfacePtr* = ptr UNavigationDataInterface
  ANavigationObjectBase* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of AActor
  ANavigationObjectBasePtr* = ptr ANavigationObjectBase
  UNullNavSysConfig* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UNullNavSysConfigPtr* = ptr UNullNavSysConfig
  UNavPathObserverInterface* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UInterface
  UNavPathObserverInterfacePtr* = ptr UNavPathObserverInterface
  UNavRelevantInterface* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UInterface
  UNavRelevantInterfacePtr* = ptr UNavRelevantInterface
  UNetPushModelHelpers* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UNetPushModelHelpersPtr* = ptr UNetPushModelHelpers
  UNetworkPredictionInterface* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterface
  UNetworkPredictionInterfacePtr* = ptr UNetworkPredictionInterface
  UNodeMappingContainer* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UNodeMappingContainerPtr* = ptr UNodeMappingContainer
  UNodeMappingProviderInterface* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UInterface
  UNodeMappingProviderInterfacePtr* = ptr UNodeMappingProviderInterface
  ANote* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ANotePtr* = ptr ANote
  UObjectLibrary* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UObjectLibraryPtr* = ptr UObjectLibrary
  UOnlineBlueprintCallProxyBase* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UBlueprintAsyncActionBase
  UOnlineBlueprintCallProxyBasePtr* = ptr UOnlineBlueprintCallProxyBase
  UParticleEmitter* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UParticleEmitterPtr* = ptr UParticleEmitter
  UParticleLODLevel* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UParticleLODLevelPtr* = ptr UParticleLODLevel
  UFXSystemAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UFXSystemAssetPtr* = ptr UFXSystemAsset
  UParticleSystem* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UFXSystemAsset
  UParticleSystemPtr* = ptr UParticleSystem
  UParticleModule* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UParticleModulePtr* = ptr UParticleModule
  UParticleModuleAccelerationBase* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleAccelerationBasePtr* = ptr UParticleModuleAccelerationBase
  UParticleModuleAcceleration* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleAccelerationBase
  UParticleModuleAccelerationPtr* = ptr UParticleModuleAcceleration
  UParticleModuleAccelerationConstant* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleAccelerationBase
  UParticleModuleAccelerationConstantPtr* = ptr UParticleModuleAccelerationConstant
  UParticleModuleAccelerationDrag* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModuleAccelerationBase
  UParticleModuleAccelerationDragPtr* = ptr UParticleModuleAccelerationDrag
  UParticleModuleAccelerationDragScaleOverLife* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleAccelerationBase
  UParticleModuleAccelerationDragScaleOverLifePtr* = ptr UParticleModuleAccelerationDragScaleOverLife
  UParticleModuleAccelerationOverLifetime* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleAccelerationBase
  UParticleModuleAccelerationOverLifetimePtr* = ptr UParticleModuleAccelerationOverLifetime
  UParticleModuleAttractorBase* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleAttractorBasePtr* = ptr UParticleModuleAttractorBase
  UParticleModuleAttractorLine* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UParticleModuleAttractorBase
  UParticleModuleAttractorLinePtr* = ptr UParticleModuleAttractorLine
  UParticleModuleAttractorParticle* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UParticleModuleAttractorBase
  UParticleModuleAttractorParticlePtr* = ptr UParticleModuleAttractorParticle
  UParticleModuleAttractorPoint* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UParticleModuleAttractorBase
  UParticleModuleAttractorPointPtr* = ptr UParticleModuleAttractorPoint
  UParticleModuleBeamBase* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleBeamBasePtr* = ptr UParticleModuleBeamBase
  UParticleModuleBeamNoise* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModuleBeamBase
  UParticleModuleBeamNoisePtr* = ptr UParticleModuleBeamNoise
  UParticleModuleBeamSource* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UParticleModuleBeamBase
  UParticleModuleBeamSourcePtr* = ptr UParticleModuleBeamSource
  UParticleModuleBeamTarget* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UParticleModuleBeamBase
  UParticleModuleBeamTargetPtr* = ptr UParticleModuleBeamTarget
  UParticleModuleCameraBase* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleCameraBasePtr* = ptr UParticleModuleCameraBase
  UParticleModuleCameraOffset* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleCameraBase
  UParticleModuleCameraOffsetPtr* = ptr UParticleModuleCameraOffset
  UParticleModuleCollisionBase* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleCollisionBasePtr* = ptr UParticleModuleCollisionBase
  UParticleModuleCollision* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModuleCollisionBase
  UParticleModuleCollisionPtr* = ptr UParticleModuleCollision
  UParticleModuleCollisionGPU* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleCollisionBase
  UParticleModuleCollisionGPUPtr* = ptr UParticleModuleCollisionGPU
  UParticleModuleColorBase* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleColorBasePtr* = ptr UParticleModuleColorBase
  UParticleModuleColorOverLife* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UParticleModuleColorBase
  UParticleModuleColorOverLifePtr* = ptr UParticleModuleColorOverLife
  UParticleModuleColorScaleOverLife* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UParticleModuleColorBase
  UParticleModuleColorScaleOverLifePtr* = ptr UParticleModuleColorScaleOverLife
  UParticleModuleEventBase* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleEventBasePtr* = ptr UParticleModuleEventBase
  UParticleModuleEventGenerator* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UParticleModuleEventBase
  UParticleModuleEventGeneratorPtr* = ptr UParticleModuleEventGenerator
  UParticleModuleEventReceiverBase* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UParticleModuleEventBase
  UParticleModuleEventReceiverBasePtr* = ptr UParticleModuleEventReceiverBase
  UParticleModuleEventSendToGame* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UObject
  UParticleModuleEventSendToGamePtr* = ptr UParticleModuleEventSendToGame
  UParticleModuleKillBase* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleKillBasePtr* = ptr UParticleModuleKillBase
  UParticleModuleLifetimeBase* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleLifetimeBasePtr* = ptr UParticleModuleLifetimeBase
  UParticleModuleLifetime* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UParticleModuleLifetimeBase
  UParticleModuleLifetimePtr* = ptr UParticleModuleLifetime
  UParticleModuleLightBase* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleLightBasePtr* = ptr UParticleModuleLightBase
  UParticleModuleLight* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UParticleModuleLightBase
  UParticleModuleLightPtr* = ptr UParticleModuleLight
  UParticleModuleLight_Seeded* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleLight
  UParticleModuleLight_SeededPtr* = ptr UParticleModuleLight_Seeded
  UParticleModuleLocationBase* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleLocationBasePtr* = ptr UParticleModuleLocationBase
  UParticleModuleMaterialBase* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleMaterialBasePtr* = ptr UParticleModuleMaterialBase
  UParticleModuleMeshMaterial* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleMaterialBase
  UParticleModuleMeshMaterialPtr* = ptr UParticleModuleMeshMaterial
  UParticleModuleRotationBase* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleRotationBasePtr* = ptr UParticleModuleRotationBase
  UParticleModuleMeshRotation* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleRotationBase
  UParticleModuleMeshRotationPtr* = ptr UParticleModuleMeshRotation
  UParticleModuleRotationRateBase* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleRotationRateBasePtr* = ptr UParticleModuleRotationRateBase
  UParticleModuleMeshRotationRate* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModuleRotationRateBase
  UParticleModuleMeshRotationRatePtr* = ptr UParticleModuleMeshRotationRate
  UParticleModuleOrbitBase* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleOrbitBasePtr* = ptr UParticleModuleOrbitBase
  UParticleModuleOrbit* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UParticleModuleOrbitBase
  UParticleModuleOrbitPtr* = ptr UParticleModuleOrbit
  UParticleModuleOrientationBase* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleOrientationBasePtr* = ptr UParticleModuleOrientationBase
  UParticleModuleOrientationAxisLock* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UParticleModuleOrientationBase
  UParticleModuleOrientationAxisLockPtr* = ptr UParticleModuleOrientationAxisLock
  UParticleModuleParameterBase* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleParameterBasePtr* = ptr UParticleModuleParameterBase
  UParticleModuleParameterDynamic* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModuleParameterBase
  UParticleModuleParameterDynamicPtr* = ptr UParticleModuleParameterDynamic
  UParticleModuleRequired* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleRequiredPtr* = ptr UParticleModuleRequired
  UParticleModuleRotation* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UParticleModuleRotationBase
  UParticleModuleRotationPtr* = ptr UParticleModuleRotation
  UParticleModuleRotationOverLifetime* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleRotationBase
  UParticleModuleRotationOverLifetimePtr* = ptr UParticleModuleRotationOverLifetime
  UParticleModuleRotationRate* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleRotationRateBase
  UParticleModuleRotationRatePtr* = ptr UParticleModuleRotationRate
  UParticleModuleRotationRateMultiplyLife* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleRotationRateBase
  UParticleModuleRotationRateMultiplyLifePtr* = ptr UParticleModuleRotationRateMultiplyLife
  UParticleModuleSizeBase* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleSizeBasePtr* = ptr UParticleModuleSizeBase
  UParticleModuleSize* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UParticleModuleSizeBase
  UParticleModuleSizePtr* = ptr UParticleModuleSize
  UParticleModuleSizeMultiplyLife* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModuleSizeBase
  UParticleModuleSizeMultiplyLifePtr* = ptr UParticleModuleSizeMultiplyLife
  UParticleModuleSizeScale* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModuleSizeBase
  UParticleModuleSizeScalePtr* = ptr UParticleModuleSizeScale
  UParticleModuleSizeScaleBySpeed* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModuleSizeBase
  UParticleModuleSizeScaleBySpeedPtr* = ptr UParticleModuleSizeScaleBySpeed
  UParticleModuleSpawnBase* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleSpawnBasePtr* = ptr UParticleModuleSpawnBase
  UParticleModuleSpawn* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UParticleModuleSpawnBase
  UParticleModuleSpawnPtr* = ptr UParticleModuleSpawn
  UParticleModuleSpawnPerUnit* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleSpawnBase
  UParticleModuleSpawnPerUnitPtr* = ptr UParticleModuleSpawnPerUnit
  UParticleModuleSubUVBase* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleSubUVBasePtr* = ptr UParticleModuleSubUVBase
  UParticleModuleSubUV* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UParticleModuleSubUVBase
  UParticleModuleSubUVPtr* = ptr UParticleModuleSubUV
  UParticleModuleSubUVMovie* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UParticleModuleSubUV
  UParticleModuleSubUVMoviePtr* = ptr UParticleModuleSubUVMovie
  UParticleModuleTrailBase* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleTrailBasePtr* = ptr UParticleModuleTrailBase
  UParticleModuleTrailSource* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UParticleModuleTrailBase
  UParticleModuleTrailSourcePtr* = ptr UParticleModuleTrailSource
  UParticleModuleTypeDataBase* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleTypeDataBasePtr* = ptr UParticleModuleTypeDataBase
  UParticleModuleTypeDataAnimTrail* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UParticleModuleTypeDataBase
  UParticleModuleTypeDataAnimTrailPtr* = ptr UParticleModuleTypeDataAnimTrail
  UParticleModuleTypeDataBeam2* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UParticleModuleTypeDataBase
  UParticleModuleTypeDataBeam2Ptr* = ptr UParticleModuleTypeDataBeam2
  UParticleModuleTypeDataGpu* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UParticleModuleTypeDataBase
  UParticleModuleTypeDataGpuPtr* = ptr UParticleModuleTypeDataGpu
  UParticleModuleTypeDataMesh* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleTypeDataBase
  UParticleModuleTypeDataMeshPtr* = ptr UParticleModuleTypeDataMesh
  UParticleModuleTypeDataRibbon* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UParticleModuleTypeDataBase
  UParticleModuleTypeDataRibbonPtr* = ptr UParticleModuleTypeDataRibbon
  UParticleModuleVectorFieldBase* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleVectorFieldBasePtr* = ptr UParticleModuleVectorFieldBase
  UParticleModuleVectorFieldLocal* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModuleVectorFieldBase
  UParticleModuleVectorFieldLocalPtr* = ptr UParticleModuleVectorFieldLocal
  UParticleModuleVectorFieldRotationRate* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleVectorFieldBase
  UParticleModuleVectorFieldRotationRatePtr* = ptr UParticleModuleVectorFieldRotationRate
  UParticleModuleVectorFieldScale* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of UParticleModuleVectorFieldBase
  UParticleModuleVectorFieldScalePtr* = ptr UParticleModuleVectorFieldScale
  UParticleModuleVectorFieldScaleOverLife* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleVectorFieldBase
  UParticleModuleVectorFieldScaleOverLifePtr* = ptr UParticleModuleVectorFieldScaleOverLife
  UParticleModuleVelocityBase* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModule
  UParticleModuleVelocityBasePtr* = ptr UParticleModuleVelocityBase
  UParticleModuleVelocity* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UParticleModuleVelocityBase
  UParticleModuleVelocityPtr* = ptr UParticleModuleVelocity
  UParticleModuleVelocityCone* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UParticleModuleVelocityBase
  UParticleModuleVelocityConePtr* = ptr UParticleModuleVelocityCone
  UParticleModuleVelocityInheritParent* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleVelocityBase
  UParticleModuleVelocityInheritParentPtr* = ptr UParticleModuleVelocityInheritParent
  UParticleModuleVelocityOverLifetime* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UParticleModuleVelocityBase
  UParticleModuleVelocityOverLifetimePtr* = ptr UParticleModuleVelocityOverLifetime
  UParticleSpriteEmitter* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UParticleEmitter
  UParticleSpriteEmitterPtr* = ptr UParticleSpriteEmitter
  UFXSystemComponent* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UFXSystemComponentPtr* = ptr UFXSystemComponent
  UParticleSystemComponent* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UFXSystemComponent
  UParticleSystemComponentPtr* = ptr UParticleSystemComponent
  UPathFollowingAgentInterface* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UInterface
  UPathFollowingAgentInterfacePtr* = ptr UPathFollowingAgentInterface
  UPawnNoiseEmitterComponent* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UActorComponent
  UPawnNoiseEmitterComponentPtr* = ptr UPawnNoiseEmitterComponent
  UPhysicalAnimationComponent* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UActorComponent
  UPhysicalAnimationComponentPtr* = ptr UPhysicalAnimationComponent
  UPhysicalMaterialMask* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UPhysicalMaterialMaskPtr* = ptr UPhysicalMaterialMask
  UPhysicsAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UPhysicsAssetPtr* = ptr UPhysicsAsset
  USkeletalBodySetup* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UBodySetup
  USkeletalBodySetupPtr* = ptr USkeletalBodySetup
  UPhysicsCollisionHandler* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UObject
  UPhysicsCollisionHandlerPtr* = ptr UPhysicsCollisionHandler
  ARigidBodyBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ARigidBodyBasePtr* = ptr ARigidBodyBase
  APhysicsConstraintActor* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of ARigidBodyBase
  APhysicsConstraintActorPtr* = ptr APhysicsConstraintActor
  UPhysicsConstraintComponent* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of USceneComponent
  UPhysicsConstraintComponentPtr* = ptr UPhysicsConstraintComponent
  UPhysicsConstraintTemplate* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UPhysicsConstraintTemplatePtr* = ptr UPhysicsConstraintTemplate
  UPhysicsFieldComponent* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USceneComponent
  UPhysicsFieldComponentPtr* = ptr UPhysicsFieldComponent
  UPhysicsHandleComponent* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UActorComponent
  UPhysicsHandleComponentPtr* = ptr UPhysicsHandleComponent
  UPhysicsSpringComponent* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of USceneComponent
  UPhysicsSpringComponentPtr* = ptr UPhysicsSpringComponent
  UPhysicsThrusterComponent* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of USceneComponent
  UPhysicsThrusterComponentPtr* = ptr UPhysicsThrusterComponent
  ASceneCapture* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ASceneCapturePtr* = ptr ASceneCapture
  APlanarReflection* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ASceneCapture
  APlanarReflectionPtr* = ptr APlanarReflection
  USceneCaptureComponent* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USceneComponent
  USceneCaptureComponentPtr* = ptr USceneCaptureComponent
  UPlanarReflectionComponent* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of USceneCaptureComponent
  UPlanarReflectionComponentPtr* = ptr UPlanarReflectionComponent
  APlaneReflectionCapture* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of AReflectionCapture
  APlaneReflectionCapturePtr* = ptr APlaneReflectionCapture
  UPlaneReflectionCaptureComponent* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UReflectionCaptureComponent
  UPlaneReflectionCaptureComponentPtr* = ptr UPlaneReflectionCaptureComponent
  UPlatformEventsComponent* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UActorComponent
  UPlatformEventsComponentPtr* = ptr UPlatformEventsComponent
  UPlatformInterfaceWebResponse* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UObject
  UPlatformInterfaceWebResponsePtr* = ptr UPlatformInterfaceWebResponse
  APlayerCameraManager* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of AActor
  APlayerCameraManagerPtr* = ptr APlayerCameraManager
  APlayerStart* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ANavigationObjectBase
  APlayerStartPtr* = ptr APlayerStart
  APlayerStartPIE* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of APlayerStart
  APlayerStartPIEPtr* = ptr APlayerStartPIE
  APlayerState* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AInfo
  APlayerStatePtr* = ptr APlayerState
  APointLight* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ALight
  APointLightPtr* = ptr APointLight
  UPointLightComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of ULocalLightComponent
  UPointLightComponentPtr* = ptr UPointLightComponent
  UPolys* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UPolysPtr* = ptr UPolys
  UPoseableMeshComponent* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USkinnedMeshComponent
  UPoseableMeshComponentPtr* = ptr UPoseableMeshComponent
  UPoseAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UAnimationAsset
  UPoseAssetPtr* = ptr UPoseAsset
  UPostProcessComponent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of USceneComponent
  UPostProcessComponentPtr* = ptr UPostProcessComponent
  APostProcessVolume* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of AVolume
  APostProcessVolumePtr* = ptr APostProcessVolume
  APrecomputedVisibilityOverrideVolume* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of AVolume
  APrecomputedVisibilityOverrideVolumePtr* = ptr APrecomputedVisibilityOverrideVolume
  APrecomputedVisibilityVolume* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of AVolume
  APrecomputedVisibilityVolumePtr* = ptr APrecomputedVisibilityVolume
  UPreviewCollectionInterface* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterface
  UPreviewCollectionInterfacePtr* = ptr UPreviewCollectionInterface
  UPreviewMeshCollection* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UDataAsset
  UPreviewMeshCollectionPtr* = ptr UPreviewMeshCollection
  UProjectileMovementComponent* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UMovementComponent
  UProjectileMovementComponentPtr* = ptr UProjectileMovementComponent
  ARadialForceActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ARigidBodyBase
  ARadialForceActorPtr* = ptr ARadialForceActor
  URadialForceComponent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of USceneComponent
  URadialForceComponentPtr* = ptr URadialForceComponent
  ARectLight* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ALight
  ARectLightPtr* = ptr ARectLight
  URectLightComponent* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of ULocalLightComponent
  URectLightComponentPtr* = ptr URectLightComponent
  UReplaySubsystem* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UGameInstanceSubsystem
  UReplaySubsystemPtr* = ptr UReplaySubsystem
  UReplicationDriver* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UObject
  UReplicationDriverPtr* = ptr UReplicationDriver
  UReplicationConnectionDriver* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of UObject
  UReplicationConnectionDriverPtr* = ptr UReplicationConnectionDriver
  UReporterBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UReporterBasePtr* = ptr UReporterBase
  UReverbEffect* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UReverbEffectPtr* = ptr UReverbEffect
  URig* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  URigPtr* = ptr URig
  URotatingMovementComponent* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UMovementComponent
  URotatingMovementComponentPtr* = ptr URotatingMovementComponent
  URuntimeOptionsBase* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UObject
  URuntimeOptionsBasePtr* = ptr URuntimeOptionsBase
  URuntimeVirtualTexture* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UObject
  URuntimeVirtualTexturePtr* = ptr URuntimeVirtualTexture
  URuntimeVirtualTextureComponent* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of USceneComponent
  URuntimeVirtualTextureComponentPtr* = ptr URuntimeVirtualTextureComponent
  ARuntimeVirtualTextureVolume* {.importcpp: "$1_", inheritable,
                                  header: "UEGenClassDefs.h".} = object of AActor
  ARuntimeVirtualTextureVolumePtr* = ptr ARuntimeVirtualTextureVolume
  URVOAvoidanceInterface* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UInterface
  URVOAvoidanceInterfacePtr* = ptr URVOAvoidanceInterface
  USaveGame* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USaveGamePtr* = ptr USaveGame
  ASceneCapture2D* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ASceneCapture
  ASceneCapture2DPtr* = ptr ASceneCapture2D
  USceneCaptureComponent2D* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of USceneCaptureComponent
  USceneCaptureComponent2DPtr* = ptr USceneCaptureComponent2D
  USceneCaptureComponentCube* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of USceneCaptureComponent
  USceneCaptureComponentCubePtr* = ptr USceneCaptureComponentCube
  ASceneCaptureCube* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ASceneCapture
  ASceneCaptureCubePtr* = ptr ASceneCaptureCube
  USCS_Node* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USCS_NodePtr* = ptr USCS_Node
  AServerStatReplicator* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of AInfo
  AServerStatReplicatorPtr* = ptr AServerStatReplicator
  UShadowMapTexture2D* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UTexture2D
  UShadowMapTexture2DPtr* = ptr UShadowMapTexture2D
  USimpleConstructionScript* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UObject
  USimpleConstructionScriptPtr* = ptr USimpleConstructionScript
  USkeletalMesh* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UStreamableRenderAsset
  USkeletalMeshPtr* = ptr USkeletalMesh
  USkeletalMeshLODSettings* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UDataAsset
  USkeletalMeshLODSettingsPtr* = ptr USkeletalMeshLODSettings
  USkeletalMeshSocket* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UObject
  USkeletalMeshSocketPtr* = ptr USkeletalMeshSocket
  ASkyAtmosphere* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AInfo
  ASkyAtmospherePtr* = ptr ASkyAtmosphere
  USkyLightComponent* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of ULightComponentBase
  USkyLightComponentPtr* = ptr USkyLightComponent
  USlateBrushAsset* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USlateBrushAssetPtr* = ptr USlateBrushAsset
  USlateTextureAtlasInterface* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterface
  USlateTextureAtlasInterfacePtr* = ptr USlateTextureAtlasInterface
  USMInstanceManager* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UInterface
  USMInstanceManagerPtr* = ptr USMInstanceManager
  USMInstanceManagerProvider* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UInterface
  USMInstanceManagerProviderPtr* = ptr USMInstanceManagerProvider
  USoundAttenuation* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundAttenuationPtr* = ptr USoundAttenuation
  USoundClass* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundClassPtr* = ptr USoundClass
  USoundConcurrency* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundConcurrencyPtr* = ptr USoundConcurrency
  USoundCue* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundBase
  USoundCuePtr* = ptr USoundCue
  USoundEffectPresetWidgetInterface* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UAudioPanelWidgetInterface
  USoundEffectPresetWidgetInterfacePtr* = ptr USoundEffectPresetWidgetInterface
  USoundEffectSourcePreset* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of USoundEffectPreset
  USoundEffectSourcePresetPtr* = ptr USoundEffectSourcePreset
  USoundEffectSourcePresetChain* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of UObject
  USoundEffectSourcePresetChainPtr* = ptr USoundEffectSourcePresetChain
  USoundGroups* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundGroupsPtr* = ptr USoundGroups
  USoundMix* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundMixPtr* = ptr USoundMix
  USoundNode* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundNodePtr* = ptr USoundNode
  USoundNodeAssetReferencer* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeAssetReferencerPtr* = ptr USoundNodeAssetReferencer
  USoundNodeAttenuation* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeAttenuationPtr* = ptr USoundNodeAttenuation
  USoundNodeBranch* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeBranchPtr* = ptr USoundNodeBranch
  USoundNodeConcatenator* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeConcatenatorPtr* = ptr USoundNodeConcatenator
  USoundNodeDelay* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeDelayPtr* = ptr USoundNodeDelay
  USoundNodeDialoguePlayer* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeDialoguePlayerPtr* = ptr USoundNodeDialoguePlayer
  USoundNodeDistanceCrossFade* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeDistanceCrossFadePtr* = ptr USoundNodeDistanceCrossFade
  USoundNodeEnveloper* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeEnveloperPtr* = ptr USoundNodeEnveloper
  USoundNodeGroupControl* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeGroupControlPtr* = ptr USoundNodeGroupControl
  USoundNodeLooping* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeLoopingPtr* = ptr USoundNodeLooping
  USoundNodeMature* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeMaturePtr* = ptr USoundNodeMature
  USoundNodeMixer* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeMixerPtr* = ptr USoundNodeMixer
  USoundNodeModulator* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeModulatorPtr* = ptr USoundNodeModulator
  USoundNodeModulatorContinuous* {.importcpp: "$1_", inheritable,
                                   header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeModulatorContinuousPtr* = ptr USoundNodeModulatorContinuous
  USoundNodeParamCrossFade* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of USoundNodeDistanceCrossFade
  USoundNodeParamCrossFadePtr* = ptr USoundNodeParamCrossFade
  USoundNodeQualityLevel* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeQualityLevelPtr* = ptr USoundNodeQualityLevel
  USoundNodeRandom* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeRandomPtr* = ptr USoundNodeRandom
  USoundNodeSoundClass* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeSoundClassPtr* = ptr USoundNodeSoundClass
  USoundNodeSwitch* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeSwitchPtr* = ptr USoundNodeSwitch
  USoundNodeWaveParam* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of USoundNode
  USoundNodeWaveParamPtr* = ptr USoundNodeWaveParam
  USoundNodeWavePlayer* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of USoundNodeAssetReferencer
  USoundNodeWavePlayerPtr* = ptr USoundNodeWavePlayer
  USoundParameterControllerInterface* {.importcpp: "$1_", inheritable,
                                        header: "UEGenClassDefs.h".} = object of UAudioParameterControllerInterface
  USoundParameterControllerInterfacePtr* = ptr USoundParameterControllerInterface
  UAudioParameterConversionStatics* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UAudioParameterConversionStaticsPtr* = ptr UAudioParameterConversionStatics
  USoundSourceBus* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundWave
  USoundSourceBusPtr* = ptr USoundSourceBus
  USoundSubmixBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USoundSubmixBasePtr* = ptr USoundSubmixBase
  USoundSubmixWithParentBase* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of USoundSubmixBase
  USoundSubmixWithParentBasePtr* = ptr USoundSubmixWithParentBase
  USoundSubmix* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundSubmixWithParentBase
  USoundSubmixPtr* = ptr USoundSubmix
  USoundfieldSubmix* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundSubmixWithParentBase
  USoundfieldSubmixPtr* = ptr USoundfieldSubmix
  UEndpointSubmix* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of USoundSubmixBase
  UEndpointSubmixPtr* = ptr UEndpointSubmix
  USoundfieldEndpointSubmix* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of USoundSubmixBase
  USoundfieldEndpointSubmixPtr* = ptr USoundfieldEndpointSubmix
  USoundSubmixWidgetInterface* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterface
  USoundSubmixWidgetInterfacePtr* = ptr USoundSubmixWidgetInterface
  ASpectatorPawn* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of ADefaultPawn
  ASpectatorPawnPtr* = ptr ASpectatorPawn
  ASphereReflectionCapture* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of AReflectionCapture
  ASphereReflectionCapturePtr* = ptr ASphereReflectionCapture
  USphereReflectionCaptureComponent* {.importcpp: "$1_", inheritable,
                                       header: "UEGenClassDefs.h".} = object of UReflectionCaptureComponent
  USphereReflectionCaptureComponentPtr* = ptr USphereReflectionCaptureComponent
  USplineMetadata* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USplineMetadataPtr* = ptr USplineMetadata
  USplineComponent* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  USplineComponentPtr* = ptr USplineComponent
  USplineMeshComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UStaticMeshComponent
  USplineMeshComponentPtr* = ptr USplineMeshComponent
  USpotLightComponent* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of UPointLightComponent
  USpotLightComponentPtr* = ptr USpotLightComponent
  USpringArmComponent* {.importcpp: "$1_", inheritable,
                         header: "UEGenClassDefs.h".} = object of USceneComponent
  USpringArmComponentPtr* = ptr USpringArmComponent
  UStaticMesh* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UStreamableRenderAsset
  UStaticMeshPtr* = ptr UStaticMesh
  UStaticMeshSocket* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UStaticMeshSocketPtr* = ptr UStaticMeshSocket
  UStereoLayerShape* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UStereoLayerShapePtr* = ptr UStereoLayerShape
  UStereoLayerShapeCylinder* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UStereoLayerShape
  UStereoLayerShapeCylinderPtr* = ptr UStereoLayerShapeCylinder
  UStereoLayerShapeEquirect* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UStereoLayerShape
  UStereoLayerShapeEquirectPtr* = ptr UStereoLayerShapeEquirect
  UStereoLayerComponent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of USceneComponent
  UStereoLayerComponentPtr* = ptr UStereoLayerComponent
  UStereoLayerFunctionLibrary* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UStereoLayerFunctionLibraryPtr* = ptr UStereoLayerFunctionLibrary
  USubsurfaceProfile* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UObject
  USubsurfaceProfilePtr* = ptr USubsurfaceProfile
  USubsystemBlueprintLibrary* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  USubsystemBlueprintLibraryPtr* = ptr USubsystemBlueprintLibrary
  USubUVAnimation* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  USubUVAnimationPtr* = ptr USubUVAnimation
  USystemTimeTimecodeProvider* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UTimecodeProvider
  USystemTimeTimecodeProviderPtr* = ptr USystemTimeTimecodeProvider
  ATargetPoint* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ATargetPointPtr* = ptr ATargetPoint
  ATextRenderActor* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ATextRenderActorPtr* = ptr ATextRenderActor
  UTextRenderComponent* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UTextRenderComponentPtr* = ptr UTextRenderComponent
  UTexture2DArray* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UTexture
  UTexture2DArrayPtr* = ptr UTexture2DArray
  UTexture2DDynamic* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UTexture
  UTexture2DDynamicPtr* = ptr UTexture2DDynamic
  UTextureCubeArray* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UTexture
  UTextureCubeArrayPtr* = ptr UTextureCubeArray
  UTextureLightProfile* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UTexture2D
  UTextureLightProfilePtr* = ptr UTextureLightProfile
  UTextureMipDataProviderFactory* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UAssetUserData
  UTextureMipDataProviderFactoryPtr* = ptr UTextureMipDataProviderFactory
  UTextureRenderTarget2DArray* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UTextureRenderTarget
  UTextureRenderTarget2DArrayPtr* = ptr UTextureRenderTarget2DArray
  UTextureRenderTargetCube* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UTextureRenderTarget
  UTextureRenderTargetCubePtr* = ptr UTextureRenderTargetCube
  UTextureRenderTargetVolume* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UTextureRenderTarget
  UTextureRenderTargetVolumePtr* = ptr UTextureRenderTargetVolume
  UTimelineComponent* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UActorComponent
  UTimelineComponentPtr* = ptr UTimelineComponent
  UTimelineTemplate* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UTimelineTemplatePtr* = ptr UTimelineTemplate
  UTouchInterface* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UTouchInterfacePtr* = ptr UTouchInterface
  ATriggerBase* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AActor
  ATriggerBasePtr* = ptr ATriggerBase
  UTypedElementCommonActions* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UTypedElementCommonActionsPtr* = ptr UTypedElementCommonActions
  UTypedElementWorldInterface* {.importcpp: "$1_", inheritable,
                                 header: "UEGenClassDefs.h".} = object of UInterface
  UTypedElementWorldInterfacePtr* = ptr UTypedElementWorldInterface
  UVectorField* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UObject
  UVectorFieldPtr* = ptr UVectorField
  UVectorFieldAnimated* {.importcpp: "$1_", inheritable,
                          header: "UEGenClassDefs.h".} = object of UVectorField
  UVectorFieldAnimatedPtr* = ptr UVectorFieldAnimated
  UVectorFieldComponent* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UPrimitiveComponent
  UVectorFieldComponentPtr* = ptr UVectorFieldComponent
  UVectorFieldStatic* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of UVectorField
  UVectorFieldStaticPtr* = ptr UVectorFieldStatic
  AVectorFieldVolume* {.importcpp: "$1_", inheritable,
                        header: "UEGenClassDefs.h".} = object of AActor
  AVectorFieldVolumePtr* = ptr AVectorFieldVolume
  UViewportStatsSubsystem* {.importcpp: "$1_", inheritable,
                             header: "UEGenClassDefs.h".} = object of UWorldSubsystem
  UViewportStatsSubsystemPtr* = ptr UViewportStatsSubsystem
  UVirtualTextureBuilder* {.importcpp: "$1_", inheritable,
                            header: "UEGenClassDefs.h".} = object of UObject
  UVirtualTextureBuilderPtr* = ptr UVirtualTextureBuilder
  UVisualLoggerDebugSnapshotInterface* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UInterface
  UVisualLoggerDebugSnapshotInterfacePtr* = ptr UVisualLoggerDebugSnapshotInterface
  UVisualLoggerKismetLibrary* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UVisualLoggerKismetLibraryPtr* = ptr UVisualLoggerKismetLibrary
  UVOIPTalker* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UActorComponent
  UVOIPTalkerPtr* = ptr UVOIPTalker
  UVOIPStatics* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UBlueprintFunctionLibrary
  UVOIPStaticsPtr* = ptr UVOIPStatics
  UVolumeTexture* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of UTexture
  UVolumeTexturePtr* = ptr UVolumeTexture
  UVolumetricCloudComponent* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of USceneComponent
  UVolumetricCloudComponentPtr* = ptr UVolumetricCloudComponent
  AVolumetricCloud* {.importcpp: "$1_", inheritable, header: "UEGenClassDefs.h".} = object of AInfo
  AVolumetricCloudPtr* = ptr AVolumetricCloud
  AVolumetricLightmapDensityVolume* {.importcpp: "$1_", inheritable,
                                      header: "UEGenClassDefs.h".} = object of AVolume
  AVolumetricLightmapDensityVolumePtr* = ptr AVolumetricLightmapDensityVolume
  UWindDirectionalSourceComponent* {.importcpp: "$1_", inheritable,
                                     header: "UEGenClassDefs.h".} = object of USceneComponent
  UWindDirectionalSourceComponentPtr* = ptr UWindDirectionalSourceComponent
  UWorldPartitionEditorHash* {.importcpp: "$1_", inheritable,
                               header: "UEGenClassDefs.h".} = object of UObject
  UWorldPartitionEditorHashPtr* = ptr UWorldPartitionEditorHash
  UWorldPartitionStreamingPolicy* {.importcpp: "$1_", inheritable,
                                    header: "UEGenClassDefs.h".} = object of UObject
  UWorldPartitionStreamingPolicyPtr* = ptr UWorldPartitionStreamingPolicy
  UWorldPartitionRuntimeCell* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UWorldPartitionRuntimeCellPtr* = ptr UWorldPartitionRuntimeCell
  UWorldPartitionRuntimeHash* {.importcpp: "$1_", inheritable,
                                header: "UEGenClassDefs.h".} = object of UObject
  UWorldPartitionRuntimeHashPtr* = ptr UWorldPartitionRuntimeHash
  UWorldPartitionRuntimeSpatialHashCell* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UWorldPartitionRuntimeCell
  UWorldPartitionRuntimeSpatialHashCellPtr* = ptr UWorldPartitionRuntimeSpatialHashCell
  UWorldPartitionStreamingSourceComponent* {.importcpp: "$1_", inheritable,
      header: "UEGenClassDefs.h".} = object of UActorComponent
  UWorldPartitionStreamingSourceComponentPtr* = ptr UWorldPartitionStreamingSourceComponent
  UWorldPartitionSubsystem* {.importcpp: "$1_", inheritable,
                              header: "UEGenClassDefs.h".} = object of UTickableWorldSubsystem
  UWorldPartitionSubsystemPtr* = ptr UWorldPartitionSubsystem
  UHierarchicalLODSetup* {.importcpp: "$1_", inheritable,
                           header: "UEGenClassDefs.h".} = object of UObject
  UHierarchicalLODSetupPtr* = ptr UHierarchicalLODSetup
  FFloatRK4SpringInterpolator* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
  
  FFormatArgumentData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    argumentName*: FString
    argumentValueType*: EFormatArgumentType::Type
    argumentValue*: FText
    argumentValueInt*: int64
    argumentValueFloat*: float32
    argumentValueDouble*: float64
    argumentValueGender*: ETextGender

  ETextGender* {.size: sizeof(uint8), pure.} = enum
    Masculine, Feminine, Neuter, ETextGender_MAX
  EFormatArgumentType* {.size: sizeof(uint8), pure.} = enum
    Int, UInt, Float, Double, Text, Gender, EFormatArgumentType_MAX
  FVectorRK4SpringInterpolator* {.inject, importcpp: "$1_",
                                  header: "UEGenBindings.h".} = object
  
  FAnimDataModelModifiedDynamicEvent__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FAnimDataModelNotifPayload* {.inject, importcpp: "$1_",
                                header: "UEGenBindings.h".} = object
  
  EAnimDataModelNotifyType* {.size: sizeof(uint8), pure.} = enum
    BracketOpened, BracketClosed, TrackAdded, TrackChanged, TrackRemoved,
    SequenceLengthChanged, FrameRateChanged, CurveAdded, CurveChanged,
    CurveRemoved, CurveFlagsChanged, CurveRenamed, CurveScaled,
    CurveColorChanged, AttributeAdded, AttributeRemoved, AttributeChanged,
    Populated, Reset, Invalid, EAnimDataModelNotifyType_MAX
  FCharacterMovementUpdatedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FCharacterReachedApexSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FConstraintBrokenSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FEmptyOnlineDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FInputActionHandlerDynamicSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FInputAxisHandlerDynamicSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FInputGestureHandlerDynamicSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FInputTouchHandlerDynamicSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FInputVectorAxisHandlerDynamicSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FInstigatedAnyDamageSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FLandedSignature__DelegateSignature {.inject, importcpp: "$1_",
                                        header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorInstanceHandle* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FLevelStreamingLoadedStatus__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FLevelStreamingVisibilityStatus__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FMovementModeChangedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  EMovementMode* {.size: sizeof(uint8), pure.} = enum
    MOVE_None, MOVE_Walking, MOVE_NavWalking, MOVE_Falling, MOVE_Swimming,
    MOVE_Flying, MOVE_Custom, MOVE_MAX
  FOnActorReady__DelegateSignature {.inject, importcpp: "$1_",
                                     header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnAllMontageInstancesEndedMCDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAnimInitialized__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FMulticastScriptDelegate
  FOnAsyncHandleSaveGame__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAudioFadeChangeSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAudioFinished__DelegateSignature {.inject, importcpp: "$1_",
                                        header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAudioMultiEnvelopeValue__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAudioPlaybackPercent__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAudioPlayStateChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  EAudioComponentPlayState* {.size: sizeof(uint8), pure.} = enum
    Playing, Stopped, Paused, FadingIn, FadingOut, Count,
    EAudioComponentPlayState_MAX
  FOnAudioSingleEnvelopeValue__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAudioVirtualizationChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnBoneTransformsFinalized__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnCanvasRenderTargetUpdate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnDataLayerRuntimeStateChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  EDataLayerRuntimeState* {.size: sizeof(uint8), pure.} = enum
    Unloaded, Loaded, Activated, EDataLayerRuntimeState_MAX
  FOnForceFeedbackFinished__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnGameUserSettingsUINeedsUpdate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnMatineeEvent__DelegateSignature {.inject, importcpp: "$1_",
                                       header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnMontageBlendingOutStartedMCDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnMontageEndedMCDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnMontageStartedMCDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPawnControllerChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPlayerStatePawnSet__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPossessedPawnChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPrimaryAssetBundlesChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPrimaryAssetClassListLoaded__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPrimaryAssetClassLoaded__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPrimaryAssetListLoaded__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnPrimaryAssetLoaded__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnQuartzCommandEvent__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  EQuartzCommandDelegateSubType* {.size: sizeof(uint8), pure.} = enum
    CommandOnFailedToQueue, CommandOnQueued, CommandOnCanceled,
    CommandOnAboutToStart, CommandOnStarted, Count,
    EQuartzCommandDelegateSubType_MAX
  FOnQuartzCommandEventBP__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnQuartzMetronomeEvent__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  EQuartzCommandQuantization* {.size: sizeof(uint8), pure.} = enum
    Bar, Beat, ThirtySecondNote, SixteenthNote, EighthNote, QuarterNote,
    HalfNote, WholeNote, DottedSixteenthNote, DottedEighthNote,
    DottedQuarterNote, DottedHalfNote, DottedWholeNote, SixteenthNoteTriplet,
    EighthNoteTriplet, QuarterNoteTriplet, HalfNoteTriplet, Tick, Count, None,
    EQuartzCommandQuantization_MAX
  FOnQuartzMetronomeEventBP__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnQueueSubtitles__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FScriptDelegate
  FSubtitleCue* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    text*: FText
    time*: float32

  FOnSubmixEnvelope__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FMulticastScriptDelegate
  FOnSubmixEnvelopeBP__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FScriptDelegate
  FOnSubmixRecordedFileDone__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnSubmixSpectralAnalysis__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnSubmixSpectralAnalysisBP__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnSystemFinished__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FMulticastScriptDelegate
  FOnTimelineEvent__DelegateSignature {.inject, importcpp: "$1_",
                                        header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnTimelineFloat__DelegateSignature {.inject, importcpp: "$1_",
                                        header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnTimelineLinearColor__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnTimelineVector__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FScriptDelegate
  FOnUserClickedBanner__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnUserClosedAdvertisement__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FParticleBurstSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FParticleCollisionSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FParticleDeathSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FParticleSpawnSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlasticDeformationEventSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformInterfaceDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  EPlatformInterfaceDataType* {.size: sizeof(uint8), pure.} = enum
    PIDT_None, PIDT_Int, PIDT_Float, PIDT_String, PIDT_Object, PIDT_Custom,
    PIDT_MAX
  FPlayMontageAnimNotifyDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPostEvaluateAnimEvent__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FTimerDynamicDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FViewportDisplayCallback__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FScriptDelegate
  EEndPlayReason* {.size: sizeof(uint8), pure.} = enum
    Destroyed, LevelTransition, EndPlayInEditor, RemovedFromWorld, Quit,
    EEndPlayReason_MAX
  ETickingGroup* {.size: sizeof(uint8), pure.} = enum
    TG_PrePhysics, TG_StartPhysics, TG_DuringPhysics, TG_EndPhysics,
    TG_PostPhysics, TG_PostUpdateWork, TG_LastDemotable, TG_NewlySpawned, TG_MAX
  FActorComponentDeactivateSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorComponentActivatedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  EComponentCreationMethod* {.size: sizeof(uint8), pure.} = enum
    Native, SimpleConstructionScript, UserConstructionScript, Instance,
    EComponentCreationMethod_MAX
  ETemperatureSeverityType* {.size: sizeof(uint8), pure.} = enum
    Unknown, Good, Bad, Serious, Critical, NumSeverities,
    ETemperatureSeverityType_MAX
  EPlaneConstraintAxisSetting* {.size: sizeof(uint8), pure.} = enum
    Custom, X, Y, Z, UseGlobalPhysicsSetting, EPlaneConstraintAxisSetting_MAX
  FInterpControlPoint* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    positionControlPoint*: FVector
    bPositionIsRelative*: bool

  EInterpToBehaviourType* {.size: sizeof(uint8), pure.} = enum
    OneShot, OneShot_Reverse, Loop_Reset, PingPong, EInterpToBehaviourType_MAX
  ETeleportType* {.size: sizeof(uint8), pure.} = enum
    None, TeleportPhysics, ResetPhysics, ETeleportType_MAX
  FDebugFloatHistory* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    maxSamples*: int32
    minValue*: float32
    maxValue*: float32
    bAutoAdjustMinMax*: bool

  EObjectTypeQuery* {.size: sizeof(uint8), pure.} = enum
    ObjectTypeQuery1, ObjectTypeQuery2, ObjectTypeQuery3, ObjectTypeQuery4,
    ObjectTypeQuery5, ObjectTypeQuery6, ObjectTypeQuery7, ObjectTypeQuery8,
    ObjectTypeQuery9, ObjectTypeQuery10, ObjectTypeQuery11, ObjectTypeQuery12,
    ObjectTypeQuery13, ObjectTypeQuery14, ObjectTypeQuery15, ObjectTypeQuery16,
    ObjectTypeQuery17, ObjectTypeQuery18, ObjectTypeQuery19, ObjectTypeQuery20,
    ObjectTypeQuery21, ObjectTypeQuery22, ObjectTypeQuery23, ObjectTypeQuery24,
    ObjectTypeQuery25, ObjectTypeQuery26, ObjectTypeQuery27, ObjectTypeQuery28,
    ObjectTypeQuery29, ObjectTypeQuery30, ObjectTypeQuery31, ObjectTypeQuery32,
    ObjectTypeQuery_MAX, EObjectTypeQuery_MAX
  EDrawDebugTrace* {.size: sizeof(uint8), pure.} = enum
    None, ForOneFrame, ForDuration, Persistent, EDrawDebugTrace_MAX
  ETraceTypeQuery* {.size: sizeof(uint8), pure.} = enum
    TraceTypeQuery1, TraceTypeQuery2, TraceTypeQuery3, TraceTypeQuery4,
    TraceTypeQuery5, TraceTypeQuery6, TraceTypeQuery7, TraceTypeQuery8,
    TraceTypeQuery9, TraceTypeQuery10, TraceTypeQuery11, TraceTypeQuery12,
    TraceTypeQuery13, TraceTypeQuery14, TraceTypeQuery15, TraceTypeQuery16,
    TraceTypeQuery17, TraceTypeQuery18, TraceTypeQuery19, TraceTypeQuery20,
    TraceTypeQuery21, TraceTypeQuery22, TraceTypeQuery23, TraceTypeQuery24,
    TraceTypeQuery25, TraceTypeQuery26, TraceTypeQuery27, TraceTypeQuery28,
    TraceTypeQuery29, TraceTypeQuery30, TraceTypeQuery31, TraceTypeQuery32,
    TraceTypeQuery_MAX, ETraceTypeQuery_MAX
  FLatentActionInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FTimerHandle* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  EMoveComponentAction* {.size: sizeof(uint8), pure.} = enum
    Move, Stop, Return, EMoveComponentAction_MAX
  EQuitPreference* {.size: sizeof(uint8), pure.} = enum
    Quit, Background, EQuitPreference_MAX
  FCollisionProfileName* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName

  FGenericStruct* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FUserActivity* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    actionName*: FString

  ETravelFailure* {.size: sizeof(uint8), pure.} = enum
    NoLevel, LoadMapFailure, InvalidURL, PackageMissing, PackageVersion,
    NoDownload, TravelFailure, CheatCommands, PendingNetGameCreateFailure,
    CloudSaveFailure, ServerTravelFailure, ClientTravelFailure,
    ETravelFailure_MAX
  EApplicationState* {.size: sizeof(uint8), pure.} = enum
    Unknown, Inactive, Background, Active, EApplicationState_MAX
  EScreenOrientation* {.size: sizeof(uint8), pure.} = enum
    Unknown, Portrait, PortraitUpsideDown, LandscapeLeft, LandscapeRight,
    FaceUp, FaceDown, EScreenOrientation_MAX
  FActorBeginCursorOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorBeginOverlapSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorBeginTouchOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorDestroyedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorEndCursorOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorEndOverlapSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorEndPlaySignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorEndTouchOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorHitSignature__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FMulticastScriptDelegate
  FActorOnClickedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorOnInputTouchBeginSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorOnInputTouchEndSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FActorOnReleasedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentBeginCursorOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentBeginOverlapSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentBeginTouchOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentCollisionSettingsChangedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentEndCursorOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentEndOverlapSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentEndTouchOverSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentHitSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentOnClickedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentOnInputTouchBeginSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentOnInputTouchEndSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentOnReleasedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentSleepSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FComponentWakeSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FIsRootComponentChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPawnControllerChangedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPawnRestartedSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPhysicsVolumeChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FTakeAnyDamageSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FTakePointDamageSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FTakeRadialDamageSignature__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  ERelativeTransformSpace* {.size: sizeof(uint8), pure.} = enum
    RTS_World, RTS_Actor, RTS_Component, RTS_ParentBoneSpace, RTS_MAX
  EAttachLocation* {.size: sizeof(uint8), pure.} = enum
    KeepRelativeOffset, KeepWorldPosition, SnapToTarget,
    SnapToTargetIncludingScale, EAttachLocation_MAX
  EAttachmentRule* {.size: sizeof(uint8), pure.} = enum
    KeepRelative, KeepWorld, SnapToTarget, EAttachmentRule_MAX
  EDetachmentRule* {.size: sizeof(uint8), pure.} = enum
    KeepRelative, KeepWorld, EDetachmentRule_MAX
  EComponentMobility* {.size: sizeof(uint8), pure.} = enum
    Static, Stationary, Movable, EComponentMobility_MAX
  EDetailMode* {.size: sizeof(uint8), pure.} = enum
    DM_Low, DM_Medium, DM_High, DM_MAX
  ENavPathEvent* {.size: sizeof(uint8), pure.} = enum
    Cleared, NewPath, UpdatedDueToGoalMoved, UpdatedDueToNavigationChanged,
    Invalidated, RePathFailed, MetaPathUpdate, Custom, ENavPathEvent_MAX
  EMouseLockMode* {.size: sizeof(uint8), pure.} = enum
    DoNotLock, LockOnCapture, LockAlways, LockInFullscreen, EMouseLockMode_MAX
  EWindowTitleBarMode* {.size: sizeof(uint8), pure.} = enum
    Overlay, VerticalBox, EWindowTitleBarMode_MAX
  EActorUpdateOverlapsMethod* {.size: sizeof(uint8), pure.} = enum
    UseConfigDefault, AlwaysUpdate, OnlyUpdateMovable, NeverUpdate,
    EActorUpdateOverlapsMethod_MAX
  EActorGridPlacement* {.size: sizeof(uint8), pure.} = enum
    Bounds, Location, AlwaysLoaded, None, EActorGridPlacement_MAX
  EAlphaBlendOption* {.size: sizeof(uint8), pure.} = enum
    Linear, Cubic, HermiteCubic, Sinusoidal, QuadraticInOut, CubicInOut,
    QuarticInOut, QuinticInOut, CircularIn, CircularOut, CircularInOut, ExpIn,
    ExpOut, ExpInOut, Custom, EAlphaBlendOption_MAX
  EAnimGroupRole* {.size: sizeof(uint8), pure.} = enum
    CanBeLeader, AlwaysFollower, AlwaysLeader, TransitionLeader,
    TransitionFollower, EAnimGroupRole_MAX
  EAnimSyncGroupScope* {.size: sizeof(uint8), pure.} = enum
    Local, Component, EAnimSyncGroupScope_MAX
  EAnimSyncMethod* {.size: sizeof(uint8), pure.} = enum
    DoNotSync, SyncGroup, Graph, EAnimSyncMethod_MAX
  EPreviewAnimationBlueprintApplicationMethod* {.size: sizeof(uint8), pure.} = enum
    LinkedLayers, LinkedAnimGraph,
    EPreviewAnimationBlueprintApplicationMethod_MAX
  AnimationKeyFormat* {.size: sizeof(uint8), pure.} = enum
    AKF_ConstantKeyLerp, AKF_VariableKeyLerp, AKF_PerTrackCompression, AKF_MAX
  EAnimAssetCurveFlags* {.size: sizeof(uint8), pure.} = enum
    AACF_NONE, AACF_DriveMorphTarget_DEPRECATED, AACF_DriveAttribute_DEPRECATED,
    AACF_Editable, AACF_DriveMaterial_DEPRECATED, AACF_Metadata,
    AACF_DriveTrack, AACF_Disabled, AACF_MAX
  ERawCurveTrackTypes* {.size: sizeof(uint8), pure.} = enum
    RCT_Float, RCT_Vector, RCT_Transform, RCT_MAX
  ERootMotionRootLock* {.size: sizeof(uint8), pure.} = enum
    RefPose, AnimFirstFrame, Zero, ERootMotionRootLock_MAX
  ERootMotionMode* {.size: sizeof(uint8), pure.} = enum
    NoRootMotionExtraction, IgnoreRootMotion, RootMotionFromEverything,
    RootMotionFromMontagesOnly, ERootMotionMode_MAX
  EAdditiveBasePoseType* {.size: sizeof(uint8), pure.} = enum
    ABPT_None, ABPT_RefPose, ABPT_AnimScaled, ABPT_AnimFrame,
    ABPT_LocalAnimFrame, ABPT_MAX
  AnimationCompressionFormat* {.size: sizeof(uint8), pure.} = enum
    ACF_None, ACF_Float96NoW, ACF_Fixed48NoW, ACF_IntervalFixed32NoW,
    ACF_Fixed32NoW, ACF_Float32NoW, ACF_Identity, ACF_MAX
  EAnimExecutionContextConversionResult* {.size: sizeof(uint8), pure.} = enum
    Succeeded, Failed, EAnimExecutionContextConversionResult_MAX
  EMontagePlayReturnType* {.size: sizeof(uint8), pure.} = enum
    MontageLength, Duration, EMontagePlayReturnType_MAX
  EDrawDebugItemType* {.size: sizeof(uint8), pure.} = enum
    DirectionalArrow, Sphere, Line, OnScreenMessage, CoordinateSystem, Point,
    EDrawDebugItemType_MAX
  EAnimLinkMethod* {.size: sizeof(uint8), pure.} = enum
    Absolute, Relative, Proportional, EAnimLinkMethod_MAX
  EAnimNotifyEventType* {.size: sizeof(uint8), pure.} = enum
    Begin, End, EAnimNotifyEventType_MAX
  EMontageBlendMode* {.size: sizeof(uint8), pure.} = enum
    Standard, Inertialization, EMontageBlendMode_MAX
  EMontageSubStepResult* {.size: sizeof(uint8), pure.} = enum
    Moved, NotMoved, InvalidSection, InvalidMontage, EMontageSubStepResult_MAX
  EPinHidingMode* {.size: sizeof(uint8), pure.} = enum
    NeverAsPin, PinHiddenByDefault, PinShownByDefault, AlwaysAsPin,
    EPinHidingMode_MAX
  EAnimNodeDataFlags* {.size: sizeof(uint8), pure.} = enum
    None, HasInitialUpdateFunction, HasBecomeRelevantFunction,
    HasUpdateFunction, EAnimNodeDataFlags_MAX
  EAnimNodeReferenceConversionResult* {.size: sizeof(uint8), pure.} = enum
    Succeeded, Failed, EAnimNodeReferenceConversionResult_MAX
  EInertializationState* {.size: sizeof(uint8), pure.} = enum
    Inactive, Pending, Active, EInertializationState_MAX
  EInertializationBoneState* {.size: sizeof(uint8), pure.} = enum
    Invalid, Valid, Excluded, EInertializationBoneState_MAX
  EInertializationSpace* {.size: sizeof(uint8), pure.} = enum
    Default, WorldSpace, WorldRotation, EInertializationSpace_MAX
  EEvaluatorDataSource* {.size: sizeof(uint8), pure.} = enum
    EDS_SourcePose, EDS_DestinationPose, EDS_MAX
  EEvaluatorMode* {.size: sizeof(uint8), pure.} = enum
    EM_Standard, EM_Freeze, EM_DelayedFreeze, EM_MAX
  AnimPhysTwistAxis* {.size: sizeof(uint8), pure.} = enum
    AxisX, AxisY, AxisZ, AnimPhysTwistAxis_MAX
  AnimPhysCollisionType* {.size: sizeof(uint8), pure.} = enum
    CoM, CustomSphere, InnerSphere, OuterSphere, AnimPhysCollisionType_MAX
  ETypeAdvanceAnim* {.size: sizeof(uint8), pure.} = enum
    ETAA_Default, ETAA_Finished, ETAA_Looped, ETAA_MAX
  ETransitionBlendMode* {.size: sizeof(uint8), pure.} = enum
    TBM_Linear, TBM_Cubic, TBM_MAX
  ETransitionLogicType* {.size: sizeof(uint8), pure.} = enum
    TLT_StandardBlend, TLT_Inertialization, TLT_Custom, TLT_MAX
  EAnimPropertyAccessCallSite* {.size: sizeof(uint8), pure.} = enum
    WorkerThread_Unbatched, WorkerThread_Batched_PreEventGraph,
    WorkerThread_Batched_PostEventGraph, GameThread_Batched_PreEventGraph,
    GameThread_Batched_PostEventGraph, EAnimPropertyAccessCallSite_MAX
  EBoneAxis* {.size: sizeof(uint8), pure.} = enum
    BA_X, BA_Y, BA_Z, BA_MAX
  EBoneControlSpace* {.size: sizeof(uint8), pure.} = enum
    BCS_WorldSpace, BCS_ComponentSpace, BCS_ParentBoneSpace, BCS_BoneSpace,
    BCS_MAX
  EBoneRotationSource* {.size: sizeof(uint8), pure.} = enum
    BRS_KeepComponentSpaceRotation, BRS_KeepLocalSpaceRotation,
    BRS_CopyFromTarget, BRS_MAX
  EMontageNotifyTickType* {.size: sizeof(uint8), pure.} = enum
    Queued, BranchingPoint, EMontageNotifyTickType_MAX
  ENotifyFilterType* {.size: sizeof(uint8), pure.} = enum
    NoFiltering, LOD, ENotifyFilterType_MAX
  EAdditiveAnimationType* {.size: sizeof(uint8), pure.} = enum
    AAT_None, AAT_LocalSpaceBase, AAT_RotationOffsetMeshSpace, AAT_MAX
  ECurveBlendOption* {.size: sizeof(uint8), pure.} = enum
    Override, DoNotOverride, NormalizeByWeight, BlendByWeight, UseBasePose,
    UseMaxValue, UseMinValue, ECurveBlendOption_MAX
  EAnimInterpolationType* {.size: sizeof(uint8), pure.} = enum
    Linear, Step, EAnimInterpolationType_MAX
  EAxisOption* {.size: sizeof(uint8), pure.} = enum
    X, Y, Z, X_Neg, Y_Neg, Z_Neg, Custom, EAxisOption_MAX
  EComponentType* {.size: sizeof(uint8), pure.} = enum
    None, TranslationX, TranslationY, TranslationZ, RotationX, RotationY,
    RotationZ, Scale, ScaleX, ScaleY, ScaleZ, EComponentType_MAX
  EPrimaryAssetCookRule* {.size: sizeof(uint8), pure.} = enum
    Unknown, NeverCook, DevelopmentCook, DevelopmentAlwaysCook, AlwaysCook,
    EPrimaryAssetCookRule_MAX
  EAttenuationDistanceModel* {.size: sizeof(uint8), pure.} = enum
    Linear, Logarithmic, Inverse, LogReverse, NaturalSound, Custom,
    EAttenuationDistanceModel_MAX
  EAttenuationShape* {.size: sizeof(uint8), pure.} = enum
    Sphere, Capsule, Box, Cone, EAttenuationShape_MAX
  ENaturalSoundFalloffMode* {.size: sizeof(uint8), pure.} = enum
    Continues, Silent, Hold, ENaturalSoundFalloffMode_MAX
  EAudioBusChannels* {.size: sizeof(uint8), pure.} = enum
    Mono, Stereo, Quad, FivePointOne, SevenPointOne, EAudioBusChannels_MAX
  EAudioFaderCurve* {.size: sizeof(uint8), pure.} = enum
    Linear, Logarithmic, SCurve, Sin, Count, EAudioFaderCurve_MAX
  EAudioOutputTarget* {.size: sizeof(uint8), pure.} = enum
    Speaker, Controller, ControllerFallbackToSpeaker, EAudioOutputTarget_MAX
  EVoiceSampleRate* {.size: sizeof(uint8), pure.} = enum
    Low16000Hz, Normal24000Hz, EVoiceSampleRate_MAX
  EPanningMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, EqualPower, EPanningMethod_MAX
  EMonoChannelUpmixMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, EqualPower, FullVolume, EMonoChannelUpmixMethod_MAX
  EAudioVolumeLocationState* {.size: sizeof(uint8), pure.} = enum
    InsideTheVolume, OutsideTheVolume, EAudioVolumeLocationState_MAX
  EBlendableLocation* {.size: sizeof(uint8), pure.} = enum
    BL_AfterTonemapping, BL_BeforeTonemapping, BL_BeforeTranslucency,
    BL_ReplacingTonemapper, BL_SSRInput, BL_MAX
  EBlendProfileMode* {.size: sizeof(uint8), pure.} = enum
    TimeFactor, WeightFactor, BlendMask, EBlendProfileMode_MAX
  EBlendSpaceAxis* {.size: sizeof(uint8), pure.} = enum
    BSA_None, BSA_X, BSA_Y, BSA_MAX
  EPreferredTriangulationDirection* {.size: sizeof(uint8), pure.} = enum
    None, Tangential, Radial, EPreferredTriangulationDirection_MAX
  ENotifyTriggerMode* {.size: sizeof(uint8), pure.} = enum
    AllAnimations, HighestWeightedAnimation, None, ENotifyTriggerMode_MAX
  EBlueprintStatus* {.size: sizeof(uint8), pure.} = enum
    BS_Unknown, BS_Dirty, BS_Error, BS_UpToDate, BS_BeingCreated,
    BS_UpToDateWithWarnings, BS_MAX
  EBlueprintType* {.size: sizeof(uint8), pure.} = enum
    BPTYPE_Normal, BPTYPE_Const, BPTYPE_MacroLibrary, BPTYPE_Interface,
    BPTYPE_LevelScript, BPTYPE_FunctionLibrary, BPTYPE_MAX
  EBlueprintCompileMode* {.size: sizeof(uint8), pure.} = enum
    Default, Development, FinalRelease, EBlueprintCompileMode_MAX
  EBlueprintNativizationFlag* {.size: sizeof(uint8), pure.} = enum
    Disabled, Dependency, ExplicitlyEnabled, EBlueprintNativizationFlag_MAX
  EDOFMode* {.size: sizeof(uint8), pure.} = enum
    Default, SixDOF, YZPlane, XZPlane, XYPlane, CustomPlane, None, EDOFMode_MAX
  ECsgOper* {.size: sizeof(uint8), pure.} = enum
    CSG_Active, CSG_Add, CSG_Subtract, CSG_Intersect, CSG_Deintersect, CSG_None,
    CSG_MAX
  EBrushType* {.size: sizeof(uint8), pure.} = enum
    Brush_Default, Brush_Add, Brush_Subtract, Brush_MAX
  EInterfaceValidResult* {.size: sizeof(uint8), pure.} = enum
    Valid, Invalid, EInterfaceValidResult_MAX
  ECameraShakeUpdateResultFlags* {.size: sizeof(uint8), pure.} = enum
    ApplyAsAbsolute, SkipAutoScale, SkipAutoPlaySpace, Default,
    ECameraShakeUpdateResultFlags_MAX
  ECameraShakeDurationType* {.size: sizeof(uint8), pure.} = enum
    Fixed, Infinite, Custom, ECameraShakeDurationType_MAX
  ECameraShakeAttenuation* {.size: sizeof(uint8), pure.} = enum
    Linear, Quadratic, ECameraShakeAttenuation_MAX
  ECameraAlphaBlendMode* {.size: sizeof(uint8), pure.} = enum
    CABM_Linear, CABM_Cubic, CABM_MAX
  ECameraProjectionMode* {.size: sizeof(uint8), pure.} = enum
    Perspective, Orthographic, ECameraProjectionMode_MAX
  ECameraShakePlaySpace* {.size: sizeof(uint8), pure.} = enum
    CameraLocal, World, UserDefined, ECameraShakePlaySpace_MAX
  EChildActorComponentTreeViewVisualizationMode* {.size: sizeof(uint8), pure.} = enum
    UseDefault, ComponentOnly, ComponentWithChildActor, ChildActorOnly,
    EChildActorComponentTreeViewVisualizationMode_MAX
  ECloudStorageDelegate* {.size: sizeof(uint8), pure.} = enum
    CSD_KeyValueReadComplete, CSD_KeyValueWriteComplete, CSD_ValueChanged,
    CSD_DocumentQueryComplete, CSD_DocumentReadComplete,
    CSD_DocumentWriteComplete, CSD_DocumentConflictDetected, CSD_MAX
  EAngularDriveMode* {.size: sizeof(uint8), pure.} = enum
    SLERP, TwistAndSwing, EAngularDriveMode_MAX
  ETransformCurveChannel* {.size: sizeof(uint8), pure.} = enum
    Position, Rotation, Scale, Invalid, ETransformCurveChannel_MAX
  EVectorCurveChannel* {.size: sizeof(uint8), pure.} = enum
    X, Y, Z, Invalid, EVectorCurveChannel_MAX
  ECurveTableMode* {.size: sizeof(uint8), pure.} = enum
    Empty, SimpleCurves, RichCurves, ECurveTableMode_MAX
  ECustomAttributeBlendType* {.size: sizeof(uint8), pure.} = enum
    Override, Blend, ECustomAttributeBlendType_MAX
  FDataDrivenCVarType* {.size: sizeof(uint8), pure.} = enum
    CVarFloat, CVarInt, CVarBool, FDataDrivenCVarType_MAX
  EDataLayerState* {.size: sizeof(uint8), pure.} = enum
    Unloaded, Loaded, Activated, EDataLayerState_MAX
  EEvaluateCurveTableResult* {.size: sizeof(uint8), pure.} = enum
    RowFound, RowNotFound, EEvaluateCurveTableResult_MAX
  EGrammaticalGender* {.size: sizeof(uint8), pure.} = enum
    Neuter, Masculine, Feminine, Mixed, EGrammaticalGender_MAX
  EGrammaticalNumber* {.size: sizeof(uint8), pure.} = enum
    Singular, Plural, EGrammaticalNumber_MAX
  DistributionParamMode* {.size: sizeof(uint8), pure.} = enum
    DPM_Normal, DPM_Abs, DPM_Direct, DPM_MAX
  EDistributionVectorLockFlags* {.size: sizeof(uint8), pure.} = enum
    EDVLF_None, EDVLF_XY, EDVLF_XZ, EDVLF_YZ, EDVLF_XYZ, EDVLF_MAX
  EDistributionVectorMirrorFlags* {.size: sizeof(uint8), pure.} = enum
    EDVMF_Same, EDVMF_Different, EDVMF_Mirror, EDVMF_MAX
  EEdGraphPinDirection* {.size: sizeof(uint8), pure.} = enum
    EGPD_Input, EGPD_Output, EGPD_MAX
  EPinContainerType* {.size: sizeof(uint8), pure.} = enum
    None, Array, Set, Map, EPinContainerType_MAX
  ENodeTitleType* {.size: sizeof(uint8), pure.} = enum
    FullTitle, ListView, EditableTitle, MenuTitle, MAX_TitleTypes,
    ENodeTitleType_MAX
  ENodeAdvancedPins* {.size: sizeof(uint8), pure.} = enum
    NoPins, Shown, Hidden, ENodeAdvancedPins_MAX
  ENodeEnabledState* {.size: sizeof(uint8), pure.} = enum
    Enabled, Disabled, DevelopmentOnly, ENodeEnabledState_MAX
  EBlueprintPinStyleType* {.size: sizeof(uint8), pure.} = enum
    BPST_Original, BPST_VariantA, BPST_MAX
  EGraphType* {.size: sizeof(uint8), pure.} = enum
    GT_Function, GT_Ubergraph, GT_Macro, GT_Animation, GT_StateMachine, GT_MAX
  ECanCreateConnectionResponse* {.size: sizeof(uint8), pure.} = enum
    CONNECT_RESPONSE_MAKE, CONNECT_RESPONSE_DISALLOW,
    CONNECT_RESPONSE_BREAK_OTHERS_A, CONNECT_RESPONSE_BREAK_OTHERS_B,
    CONNECT_RESPONSE_BREAK_OTHERS_AB,
    CONNECT_RESPONSE_MAKE_WITH_CONVERSION_NODE,
    CONNECT_RESPONSE_MAKE_WITH_PROMOTION, CONNECT_RESPONSE_MAX
  EFullyLoadPackageType* {.size: sizeof(uint8), pure.} = enum
    FULLYLOAD_Map, FULLYLOAD_Game_PreLoadClass, FULLYLOAD_Game_PostLoadClass,
    FULLYLOAD_Always, FULLYLOAD_Mutator, FULLYLOAD_MAX
  ETransitionType* {.size: sizeof(uint8), pure.} = enum
    None, Paused, Loading, Saving, Connecting, Precaching, WaitingToConnect, MAX
  EInputEvent* {.size: sizeof(uint8), pure.} = enum
    IE_Pressed, IE_Released, IE_Repeat, IE_DoubleClick, IE_Axis, IE_MAX
  EMouseCaptureMode* {.size: sizeof(uint8), pure.} = enum
    NoCapture, CapturePermanently, CapturePermanently_IncludingInitialMouseDown,
    CaptureDuringMouseDown, CaptureDuringRightMouseDown, EMouseCaptureMode_MAX
  ENetworkLagState* {.size: sizeof(uint8), pure.} = enum
    NotLagging, Lagging, ENetworkLagState_MAX
  ETravelType* {.size: sizeof(uint8), pure.} = enum
    TRAVEL_Absolute, TRAVEL_Partial, TRAVEL_Relative, TRAVEL_MAX
  EDemoPlayFailure* {.size: sizeof(uint8), pure.} = enum
    Generic, DemoNotFound, Corrupt, InvalidVersion, InitBase,
    GameSpecificHeader, ReplayStreamerInternal, LoadMap, Serialization,
    EDemoPlayFailure_MAX
  EViewModeIndex* {.size: sizeof(uint8), pure.} = enum
    VMI_BrushWireframe, VMI_Wireframe, VMI_Unlit, VMI_Lit,
    VMI_Lit_DetailLighting, VMI_LightingOnly, VMI_LightComplexity,
    VMI_ShaderComplexity, VMI_LightmapDensity, VMI_LitLightmapDensity,
    VMI_ReflectionOverride, VMI_VisualizeBuffer, VMI_StationaryLightOverlap,
    VMI_CollisionPawn, VMI_CollisionVisibility, VMI_LODColoration,
    VMI_QuadOverdraw, VMI_PrimitiveDistanceAccuracy, VMI_MeshUVDensityAccuracy,
    VMI_ShaderComplexityWithQuadOverdraw, VMI_HLODColoration,
    VMI_GroupLODColoration, VMI_MaterialTextureScaleAccuracy,
    VMI_RequiredTextureResolution, VMI_PathTracing, VMI_RayTracingDebug,
    VMI_VisualizeNanite, VMI_VirtualTexturePendingMips, VMI_VisualizeLumen,
    VMI_VisualizeVirtualShadowMap, VMI_Max, VMI_Unknown
  ECustomTimeStepSynchronizationState* {.size: sizeof(uint8), pure.} = enum
    Closed, Error, Synchronized, Synchronizing,
    ECustomTimeStepSynchronizationState_MAX
  EAspectRatioAxisConstraint* {.size: sizeof(uint8), pure.} = enum
    AspectRatio_MaintainYFOV, AspectRatio_MaintainXFOV,
    AspectRatio_MajorAxisFOV, AspectRatio_MAX
  ESceneDepthPriorityGroup* {.size: sizeof(uint8), pure.} = enum
    SDPG_World, SDPG_Foreground, SDPG_MAX
  EIndirectLightingCacheQuality* {.size: sizeof(uint8), pure.} = enum
    ILCQ_Off, ILCQ_Point, ILCQ_Volume, ILCQ_MAX
  ELightmapType* {.size: sizeof(uint8), pure.} = enum
    Default, ForceSurface, ForceVolumetric, ELightmapType_MAX
  EOcclusionCombineMode* {.size: sizeof(uint8), pure.} = enum
    OCM_Minimum, OCM_Multiply, OCM_MAX
  EBlendMode* {.size: sizeof(uint8), pure.} = enum
    BLEND_Opaque, BLEND_Masked, BLEND_Translucent, BLEND_Additive,
    BLEND_Modulate, BLEND_AlphaComposite, BLEND_AlphaHoldout, BLEND_MAX
  EMaterialFloatPrecisionMode* {.size: sizeof(uint8), pure.} = enum
    MFPM_Default, MFPM_Full_MaterialExpressionOnly, MFPM_Full, MFPM_Half,
    MFPM_MAX
  ESamplerSourceMode* {.size: sizeof(uint8), pure.} = enum
    SSM_FromTextureAsset, SSM_Wrap_WorldGroupSettings,
    SSM_Clamp_WorldGroupSettings, SSM_MAX
  ETextureMipValueMode* {.size: sizeof(uint8), pure.} = enum
    TMVM_None, TMVM_MipLevel, TMVM_MipBias, TMVM_Derivative, TMVM_MAX
  ETranslucencyLightingMode* {.size: sizeof(uint8), pure.} = enum
    TLM_VolumetricNonDirectional, TLM_VolumetricDirectional,
    TLM_VolumetricPerVertexNonDirectional, TLM_VolumetricPerVertexDirectional,
    TLM_Surface, TLM_SurfacePerPixelLighting, TLM_MAX
  ERefractionMode* {.size: sizeof(uint8), pure.} = enum
    RM_IndexOfRefraction, RM_PixelNormalOffset, RM_MAX
  ETranslucentSortPolicy* {.size: sizeof(uint8), pure.} = enum
    SortByDistance, SortByProjectedZ, SortAlongAxis, ETranslucentSortPolicy_MAX
  EDynamicGlobalIlluminationMethod* {.size: sizeof(uint8), pure.} = enum
    None, Lumen, ScreenSpace, RayTraced, Plugin,
    EDynamicGlobalIlluminationMethod_MAX
  EReflectionMethod* {.size: sizeof(uint8), pure.} = enum
    None, Lumen, ScreenSpace, RayTraced, EReflectionMethod_MAX
  EShadowMapMethod* {.size: sizeof(uint8), pure.} = enum
    ShadowMaps, VirtualShadowMaps, EShadowMapMethod_MAX
  ECastRayTracedShadow* {.size: sizeof(uint8), pure.} = enum
    Disabled, UseProjectSetting, Enabled, ECastRayTracedShadow_MAX
  ESceneCaptureSource* {.size: sizeof(uint8), pure.} = enum
    SCS_SceneColorHDR, SCS_SceneColorHDRNoAlpha, SCS_FinalColorLDR,
    SCS_SceneColorSceneDepth, SCS_SceneDepth, SCS_DeviceDepth, SCS_Normal,
    SCS_BaseColor, SCS_FinalColorHDR, SCS_FinalToneCurveHDR, SCS_MAX
  ESceneCaptureCompositeMode* {.size: sizeof(uint8), pure.} = enum
    SCCM_Overwrite, SCCM_Additive, SCCM_Composite, SCCM_MAX
  EGBufferFormat* {.size: sizeof(uint8), pure.} = enum
    Force8BitsPerChannel, Default, HighPrecisionNormals, Force16BitsPerChannel,
    EGBufferFormat_MAX
  ETrailWidthMode* {.size: sizeof(uint8), pure.} = enum
    ETrailWidthMode_FromCentre, ETrailWidthMode_FromFirst,
    ETrailWidthMode_FromSecond, ETrailWidthMode_MAX
  EParticleCollisionMode* {.size: sizeof(uint8), pure.} = enum
    SceneDepth, DistanceField, EParticleCollisionMode_MAX
  EMaterialShadingModel* {.size: sizeof(uint8), pure.} = enum
    MSM_Unlit, MSM_DefaultLit, MSM_Subsurface, MSM_PreintegratedSkin,
    MSM_ClearCoat, MSM_SubsurfaceProfile, MSM_TwoSidedFoliage, MSM_Hair,
    MSM_Cloth, MSM_Eye, MSM_SingleLayerWater, MSM_ThinTranslucent, MSM_Strata,
    MSM_NUM, MSM_FromMaterialExpression, MSM_MAX
  EStrataShadingModel* {.size: sizeof(uint8), pure.} = enum
    SSM_Unlit, SSM_DefaultLit, SSM_SubsurfaceLit, SSM_VolumetricFogCloud,
    SSM_Hair, SSM_SingleLayerWater, SSM_NUM
  EMaterialSamplerType* {.size: sizeof(uint8), pure.} = enum
    SAMPLERTYPE_Color, SAMPLERTYPE_Grayscale, SAMPLERTYPE_Alpha,
    SAMPLERTYPE_Normal, SAMPLERTYPE_Masks, SAMPLERTYPE_DistanceFieldFont,
    SAMPLERTYPE_LinearColor, SAMPLERTYPE_LinearGrayscale, SAMPLERTYPE_Data,
    SAMPLERTYPE_External, SAMPLERTYPE_VirtualColor,
    SAMPLERTYPE_VirtualGrayscale, SAMPLERTYPE_VirtualAlpha,
    SAMPLERTYPE_VirtualNormal, SAMPLERTYPE_VirtualMasks,
    SAMPLERTYPE_VirtualLinearColor, SAMPLERTYPE_VirtualLinearGrayscale,
    SAMPLERTYPE_MAX
  EMaterialStencilCompare* {.size: sizeof(uint8), pure.} = enum
    MSC_Less, MSC_LessEqual, MSC_Greater, MSC_GreaterEqual, MSC_Equal,
    MSC_NotEqual, MSC_Never, MSC_Always, MSC_Count, MSC_MAX
  EMaterialShadingRate* {.size: sizeof(uint8), pure.} = enum
    MSR_1x1, MSR_2x1, MSR_1x2, MSR_2x2, MSR_4x2, MSR_2x4, MSR_4x4, MSR_Count,
    MSR_MAX
  ELightingBuildQuality* {.size: sizeof(uint8), pure.} = enum
    Quality_Preview, Quality_Medium, Quality_High, Quality_Production,
    Quality_MAX
  ENetworkSmoothingMode* {.size: sizeof(uint8), pure.} = enum
    Disabled, Linear, Exponential, Replay, ENetworkSmoothingMode_MAX
  ECollisionChannel* {.size: sizeof(uint8), pure.} = enum
    ECC_WorldStatic, ECC_WorldDynamic, ECC_Pawn, ECC_Visibility, ECC_Camera,
    ECC_PhysicsBody, ECC_Vehicle, ECC_Destructible, ECC_EngineTraceChannel1,
    ECC_EngineTraceChannel2, ECC_EngineTraceChannel3, ECC_EngineTraceChannel4,
    ECC_EngineTraceChannel5, ECC_EngineTraceChannel6, ECC_GameTraceChannel1,
    ECC_GameTraceChannel2, ECC_GameTraceChannel3, ECC_GameTraceChannel4,
    ECC_GameTraceChannel5, ECC_GameTraceChannel6, ECC_GameTraceChannel7,
    ECC_GameTraceChannel8, ECC_GameTraceChannel9, ECC_GameTraceChannel10,
    ECC_GameTraceChannel11, ECC_GameTraceChannel12, ECC_GameTraceChannel13,
    ECC_GameTraceChannel14, ECC_GameTraceChannel15, ECC_GameTraceChannel16,
    ECC_GameTraceChannel17, ECC_GameTraceChannel18, ECC_OverlapAll_Deprecated,
    ECC_MAX
  EOverlapFilterOption* {.size: sizeof(uint8), pure.} = enum
    OverlapFilter_All, OverlapFilter_DynamicOnly, OverlapFilter_StaticOnly,
    OverlapFilter_MAX
  ECollisionResponse* {.size: sizeof(uint8), pure.} = enum
    ECR_Ignore, ECR_Overlap, ECR_Block, ECR_MAX
  EFilterInterpolationType* {.size: sizeof(uint8), pure.} = enum
    BSIT_Average, BSIT_Linear, BSIT_Cubic, BSIT_EaseInOut,
    BSIT_ExponentialDecay, BSIT_SpringDamper, BSIT_MAX
  ETimelineSigType* {.size: sizeof(uint8), pure.} = enum
    ETS_EventSignature, ETS_FloatSignature, ETS_VectorSignature,
    ETS_LinearColorSignature, ETS_InvalidSignature, ETS_MAX
  ECollisionEnabled* {.size: sizeof(uint8), pure.} = enum
    NoCollision, QueryOnly, PhysicsOnly, QueryAndPhysics, ECollisionEnabled_MAX
  ELightMapPaddingType* {.size: sizeof(uint8), pure.} = enum
    LMPT_NormalPadding, LMPT_PrePadding, LMPT_NoPadding, LMPT_MAX
  EShadowMapFlags* {.size: sizeof(uint8), pure.} = enum
    SMF_None, SMF_Streamed, SMF_MAX
  EUpdateRateShiftBucket* {.size: sizeof(uint8), pure.} = enum
    ShiftBucket0, ShiftBucket1, ShiftBucket2, ShiftBucket3, ShiftBucket4,
    ShiftBucket5, ShiftBucketMax, EUpdateRateShiftBucket_MAX
  ENetRole* {.size: sizeof(uint8), pure.} = enum
    ROLE_None, ROLE_SimulatedProxy, ROLE_AutonomousProxy, ROLE_Authority,
    ROLE_MAX
  ENetDormancy* {.size: sizeof(uint8), pure.} = enum
    DORM_Never, DORM_Awake, DORM_DormantAll, DORM_DormantPartial, DORM_Initial,
    DORM_MAX
  EAutoReceiveInput* {.size: sizeof(uint8), pure.} = enum
    Disabled, Player0, Player1, Player2, Player3, Player4, Player5, Player6,
    Player7, EAutoReceiveInput_MAX
  EAutoPossessAI* {.size: sizeof(uint8), pure.} = enum
    Disabled, PlacedInWorld, Spawned, PlacedInWorldOrSpawned, EAutoPossessAI_MAX
  EVectorQuantization* {.size: sizeof(uint8), pure.} = enum
    RoundWholeNumber, RoundOneDecimal, RoundTwoDecimals, EVectorQuantization_MAX
  ERotatorQuantization* {.size: sizeof(uint8), pure.} = enum
    ByteComponents, ShortComponents, ERotatorQuantization_MAX
  EWalkableSlopeBehavior* {.size: sizeof(uint8), pure.} = enum
    WalkableSlope_Default, WalkableSlope_Increase, WalkableSlope_Decrease,
    WalkableSlope_Unwalkable, WalkableSlope_Max
  EPhysicalMaterialMaskColor* {.size: sizeof(uint8), pure.} = enum
    Red, Green, Blue, Cyan, Magenta, Yellow, White, Black, MAX
  EComponentSocketType* {.size: sizeof(uint8), pure.} = enum
    Invalid, Bone, Socket, EComponentSocketType_MAX
  ESpawnActorCollisionHandlingMethod* {.size: sizeof(uint8), pure.} = enum
    Undefined, AlwaysSpawn, AdjustIfPossibleButAlwaysSpawn,
    AdjustIfPossibleButDontSpawnIfColliding, DontSpawnIfColliding,
    ESpawnActorCollisionHandlingMethod_MAX
  EMeshBufferAccess* {.size: sizeof(uint8), pure.} = enum
    Default, ForceCPUAndGPU, EMeshBufferAccess_MAX
  EPostCopyOperation* {.size: sizeof(uint8), pure.} = enum
    None, LogicalNegateBool, EPostCopyOperation_MAX
  EFontCacheType* {.size: sizeof(uint8), pure.} = enum
    Offline, Runtime, EFontCacheType_MAX
  EFontImportCharacterSet* {.size: sizeof(uint8), pure.} = enum
    FontICS_Default, FontICS_Ansi, FontICS_Symbol, FontICS_MAX
  EStandbyType* {.size: sizeof(uint8), pure.} = enum
    STDBY_Rx, STDBY_Tx, STDBY_BadPing, STDBY_MAX
  ESuggestProjVelocityTraceOption* {.size: sizeof(uint8), pure.} = enum
    DoNotTrace, TraceFullPath, OnlyTraceWhileAscending,
    ESuggestProjVelocityTraceOption_MAX
  EWindowMode* {.size: sizeof(uint8), pure.} = enum
    Fullscreen, WindowedFullscreen, Windowed, EWindowMode_MAX
  EHISMViewRelevanceType* {.size: sizeof(uint8), pure.} = enum
    Grass, Foliage, HISM, EHISMViewRelevanceType_MAX
  EHitProxyPriority* {.size: sizeof(uint8), pure.} = enum
    HPP_World, HPP_Wireframe, HPP_Foreground, HPP_UI, HPP_MAX
  EHLODBatchingPolicy* {.size: sizeof(uint8), pure.} = enum
    None, MeshSection, Instancing, EHLODBatchingPolicy_MAX
  EHLODLayerType* {.size: sizeof(uint8), pure.} = enum
    Instancing, MeshMerge, MeshSimplify, MeshApproximate, Custom,
    EHLODLayerType_MAX
  EImportanceWeight* {.size: sizeof(uint8), pure.} = enum
    Luminance, Red, Green, Blue, Alpha, EImportanceWeight_MAX
  EAdManagerDelegate* {.size: sizeof(uint8), pure.} = enum
    AMD_ClickedBanner, AMD_UserClosedAd, AMD_MAX
  EControllerAnalogStick* {.size: sizeof(uint8), pure.} = enum
    CAS_LeftStick, CAS_RightStick, CAS_MAX
  EAnimAlphaInputType* {.size: sizeof(uint8), pure.} = enum
    Float, Bool, Curve, EAnimAlphaInputType_MAX
  ETrackActiveCondition* {.size: sizeof(uint8), pure.} = enum
    ETAC_Always, ETAC_GoreEnabled, ETAC_GoreDisabled, ETAC_MAX
  EInterpTrackMoveRotMode* {.size: sizeof(uint8), pure.} = enum
    IMR_Keyframed, IMR_LookAtGroup, IMR_Ignore, IMR_MAX
  EInterpMoveAxis* {.size: sizeof(uint8), pure.} = enum
    AXIS_TranslationX, AXIS_TranslationY, AXIS_TranslationZ, AXIS_RotationX,
    AXIS_RotationY, AXIS_RotationZ, AXIS_MAX
  ETrackToggleAction* {.size: sizeof(uint8), pure.} = enum
    ETTA_Off, ETTA_On, ETTA_Toggle, ETTA_Trigger, ETTA_MAX
  EVisibilityTrackAction* {.size: sizeof(uint8), pure.} = enum
    EVTA_Hide, EVTA_Show, EVTA_Toggle, EVTA_MAX
  EVisibilityTrackCondition* {.size: sizeof(uint8), pure.} = enum
    EVTC_Always, EVTC_GoreEnabled, EVTC_GoreDisabled, EVTC_MAX
  ESlateGesture* {.size: sizeof(uint8), pure.} = enum
    None, Scroll, Magnify, Swipe, Rotate, LongPress, ESlateGesture_MAX
  EMIDCreationFlags* {.size: sizeof(uint8), pure.} = enum
    None, Transient, EMIDCreationFlags_MAX
  EEasingFunc* {.size: sizeof(uint8), pure.} = enum
    Linear, Step, SinusoidalIn, SinusoidalOut, SinusoidalInOut, EaseIn, EaseOut,
    EaseInOut, ExpoIn, ExpoOut, ExpoInOut, CircularIn, CircularOut,
    CircularInOut, EEasingFunc_MAX
  ELerpInterpolationMode* {.size: sizeof(uint8), pure.} = enum
    QuatInterp, EulerInterp, DualQuatInterp, ELerpInterpolationMode_MAX
  EMatrixColumns* {.size: sizeof(uint8), pure.} = enum
    First, Second, Third, Fourth, EMatrixColumns_MAX
  ERoundingMode* {.size: sizeof(uint8), pure.} = enum
    HalfToEven, HalfFromZero, HalfToZero, FromZero, ToZero, ToNegativeInfinity,
    ToPositiveInfinity, ERoundingMode_MAX
  EScreenPercentageMode* {.size: sizeof(uint8), pure.} = enum
    Manual, BasedOnDisplayResolution, BasedOnDPIScale, EScreenPercentageMode_MAX
  EActorPackagingScheme* {.size: sizeof(uint8), pure.} = enum
    Original, Reduced, EActorPackagingScheme_MAX
  ELevelInstanceRuntimeBehavior* {.size: sizeof(uint8), pure.} = enum
    None, Embedded_Deprecated, Partitioned, LevelStreaming,
    ELevelInstanceRuntimeBehavior_MAX
  ELevelInstanceCreationType* {.size: sizeof(uint8), pure.} = enum
    LevelInstance, PackedLevelActor, ELevelInstanceCreationType_MAX
  ELevelInstancePivotType* {.size: sizeof(uint8), pure.} = enum
    CenterMinZ, Center, Actor, WorldOrigin, ELevelInstancePivotType_MAX
  EStreamingVolumeUsage* {.size: sizeof(uint8), pure.} = enum
    SVB_Loading, SVB_LoadingAndVisibility, SVB_VisibilityBlockingOnLoad,
    SVB_BlockingOnLoad, SVB_LoadingNotVisible, SVB_MAX
  ESyncOption* {.size: sizeof(uint8), pure.} = enum
    Drive, Passive, Disabled, ESyncOption_MAX
  EDecalBlendMode* {.size: sizeof(uint8), pure.} = enum
    DBM_Translucent, DBM_Stain, DBM_Normal, DBM_Emissive,
    DBM_DBuffer_ColorNormalRoughness, DBM_DBuffer_Color,
    DBM_DBuffer_ColorNormal, DBM_DBuffer_ColorRoughness, DBM_DBuffer_Normal,
    DBM_DBuffer_NormalRoughness, DBM_DBuffer_Roughness, DBM_DBuffer_Emissive,
    DBM_DBuffer_AlphaComposite, DBM_DBuffer_EmissiveAlphaComposite,
    DBM_Volumetric_DistanceFunction, DBM_AlphaComposite, DBM_AmbientOcclusion,
    DBM_MAX
  EMaterialDecalResponse* {.size: sizeof(uint8), pure.} = enum
    MDR_None, MDR_ColorNormalRoughness, MDR_Color, MDR_ColorNormal,
    MDR_ColorRoughness, MDR_Normal, MDR_NormalRoughness, MDR_Roughness, MDR_MAX
  EMaterialTranslucencyPass* {.size: sizeof(uint8), pure.} = enum
    MTP_BeforeDOF, MTP_AfterDOF, MTP_AfterMotionBlur, MTP_MAX
  ETextureColorChannel* {.size: sizeof(uint8), pure.} = enum
    TCC_Red, TCC_Green, TCC_Blue, TCC_Alpha, TCC_MAX
  EMaterialAttributeBlend* {.size: sizeof(uint8), pure.} = enum
    Blend, UseA, UseB, EMaterialAttributeBlend_MAX
  EChannelMaskParameterColor* {.size: sizeof(uint8), pure.} = enum
    Red, Green, Blue, Alpha, EChannelMaskParameterColor_MAX
  EClampMode* {.size: sizeof(uint8), pure.} = enum
    CMODE_Clamp, CMODE_ClampMin, CMODE_ClampMax, CMODE_MAX
  ECustomMaterialOutputType* {.size: sizeof(uint8), pure.} = enum
    CMOT_Float1, CMOT_Float2, CMOT_Float3, CMOT_Float4, CMOT_MaterialAttributes,
    CMOT_MAX
  EDBufferTextureId* {.size: sizeof(uint8), pure.} = enum
    DBT_A, DBT_B, DBT_C, DBT_MAX
  EDepthOfFieldFunctionValue* {.size: sizeof(uint8), pure.} = enum
    TDOF_NearAndFarMask, TDOF_NearMask, TDOF_FarMask,
    TDOF_CircleOfConfusionRadius, TDOF_MAX
  EFunctionInputType* {.size: sizeof(uint8), pure.} = enum
    FunctionInput_Scalar, FunctionInput_Vector2, FunctionInput_Vector3,
    FunctionInput_Vector4, FunctionInput_Texture2D, FunctionInput_TextureCube,
    FunctionInput_Texture2DArray, FunctionInput_VolumeTexture,
    FunctionInput_StaticBool, FunctionInput_MaterialAttributes,
    FunctionInput_TextureExternal, FunctionInput_MAX
  ENoiseFunction* {.size: sizeof(uint8), pure.} = enum
    NOISEFUNCTION_SimplexTex, NOISEFUNCTION_GradientTex,
    NOISEFUNCTION_GradientTex3D, NOISEFUNCTION_GradientALU,
    NOISEFUNCTION_ValueALU, NOISEFUNCTION_VoronoiALU, NOISEFUNCTION_MAX
  ERuntimeVirtualTextureMipValueMode* {.size: sizeof(uint8), pure.} = enum
    RVTMVM_None, RVTMVM_MipLevel, RVTMVM_MipBias, RVTMVM_RecalculateDerivatives,
    RVTMVM_MAX
  ERuntimeVirtualTextureTextureAddressMode* {.size: sizeof(uint8), pure.} = enum
    RVTTA_Clamp, RVTTA_Wrap, RVTTA_MAX
  EMaterialSceneAttributeInputMode* {.size: sizeof(uint8), pure.} = enum
    Coordinates, OffsetFraction, EMaterialSceneAttributeInputMode_MAX
  ESpeedTreeGeometryType* {.size: sizeof(uint8), pure.} = enum
    STG_Branch, STG_Frond, STG_Leaf, STG_FacingLeaf, STG_Billboard, STG_MAX
  ESpeedTreeWindType* {.size: sizeof(uint8), pure.} = enum
    STW_None, STW_Fastest, STW_Fast, STW_Better, STW_Best, STW_Palm,
    STW_BestPlus, STW_MAX
  ESpeedTreeLODType* {.size: sizeof(uint8), pure.} = enum
    STLOD_Pop, STLOD_Smooth, STLOD_MAX
  EMaterialExposedTextureProperty* {.size: sizeof(uint8), pure.} = enum
    TMTM_TextureSize, TMTM_TexelSize, TMTM_MAX
  EMaterialVectorCoordTransformSource* {.size: sizeof(uint8), pure.} = enum
    TRANSFORMSOURCE_Tangent, TRANSFORMSOURCE_Local, TRANSFORMSOURCE_World,
    TRANSFORMSOURCE_View, TRANSFORMSOURCE_Camera, TRANSFORMSOURCE_ParticleWorld,
    TRANSFORMSOURCE_Instance, TRANSFORMSOURCE_MAX
  EMaterialVectorCoordTransform* {.size: sizeof(uint8), pure.} = enum
    TRANSFORM_Tangent, TRANSFORM_Local, TRANSFORM_World, TRANSFORM_View,
    TRANSFORM_Camera, TRANSFORM_ParticleWorld, TRANSFORM_Instance, TRANSFORM_MAX
  EMaterialPositionTransformSource* {.size: sizeof(uint8), pure.} = enum
    TRANSFORMPOSSOURCE_Local, TRANSFORMPOSSOURCE_World,
    TRANSFORMPOSSOURCE_TranslatedWorld, TRANSFORMPOSSOURCE_View,
    TRANSFORMPOSSOURCE_Camera, TRANSFORMPOSSOURCE_Particle,
    TRANSFORMPOSSOURCE_Instance, TRANSFORMPOSSOURCE_MAX
  EVectorNoiseFunction* {.size: sizeof(uint8), pure.} = enum
    VNF_CellnoiseALU, VNF_VectorALU, VNF_GradientALU, VNF_CurlALU,
    VNF_VoronoiALU, VNF_MAX
  EMaterialExposedViewProperty* {.size: sizeof(uint8), pure.} = enum
    MEVP_BufferSize, MEVP_FieldOfView, MEVP_TanHalfFieldOfView, MEVP_ViewSize,
    MEVP_WorldSpaceViewPosition, MEVP_WorldSpaceCameraPosition,
    MEVP_ViewportOffset, MEVP_TemporalSampleCount, MEVP_TemporalSampleIndex,
    MEVP_TemporalSampleOffset, MEVP_RuntimeVirtualTextureOutputLevel,
    MEVP_RuntimeVirtualTextureOutputDerivative, MEVP_PreExposure,
    MEVP_RuntimeVirtualTextureMaxLevel, MEVP_MAX
  EWorldPositionIncludedOffsets* {.size: sizeof(uint8), pure.} = enum
    WPT_Default, WPT_ExcludeAllShaderOffsets, WPT_CameraRelative,
    WPT_CameraRelativeNoOffsets, WPT_MAX
  EMaterialFunctionUsage* {.size: sizeof(uint8), pure.} = enum
    Default, MaterialLayer, MaterialLayerBlend, EMaterialFunctionUsage_MAX
  EMaterialUsage* {.size: sizeof(uint8), pure.} = enum
    MATUSAGE_SkeletalMesh, MATUSAGE_ParticleSprites, MATUSAGE_BeamTrails,
    MATUSAGE_MeshParticles, MATUSAGE_StaticLighting, MATUSAGE_MorphTargets,
    MATUSAGE_SplineMesh, MATUSAGE_InstancedStaticMeshes,
    MATUSAGE_GeometryCollections, MATUSAGE_Clothing, MATUSAGE_NiagaraSprites,
    MATUSAGE_NiagaraRibbons, MATUSAGE_NiagaraMeshParticles,
    MATUSAGE_GeometryCache, MATUSAGE_Water, MATUSAGE_HairStrands,
    MATUSAGE_LidarPointCloud, MATUSAGE_VirtualHeightfieldMesh, MATUSAGE_Nanite,
    MATUSAGE_MAX
  EMaterialParameterAssociation* {.size: sizeof(uint8), pure.} = enum
    LayerParameter, BlendParameter, GlobalParameter,
    EMaterialParameterAssociation_MAX
  EMaterialLayerLinkState* {.size: sizeof(uint8), pure.} = enum
    Uninitialized, LinkedToParent, UnlinkedFromParent, NotFromParent,
    EMaterialLayerLinkState_MAX
  ETextureSizingType* {.size: sizeof(uint8), pure.} = enum
    TextureSizingType_UseSingleTextureSize,
    TextureSizingType_UseAutomaticBiasedSizes,
    TextureSizingType_UseManualOverrideTextureSize,
    TextureSizingType_UseSimplygonAutomaticSizing,
    TextureSizingType_AutomaticFromTexelDensity,
    TextureSizingType_AutomaticFromMeshScreenSize,
    TextureSizingType_AutomaticFromMeshDrawDistance, TextureSizingType_MAX
  EMaterialMergeType* {.size: sizeof(uint8), pure.} = enum
    MaterialMergeType_Default, MaterialMergeType_Simplygon,
    MaterialMergeType_MAX
  ESceneTextureId* {.size: sizeof(uint8), pure.} = enum
    PPI_SceneColor, PPI_SceneDepth, PPI_DiffuseColor, PPI_SpecularColor,
    PPI_SubsurfaceColor, PPI_BaseColor, PPI_Specular, PPI_Metallic,
    PPI_WorldNormal, PPI_SeparateTranslucency, PPI_Opacity, PPI_Roughness,
    PPI_MaterialAO, PPI_CustomDepth, PPI_PostProcessInput0,
    PPI_PostProcessInput1, PPI_PostProcessInput2, PPI_PostProcessInput3,
    PPI_PostProcessInput4, PPI_PostProcessInput5, PPI_PostProcessInput6,
    PPI_DecalMask, PPI_ShadingModelColor, PPI_ShadingModelID,
    PPI_AmbientOcclusion, PPI_CustomStencil, PPI_StoredBaseColor,
    PPI_StoredSpecular, PPI_Velocity, PPI_WorldTangent, PPI_Anisotropy, PPI_MAX
  EMaterialDomain* {.size: sizeof(uint8), pure.} = enum
    MD_Surface, MD_DeferredDecal, MD_LightFunction, MD_Volume, MD_PostProcess,
    MD_UI, MD_RuntimeVirtualTexture, MD_MAX
  EMeshFeatureImportance* {.size: sizeof(uint8), pure.} = enum
    Off, Lowest, Low, Normal, High, Highest, EMeshFeatureImportance_MAX
  EStaticMeshReductionTerimationCriterion* {.size: sizeof(uint8), pure.} = enum
    Triangles, Vertices, Any, EStaticMeshReductionTerimationCriterion_MAX
  ELandscapeCullingPrecision* {.size: sizeof(uint8), pure.} = enum
    High, Medium, Low, ELandscapeCullingPrecision_MAX
  EProxyNormalComputationMethod* {.size: sizeof(uint8), pure.} = enum
    AngleWeighted, AreaWeighted, EqualWeighted,
    EProxyNormalComputationMethod_MAX
  EMeshLODSelectionType* {.size: sizeof(uint8), pure.} = enum
    AllLODs, SpecificLOD, CalculateLOD, LowestDetailLOD,
    EMeshLODSelectionType_MAX
  EMeshMergeType* {.size: sizeof(uint8), pure.} = enum
    MeshMergeType_Default, MeshMergeType_MergeActor, MeshMergeType_MAX
  EUVOutput* {.size: sizeof(uint8), pure.} = enum
    DoNotOutputChannel, OutputChannel, EUVOutput_MAX
  EMeshApproximationType* {.size: sizeof(uint8), pure.} = enum
    MeshAndMaterials, MeshShapeOnly, EMeshApproximationType_MAX
  EMeshApproximationBaseCappingType* {.size: sizeof(uint8), pure.} = enum
    NoBaseCapping, ConvexPolygon, ConvexSolid,
    EMeshApproximationBaseCappingType_MAX
  EOccludedGeometryFilteringPolicy* {.size: sizeof(uint8), pure.} = enum
    NoOcclusionFiltering, VisibilityBasedFiltering,
    EOccludedGeometryFilteringPolicy_MAX
  EMeshApproximationSimplificationPolicy* {.size: sizeof(uint8), pure.} = enum
    FixedTriangleCount, TrianglesPerArea, GeometricTolerance,
    EMeshApproximationSimplificationPolicy_MAX
  EMeshApproximationGroundPlaneClippingPolicy* {.size: sizeof(uint8), pure.} = enum
    NoGroundClipping, DiscardWithZPlane, CutWithZPlane, CutAndFillWithZPlane,
    EMeshApproximationGroundPlaneClippingPolicy_MAX
  EMeshApproximationUVGenerationPolicy* {.size: sizeof(uint8), pure.} = enum
    PreferUVAtlas, PreferXAtlas, PreferPatchBuilder,
    EMeshApproximationUVGenerationPolicy_MAX
  EVertexPaintAxis* {.size: sizeof(uint8), pure.} = enum
    X, Y, Z, EVertexPaintAxis_MAX
  EMicroTransactionDelegate* {.size: sizeof(uint8), pure.} = enum
    MTD_PurchaseQueryComplete, MTD_PurchaseComplete, MTD_MAX
  EMicroTransactionResult* {.size: sizeof(uint8), pure.} = enum
    MTR_Succeeded, MTR_Failed, MTR_Canceled, MTR_RestoredFromServer, MTR_MAX
  EMirrorRowType* {.size: sizeof(uint8), pure.} = enum
    Bone, AnimationNotify, Curve, SyncMarker, Custom, EMirrorRowType_MAX
  EMirrorFindReplaceMethod* {.size: sizeof(uint8), pure.} = enum
    Prefix, Suffix, RegularExpression, EMirrorFindReplaceMethod_MAX
  ETrajectorySampleDomain* {.size: sizeof(uint8), pure.} = enum
    None, Time, Distance, ETrajectorySampleDomain_MAX
  FNavigationSystemRunMode* {.size: sizeof(uint8), pure.} = enum
    InvalidMode, GameMode, EditorMode, SimulationMode, PIEMode,
    InferFromWorldMode, FNavigationSystemRunMode_MAX
  ENavigationOptionFlag* {.size: sizeof(uint8), pure.} = enum
    Default, Enable, Disable, MAX
  ENavDataGatheringMode* {.size: sizeof(uint8), pure.} = enum
    Default, Instant, Lazy, ENavDataGatheringMode_MAX
  ENavDataGatheringModeConfig* {.size: sizeof(uint8), pure.} = enum
    Invalid, Instant, Lazy, ENavDataGatheringModeConfig_MAX
  ENavigationQueryResult* {.size: sizeof(uint8), pure.} = enum
    Invalid, Error, Fail, Success, ENavigationQueryResult_MAX
  ENavLinkDirection* {.size: sizeof(uint8), pure.} = enum
    BothWays, LeftToRight, RightToLeft, ENavLinkDirection_MAX
  EParticleBurstMethod* {.size: sizeof(uint8), pure.} = enum
    EPBM_Instant, EPBM_Interpolated, EPBM_MAX
  EParticleSubUVInterpMethod* {.size: sizeof(uint8), pure.} = enum
    PSUVIM_None, PSUVIM_Linear, PSUVIM_Linear_Blend, PSUVIM_Random,
    PSUVIM_Random_Blend, PSUVIM_MAX
  EEmitterRenderMode* {.size: sizeof(uint8), pure.} = enum
    ERM_Normal, ERM_Point, ERM_Cross, ERM_LightsOnly, ERM_None, ERM_MAX
  EParticleDetailMode* {.size: sizeof(uint8), pure.} = enum
    PDM_Low, PDM_Medium, PDM_High, PDM_MAX
  EParticleSignificanceLevel* {.size: sizeof(uint8), pure.} = enum
    Low, Medium, High, Critical, Num, EParticleSignificanceLevel_MAX
  EParticleSystemInsignificanceReaction* {.size: sizeof(uint8), pure.} = enum
    Auto, Complete, DisableTick, DisableTickAndKill, Num,
    EParticleSystemInsignificanceReaction_MAX
  EModuleType* {.size: sizeof(uint8), pure.} = enum
    EPMT_General, EPMT_TypeData, EPMT_Beam, EPMT_Trail, EPMT_Spawn,
    EPMT_Required, EPMT_Event, EPMT_Light, EPMT_SubUV, EPMT_MAX
  EParticleSourceSelectionMethod* {.size: sizeof(uint8), pure.} = enum
    EPSSM_Random, EPSSM_Sequential, EPSSM_MAX
  EAttractorParticleSelectionMethod* {.size: sizeof(uint8), pure.} = enum
    EAPSM_Random, EAPSM_Sequential, EAPSM_MAX
  Beam2SourceTargetMethod* {.size: sizeof(uint8), pure.} = enum
    PEB2STM_Default, PEB2STM_UserSet, PEB2STM_Emitter, PEB2STM_Particle,
    PEB2STM_Actor, PEB2STM_MAX
  Beam2SourceTargetTangentMethod* {.size: sizeof(uint8), pure.} = enum
    PEB2STTM_Direct, PEB2STTM_UserSet, PEB2STTM_Distribution, PEB2STTM_Emitter,
    PEB2STTM_MAX
  BeamModifierType* {.size: sizeof(uint8), pure.} = enum
    PEB2MT_Source, PEB2MT_Target, PEB2MT_MAX
  EParticleCameraOffsetUpdateMethod* {.size: sizeof(uint8), pure.} = enum
    EPCOUM_DirectSet, EPCOUM_Additive, EPCOUM_Scalar, EPCOUM_MAX
  EParticleCollisionComplete* {.size: sizeof(uint8), pure.} = enum
    EPCC_Kill, EPCC_Freeze, EPCC_HaltCollisions, EPCC_FreezeTranslation,
    EPCC_FreezeRotation, EPCC_FreezeMovement, EPCC_MAX
  EParticleCollisionResponse* {.size: sizeof(uint8), pure.} = enum
    Bounce, Stop, Kill, EParticleCollisionResponse_MAX
  ELocationBoneSocketSource* {.size: sizeof(uint8), pure.} = enum
    BONESOCKETSOURCE_Bones, BONESOCKETSOURCE_Sockets, BONESOCKETSOURCE_MAX
  ELocationBoneSocketSelectionMethod* {.size: sizeof(uint8), pure.} = enum
    BONESOCKETSEL_Sequential, BONESOCKETSEL_Random, BONESOCKETSEL_MAX
  ELocationEmitterSelectionMethod* {.size: sizeof(uint8), pure.} = enum
    ELESM_Random, ELESM_Sequential, ELESM_MAX
  CylinderHeightAxis* {.size: sizeof(uint8), pure.} = enum
    PMLPC_HEIGHTAXIS_X, PMLPC_HEIGHTAXIS_Y, PMLPC_HEIGHTAXIS_Z,
    PMLPC_HEIGHTAXIS_MAX
  ELocationSkelVertSurfaceSource* {.size: sizeof(uint8), pure.} = enum
    VERTSURFACESOURCE_Vert, VERTSURFACESOURCE_Surface, VERTSURFACESOURCE_MAX
  EOrbitChainMode* {.size: sizeof(uint8), pure.} = enum
    EOChainMode_Add, EOChainMode_Scale, EOChainMode_Link, EOChainMode_MAX
  EParticleAxisLock* {.size: sizeof(uint8), pure.} = enum
    EPAL_NONE, EPAL_X, EPAL_Y, EPAL_Z, EPAL_NEGATIVE_X, EPAL_NEGATIVE_Y,
    EPAL_NEGATIVE_Z, EPAL_ROTATE_X, EPAL_ROTATE_Y, EPAL_ROTATE_Z, EPAL_MAX
  EEmitterDynamicParameterValue* {.size: sizeof(uint8), pure.} = enum
    EDPV_UserSet, EDPV_AutoSet, EDPV_VelocityX, EDPV_VelocityY, EDPV_VelocityZ,
    EDPV_VelocityMag, EDPV_MAX
  EParticleUVFlipMode* {.size: sizeof(uint8), pure.} = enum
    None, FlipUV, FlipUOnly, FlipVOnly, RandomFlipUV, RandomFlipUOnly,
    RandomFlipVOnly, RandomFlipUVIndependent, EParticleUVFlipMode_MAX
  EParticleSortMode* {.size: sizeof(uint8), pure.} = enum
    PSORTMODE_None, PSORTMODE_ViewProjDepth, PSORTMODE_DistanceToView,
    PSORTMODE_Age_OldestFirst, PSORTMODE_Age_NewestFirst, PSORTMODE_MAX
  EEmitterNormalsMode* {.size: sizeof(uint8), pure.} = enum
    ENM_CameraFacing, ENM_Spherical, ENM_Cylindrical, ENM_MAX
  ETrail2SourceMethod* {.size: sizeof(uint8), pure.} = enum
    PET2SRCM_Default, PET2SRCM_Particle, PET2SRCM_Actor, PET2SRCM_MAX
  EBeam2Method* {.size: sizeof(uint8), pure.} = enum
    PEB2M_Distance, PEB2M_Target, PEB2M_Branch, PEB2M_MAX
  EBeamTaperMethod* {.size: sizeof(uint8), pure.} = enum
    PEBTM_None, PEBTM_Full, PEBTM_Partial, PEBTM_MAX
  EMeshScreenAlignment* {.size: sizeof(uint8), pure.} = enum
    PSMA_MeshFaceCameraWithRoll, PSMA_MeshFaceCameraWithSpin,
    PSMA_MeshFaceCameraWithLockedAxis, PSMA_MAX
  EMeshCameraFacingUpAxis* {.size: sizeof(uint8), pure.} = enum
    CameraFacing_NoneUP, CameraFacing_ZUp, CameraFacing_NegativeZUp,
    CameraFacing_YUp, CameraFacing_NegativeYUp, CameraFacing_MAX
  EMeshCameraFacingOptions* {.size: sizeof(uint8), pure.} = enum
    XAxisFacing_NoUp, XAxisFacing_ZUp, XAxisFacing_NegativeZUp, XAxisFacing_YUp,
    XAxisFacing_NegativeYUp, LockedAxis_ZAxisFacing,
    LockedAxis_NegativeZAxisFacing, LockedAxis_YAxisFacing,
    LockedAxis_NegativeYAxisFacing, VelocityAligned_ZAxisFacing,
    VelocityAligned_NegativeZAxisFacing, VelocityAligned_YAxisFacing,
    VelocityAligned_NegativeYAxisFacing, EMeshCameraFacingOptions_MAX
  ETrailsRenderAxisOption* {.size: sizeof(uint8), pure.} = enum
    Trails_CameraUp, Trails_SourceUp, Trails_WorldUp, Trails_MAX
  EParticleScreenAlignment* {.size: sizeof(uint8), pure.} = enum
    PSA_FacingCameraPosition, PSA_Square, PSA_Rectangle, PSA_Velocity,
    PSA_AwayFromCenter, PSA_TypeSpecific, PSA_FacingCameraDistanceBlend, PSA_MAX
  EParticleSystemUpdateMode* {.size: sizeof(uint8), pure.} = enum
    EPSUM_RealTime, EPSUM_FixedTime, EPSUM_MAX
  ParticleSystemLODMethod* {.size: sizeof(uint8), pure.} = enum
    PARTICLESYSTEMLODMETHOD_Automatic, PARTICLESYSTEMLODMETHOD_DirectSet,
    PARTICLESYSTEMLODMETHOD_ActivateAutomatic, PARTICLESYSTEMLODMETHOD_MAX
  EParticleSystemOcclusionBoundsMethod* {.size: sizeof(uint8), pure.} = enum
    EPSOBM_None, EPSOBM_ParticleBounds, EPSOBM_CustomBounds, EPSOBM_MAX
  EParticleSysParamType* {.size: sizeof(uint8), pure.} = enum
    PSPT_None, PSPT_Scalar, PSPT_ScalarRand, PSPT_Vector, PSPT_VectorRand,
    PSPT_Color, PSPT_Actor, PSPT_Material, PSPT_VectorUnitRand, PSPT_MAX
  ParticleReplayState* {.size: sizeof(uint8), pure.} = enum
    PRS_Disabled, PRS_Capturing, PRS_Replaying, PRS_MAX
  EParticleEventType* {.size: sizeof(uint8), pure.} = enum
    EPET_Any, EPET_Spawn, EPET_Death, EPET_Collision, EPET_Burst,
    EPET_Blueprint, EPET_MAX
  EPhysicsAssetSolverType* {.size: sizeof(uint8), pure.} = enum
    RBAN, World, EPhysicsAssetSolverType_MAX
  ESettingsDOF* {.size: sizeof(uint8), pure.} = enum
    Full3D, YZPlane, XZPlane, XYPlane, ESettingsDOF_MAX
  ESettingsLockedAxis* {.size: sizeof(uint8), pure.} = enum
    None, X, Y, Z, Invalid, ESettingsLockedAxis_MAX
  EViewTargetBlendFunction* {.size: sizeof(uint8), pure.} = enum
    VTBlend_Linear, VTBlend_Cubic, VTBlend_EaseIn, VTBlend_EaseOut,
    VTBlend_EaseInOut, VTBlend_PreBlended, VTBlend_MAX
  EDynamicForceFeedbackAction* {.size: sizeof(uint8), pure.} = enum
    Start, Update, Stop, EDynamicForceFeedbackAction_MAX
  EVoiceBlockReasons* {.size: sizeof(uint8), pure.} = enum
    None, Muted, MutedBy, Gameplay, Blocked, BlockedBy, EVoiceBlockReasons_MAX
  ECanBeCharacterBase* {.size: sizeof(uint8), pure.} = enum
    ECB_No, ECB_Yes, ECB_Owner, ECB_MAX
  EHasCustomNavigableGeometry* {.size: sizeof(uint8), pure.} = enum
    No, Yes, EvenIfNotCollidable, DontExport, EHasCustomNavigableGeometry_MAX
  ERendererStencilMask* {.size: sizeof(uint8), pure.} = enum
    ERSM_Default, ERSM_255, ERSM_1, ERSM_2, ERSM_4, ERSM_8, ERSM_16, ERSM_32,
    ERSM_64, ERSM_128, ERSM_MAX
  ERayTracingGroupCullingPriority* {.size: sizeof(uint8), pure.} = enum
    CP_0_NEVER_CULL, CP_1, CP_2, CP_3, CP_4_DEFAULT, CP_5, CP_6, CP_7,
    CP_8_QUICKLY_CULL, CP_MAX
  EPropertyAccessCopyBatch* {.size: sizeof(uint8), pure.} = enum
    InternalUnbatched, ExternalUnbatched, InternalBatched, ExternalBatched,
    Count, EPropertyAccessCopyBatch_MAX
  EPropertyAccessIndirectionType* {.size: sizeof(uint8), pure.} = enum
    Offset, Object, Array, ScriptFunction, NativeFunction,
    EPropertyAccessIndirectionType_MAX
  EPropertyAccessObjectType* {.size: sizeof(uint8), pure.} = enum
    None, Object, WeakObject, SoftObject, EPropertyAccessObjectType_MAX
  EPropertyAccessCopyType* {.size: sizeof(uint8), pure.} = enum
    None, Plain, Complex, Bool, Struct, Object, Name, Array, PromoteBoolToByte,
    PromoteBoolToInt32, PromoteBoolToInt64, PromoteBoolToFloat,
    PromoteBoolToDouble, PromoteByteToInt32, PromoteByteToInt64,
    PromoteByteToFloat, PromoteByteToDouble, PromoteInt32ToInt64,
    PromoteInt32ToFloat, PromoteInt32ToDouble, PromoteFloatToDouble,
    DemoteDoubleToFloat, PromoteArrayFloatToDouble, DemoteArrayDoubleToFloat,
    EPropertyAccessCopyType_MAX
  EQuartzTimeSignatureQuantization* {.size: sizeof(uint8), pure.} = enum
    HalfNote, QuarterNote, EighthNote, SixteenthNote, ThirtySecondNote, Count,
    EQuartzTimeSignatureQuantization_MAX
  EQuartzDelegateType* {.size: sizeof(uint8), pure.} = enum
    MetronomeTick, CommandEvent, Count, EQuartzDelegateType_MAX
  EQuarztQuantizationReference* {.size: sizeof(uint8), pure.} = enum
    BarRelative, TransportRelative, CurrentTimeRelative, Count,
    EQuarztQuantizationReference_MAX
  EQuartzCommandType* {.size: sizeof(uint8), pure.} = enum
    PlaySound, QueueSoundToPlay, RetriggerSound, TickRateChange, TransportReset,
    StartOtherClock, EQuartzCommandType_MAX
  ERichCurveInterpMode* {.size: sizeof(uint8), pure.} = enum
    RCIM_Linear, RCIM_Constant, RCIM_Cubic, RCIM_None, RCIM_MAX
  ERichCurveExtrapolation* {.size: sizeof(uint8), pure.} = enum
    RCCE_Cycle, RCCE_CycleWithOffset, RCCE_Oscillate, RCCE_Linear,
    RCCE_Constant, RCCE_None, RCCE_MAX
  EReflectionSourceType* {.size: sizeof(uint8), pure.} = enum
    CapturedScene, SpecifiedCubemap, EReflectionSourceType_MAX
  EMobileReflectionCompression* {.size: sizeof(uint8), pure.} = enum
    Default, On, Off, EMobileReflectionCompression_MAX
  EClearSceneOptions* {.size: sizeof(uint8), pure.} = enum
    NoClear, HardwareClear, QuadAtMaxZ, EClearSceneOptions_MAX
  ECompositingSampleCount* {.size: sizeof(uint8), pure.} = enum
    One, Two, Four, Eight, ECompositingSampleCount_MAX
  ECustomDepthStencil* {.size: sizeof(uint8), pure.} = enum
    Disabled, Enabled, EnabledOnDemand, EnabledWithStencil,
    ECustomDepthStencil_MAX
  EEarlyZPass* {.size: sizeof(uint8), pure.} = enum
    None, OpaqueOnly, OpaqueAndMasked, Auto, EEarlyZPass_MAX
  EVelocityOutputPass* {.size: sizeof(uint8), pure.} = enum
    DepthPass, BasePass, AfterBasePass, EVelocityOutputPass_MAX
  EVertexDeformationOutputsVelocity* {.size: sizeof(uint8), pure.} = enum
    Off, On, Auto, EVertexDeformationOutputsVelocity_MAX
  EAlphaChannelMode* {.size: sizeof(uint8), pure.} = enum
    Disabled, LinearColorSpaceOnly, AllowThroughTonemapper,
    EAlphaChannelMode_MAX
  EAutoExposureMethodUI* {.size: sizeof(uint8), pure.} = enum
    AEM_Histogram, AEM_Basic, AEM_Manual, AEM_MAX
  EDefaultBackBufferPixelFormat* {.size: sizeof(uint8), pure.} = enum
    DBBPF_B8G8R8A8, DBBPF_A16B16G16R16_DEPRECATED, DBBPF_FloatRGB_DEPRECATED,
    DBBPF_FloatRGBA, DBBPF_A2B10G10R10, DBBPF_MAX
  EFixedFoveationLevels* {.size: sizeof(uint8), pure.} = enum
    Disabled, Low, Medium, High, HighTop, EFixedFoveationLevels_MAX
  EMobileAntiAliasingMethod* {.size: sizeof(uint8), pure.} = enum
    None, FXAA, TemporalAA, MSAA, EMobileAntiAliasingMethod_MAX
  EMobileFloatPrecisionMode* {.size: sizeof(uint8), pure.} = enum
    Half, Full_MaterialExpressionOnly, Full, EMobileFloatPrecisionMode_MAX
  EShaderCompressionFormat* {.size: sizeof(uint8), pure.} = enum
    None, LZ4, Oodle, Zlib, EShaderCompressionFormat_MAX
  ELumenSoftwareTracingMode* {.size: sizeof(uint8), pure.} = enum
    DetailTracing, GlobalTracing, ELumenSoftwareTracingMode_MAX
  ELumenRayLightingMode* {.size: sizeof(uint8), pure.} = enum
    SurfaceCache, HitLighting, ELumenRayLightingMode_MAX
  EWorkingColorSpace* {.size: sizeof(uint8), pure.} = enum
    sRGB, Rec2020, ACESAP0, ACESAP1, P3DCI, P3D65, Custom,
    EWorkingColorSpace_MAX
  EReporterLineStyle* {.size: sizeof(uint8), pure.} = enum
    Line, Dash, EReporterLineStyle_MAX
  EGraphAxisStyle* {.size: sizeof(uint8), pure.} = enum
    Lines, Notches, Grid, EGraphAxisStyle_MAX
  EGraphDataStyle* {.size: sizeof(uint8), pure.} = enum
    Lines, Filled, EGraphDataStyle_MAX
  ELegendPosition* {.size: sizeof(uint8), pure.} = enum
    Outside, Inside, ELegendPosition_MAX
  ReverbPreset* {.size: sizeof(uint8), pure.} = enum
    REVERB_Default, REVERB_Bathroom, REVERB_StoneRoom, REVERB_Auditorium,
    REVERB_ConcertHall, REVERB_Cave, REVERB_Hallway, REVERB_StoneCorridor,
    REVERB_Alley, REVERB_Forest, REVERB_City, REVERB_Mountains, REVERB_Quarry,
    REVERB_Plain, REVERB_ParkingLot, REVERB_SewerPipe, REVERB_Underwater,
    REVERB_SmallRoom, REVERB_MediumRoom, REVERB_LargeRoom, REVERB_MediumHall,
    REVERB_LargeHall, REVERB_Plate, REVERB_MAX
  ERichCurveTangentMode* {.size: sizeof(uint8), pure.} = enum
    RCTM_Auto, RCTM_User, RCTM_Break, RCTM_None, RCTM_MAX
  ERichCurveTangentWeightMode* {.size: sizeof(uint8), pure.} = enum
    RCTWM_WeightedNone, RCTWM_WeightedArrive, RCTWM_WeightedLeave,
    RCTWM_WeightedBoth, RCTWM_MAX
  ERichCurveCompressionFormat* {.size: sizeof(uint8), pure.} = enum
    RCCF_Empty, RCCF_Constant, RCCF_Linear, RCCF_Cubic, RCCF_Mixed,
    RCCF_Weighted, RCCF_MAX
  ERichCurveKeyTimeCompressionFormat* {.size: sizeof(uint8), pure.} = enum
    RCKTCF_uint16, RCKTCF_float32, RCKTCF_MAX
  EControlConstraint* {.size: sizeof(uint8), pure.} = enum
    Orientation, Translation, MAX
  EConstraintTransform* {.size: sizeof(uint8), pure.} = enum
    Absolute, Relative, EConstraintTransform_MAX
  ERootMotionAccumulateMode* {.size: sizeof(uint8), pure.} = enum
    Override, Additive, ERootMotionAccumulateMode_MAX
  ERootMotionSourceStatusFlags* {.size: sizeof(uint8), pure.} = enum
    Prepared, Finished, MarkedForRemoval, ERootMotionSourceStatusFlags_MAX
  ERootMotionSourceSettingsFlags* {.size: sizeof(uint8), pure.} = enum
    UseSensitiveLiftoffCheck, DisablePartialEndTick, IgnoreZAccumulate,
    ERootMotionSourceSettingsFlags_MAX
  ERootMotionFinishVelocityMode* {.size: sizeof(uint8), pure.} = enum
    MaintainLastRootMotionVelocity, SetVelocity, ClampVelocity,
    ERootMotionFinishVelocityMode_MAX
  ERuntimeVirtualTextureMaterialType* {.size: sizeof(uint8), pure.} = enum
    BaseColor, BaseColor_Normal_DEPRECATED, BaseColor_Normal_Roughness,
    BaseColor_Normal_Specular, BaseColor_Normal_Specular_YCoCg,
    BaseColor_Normal_Specular_Mask_YCoCg, WorldHeight, Count,
    ERuntimeVirtualTextureMaterialType_MAX
  ERuntimeVirtualTextureMainPassType* {.size: sizeof(uint8), pure.} = enum
    Never, Exclusive, Always, ERuntimeVirtualTextureMainPassType_MAX
  EDepthOfFieldMethod* {.size: sizeof(uint8), pure.} = enum
    DOFM_BokehDOF, DOFM_Gaussian, DOFM_CircleDOF, DOFM_MAX
  EAutoExposureMethod* {.size: sizeof(uint8), pure.} = enum
    AEM_Histogram, AEM_Basic, AEM_Manual, AEM_MAX
  EBloomMethod* {.size: sizeof(uint8), pure.} = enum
    BM_SOG, BM_FFT, BM_MAX
  ETemperatureMethod* {.size: sizeof(uint8), pure.} = enum
    TEMP_WhiteBalance, TEMP_ColorTemperature, TEMP_MAX
  ELightUnits* {.size: sizeof(uint8), pure.} = enum
    Unitless, Candelas, Lumens, ELightUnits_MAX
  EReflectionsType* {.size: sizeof(uint8), pure.} = enum
    ScreenSpace, RayTracing, EReflectionsType_MAX
  ELumenRayLightingModeOverride* {.size: sizeof(uint8), pure.} = enum
    Default, SurfaceCache, HitLighting, ELumenRayLightingModeOverride_MAX
  ETranslucencyType* {.size: sizeof(uint8), pure.} = enum
    Raster, RayTracing, ETranslucencyType_MAX
  ERayTracingGlobalIlluminationType* {.size: sizeof(uint8), pure.} = enum
    Disabled, BruteForce, FinalGather, ERayTracingGlobalIlluminationType_MAX
  EReflectedAndRefractedRayTracedShadows* {.size: sizeof(uint8), pure.} = enum
    Disabled, Hard_shadows, Area_shadows,
    EReflectedAndRefractedRayTracedShadows_MAX
  EMobilePlanarReflectionMode* {.size: sizeof(uint8), pure.} = enum
    Usual, MobilePPRExclusive, MobilePPR, EMobilePlanarReflectionMode_MAX
  EMobilePixelProjectedReflectionQuality* {.size: sizeof(uint8), pure.} = enum
    Disabled, BestPerformance, BetterQuality, BestQuality,
    EMobilePixelProjectedReflectionQuality_MAX
  ESceneCapturePrimitiveRenderMode* {.size: sizeof(uint8), pure.} = enum
    PRM_LegacySceneCapture, PRM_RenderScenePrimitives, PRM_UseShowOnlyList,
    PRM_MAX
  EMaterialProperty* {.size: sizeof(uint8), pure.} = enum
    MP_EmissiveColor, MP_Opacity, MP_OpacityMask, MP_DiffuseColor,
    MP_SpecularColor, MP_BaseColor, MP_Metallic, MP_Specular, MP_Roughness,
    MP_Anisotropy, MP_Normal, MP_Tangent, MP_WorldPositionOffset,
    MP_WorldDisplacement_DEPRECATED, MP_TessellationMultiplier_DEPRECATED,
    MP_SubsurfaceColor, MP_CustomData0, MP_CustomData1, MP_AmbientOcclusion,
    MP_Refraction, MP_CustomizedUVs0, MP_CustomizedUVs1, MP_CustomizedUVs2,
    MP_CustomizedUVs3, MP_CustomizedUVs4, MP_CustomizedUVs5, MP_CustomizedUVs6,
    MP_CustomizedUVs7, MP_PixelDepthOffset, MP_ShadingModel, MP_FrontMaterial,
    MP_MaterialAttributes, MP_CustomOutput, MP_MAX
  EAntiAliasingMethod* {.size: sizeof(uint8), pure.} = enum
    AAM_None, AAM_FXAA, AAM_TemporalAA, AAM_MSAA, AAM_TSR, AAM_MAX
  ESkeletalMeshAsyncProperties* {.size: sizeof(uint8), pure.} = enum
    None, Materials, Skeleton, RefSkeleton, RetargetBasePose, RefBasesInvMatrix,
    MeshClothingAssets, UseLegacyMeshDerivedDataKey, HasActiveClothingAssets,
    LODSettings, HasVertexColors, VertexColorGuid, MorphTargets,
    SkeletalMeshRenderData, MeshEditorDataObject, NeverStream,
    OverrideLODStreamingSettings, SupportLODStreaming, MaxNumStreamedLODs,
    MaxNumOptionalLODs, ImportedModel, LODInfo, SkinWeightProfiles,
    CachedComposedRefPoseMatrices, SamplingInfo, NodeMappingData,
    ShadowPhysicsAsset, SkelMirrorTable, MinLod, DisableBelowMinLodStripping,
    SkelMirrorAxis, SkelMirrorFlipAxis, DefaultAnimationRig,
    NegativeBoundsExtension, PositiveBoundsExtension, ExtendedBounds,
    HasBeenSimplified, EnablePerPolyCollision, BodySetup, MorphTargetIndexMap,
    FloorOffset, ImportedBounds, PhysicsAsset, AssetImportData, ThumbnailInfo,
    HasCustomDefaultEditorCamera, DefaultEditorCameraLocation,
    DefaultEditorCameraRotation, RequiresLODScreenSizeConversion,
    PostProcessAnimBlueprint, DefaultEditorCameraLookAt,
    PreviewAttachedAssetContainer, DefaultEditorCameraOrthoZoom,
    RequiresLODHysteresisConversion, bSupportRayTracing, RayTracingMinLOD,
    ClothLODBiasMode, All, ESkeletalMeshAsyncProperties_MAX
  ESkinCacheUsage* {.size: sizeof(uint8), pure.} = enum
    Auto, Disabled, Enabled, ESkinCacheUsage_MAX
  ESkinCacheDefaultBehavior* {.size: sizeof(uint8), pure.} = enum
    Exclusive, Inclusive, ESkinCacheDefaultBehavior_MAX
  EClothLODBiasMode* {.size: sizeof(uint8), pure.} = enum
    MappingsToSameLOD, MappingsToMinLOD, MappingsToAnyLOD, EClothLODBiasMode_MAX
  EAnimCurveType* {.size: sizeof(uint8), pure.} = enum
    AttributeCurve, MaterialCurve, MorphTargetCurve, MaxAnimCurveType,
    EAnimCurveType_MAX
  ECustomBoneAttributeLookup* {.size: sizeof(uint8), pure.} = enum
    BoneOnly, ImmediateParent, ParentHierarchy, ECustomBoneAttributeLookup_MAX
  EKinematicBonesUpdateToPhysics* {.size: sizeof(uint8), pure.} = enum
    SkipSimulatingBones, SkipAllBones, EKinematicBonesUpdateToPhysics_MAX
  EAnimationMode* {.size: sizeof(uint8), pure.} = enum
    AnimationBlueprint, AnimationSingleNode, AnimationCustomMode,
    EAnimationMode_MAX
  EPhysicsTransformUpdateMode* {.size: sizeof(uint8), pure.} = enum
    SimulationUpatesComponentTransform, ComponentTransformIsKinematic,
    EPhysicsTransformUpdateMode_MAX
  ESkeletalMeshGeoImportVersions* {.size: sizeof(uint8), pure.} = enum
    Before_Versionning, SkeletalMeshBuildRefactor, VersionPlusOne,
    LatestVersion, ESkeletalMeshGeoImportVersions_MAX
  ESkeletalMeshSkinningImportVersions* {.size: sizeof(uint8), pure.} = enum
    Before_Versionning, SkeletalMeshBuildRefactor, VersionPlusOne,
    LatestVersion, ESkeletalMeshSkinningImportVersions_MAX
  EBoneFilterActionOption* {.size: sizeof(uint8), pure.} = enum
    Remove, Keep, Invalid, EBoneFilterActionOption_MAX
  SkeletalMeshTerminationCriterion* {.size: sizeof(uint8), pure.} = enum
    SMTC_NumOfTriangles, SMTC_NumOfVerts, SMTC_TriangleOrVert,
    SMTC_AbsNumOfTriangles, SMTC_AbsNumOfVerts, SMTC_AbsTriangleOrVert, SMTC_MAX
  SkeletalMeshOptimizationType* {.size: sizeof(uint8), pure.} = enum
    SMOT_NumOfTriangles, SMOT_MaxDeviation, SMOT_TriangleOrDeviation, SMOT_MAX
  SkeletalMeshOptimizationImportance* {.size: sizeof(uint8), pure.} = enum
    SMOI_Off, SMOI_Lowest, SMOI_Low, SMOI_Normal, SMOI_High, SMOI_Highest,
    SMOI_MAX
  EBoneTranslationRetargetingMode* {.size: sizeof(uint8), pure.} = enum
    Animation, Skeleton, AnimationScaled, AnimationRelative, OrientAndScale,
    EBoneTranslationRetargetingMode_MAX
  EBoneVisibilityStatus* {.size: sizeof(uint8), pure.} = enum
    BVS_HiddenByParent, BVS_Visible, BVS_ExplicitlyHidden, BVS_MAX
  EPhysBodyOp* {.size: sizeof(uint8), pure.} = enum
    PBO_None, PBO_Term, PBO_MAX
  EVisibilityBasedAnimTickOption* {.size: sizeof(uint8), pure.} = enum
    AlwaysTickPoseAndRefreshBones, AlwaysTickPose,
    OnlyTickMontagesWhenNotRendered, OnlyTickPoseWhenRendered,
    EVisibilityBasedAnimTickOption_MAX
  EBoneSpaces* {.size: sizeof(uint8), pure.} = enum
    WorldSpace, ComponentSpace, EBoneSpaces_MAX
  ESkyAtmosphereTransformMode* {.size: sizeof(uint8), pure.} = enum
    PlanetTopAtAbsoluteWorldOrigin, PlanetTopAtComponentTransform,
    PlanetCenterAtComponentTransform, ESkyAtmosphereTransformMode_MAX
  ESkyLightSourceType* {.size: sizeof(uint8), pure.} = enum
    SLS_CapturedScene, SLS_SpecifiedCubemap, SLS_MAX
  ESoundDistanceCalc* {.size: sizeof(uint8), pure.} = enum
    SOUNDDISTANCE_Normal, SOUNDDISTANCE_InfiniteXYPlane,
    SOUNDDISTANCE_InfiniteXZPlane, SOUNDDISTANCE_InfiniteYZPlane,
    SOUNDDISTANCE_MAX
  ESoundSpatializationAlgorithm* {.size: sizeof(uint8), pure.} = enum
    SPATIALIZATION_Default, SPATIALIZATION_HRTF, SPATIALIZATION_MAX
  EAirAbsorptionMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, CustomCurve, EAirAbsorptionMethod_MAX
  EReverbSendMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, CustomCurve, Manual, EReverbSendMethod_MAX
  ESubmixSendMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, CustomCurve, Manual, ESubmixSendMethod_MAX
  EPriorityAttenuationMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, CustomCurve, Manual, EPriorityAttenuationMethod_MAX
  EVirtualizationMode* {.size: sizeof(uint8), pure.} = enum
    Disabled, PlayWhenSilent, Restart, EVirtualizationMode_MAX
  EMaxConcurrentResolutionRule* {.size: sizeof(uint8), pure.} = enum
    PreventNew, StopOldest, StopFarthestThenPreventNew, StopFarthestThenOldest,
    StopLowestPriority, StopQuietest, StopLowestPriorityThenPreventNew, Count,
    EMaxConcurrentResolutionRule_MAX
  EConcurrencyVolumeScaleMode* {.size: sizeof(uint8), pure.} = enum
    Default, Distance, Priority, EConcurrencyVolumeScaleMode_MAX
  ESoundGroup* {.size: sizeof(uint8), pure.} = enum
    SOUNDGROUP_Default, SOUNDGROUP_Effects, SOUNDGROUP_UI, SOUNDGROUP_Music,
    SOUNDGROUP_Voice, SOUNDGROUP_GameSoundGroup1, SOUNDGROUP_GameSoundGroup2,
    SOUNDGROUP_GameSoundGroup3, SOUNDGROUP_GameSoundGroup4,
    SOUNDGROUP_GameSoundGroup5, SOUNDGROUP_GameSoundGroup6,
    SOUNDGROUP_GameSoundGroup7, SOUNDGROUP_GameSoundGroup8,
    SOUNDGROUP_GameSoundGroup9, SOUNDGROUP_GameSoundGroup10,
    SOUNDGROUP_GameSoundGroup11, SOUNDGROUP_GameSoundGroup12,
    SOUNDGROUP_GameSoundGroup13, SOUNDGROUP_GameSoundGroup14,
    SOUNDGROUP_GameSoundGroup15, SOUNDGROUP_GameSoundGroup16,
    SOUNDGROUP_GameSoundGroup17, SOUNDGROUP_GameSoundGroup18,
    SOUNDGROUP_GameSoundGroup19, SOUNDGROUP_GameSoundGroup20, SOUNDGROUP_MAX
  EModulationRouting* {.size: sizeof(uint8), pure.} = enum
    Disable, Inherit, Override, EModulationRouting_MAX
  ModulationParamMode* {.size: sizeof(uint8), pure.} = enum
    MPM_Normal, MPM_Abs, MPM_Direct, MPM_MAX
  ESourceBusChannels* {.size: sizeof(uint8), pure.} = enum
    Mono, Stereo, ESourceBusChannels_MAX
  ESourceBusSendLevelControlMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, CustomCurve, Manual, ESourceBusSendLevelControlMethod_MAX
  EFFTSize* {.size: sizeof(uint8), pure.} = enum
    DefaultSize, Min, Small, Medium, Large, VeryLarge, Max, EFFTSize_MAX
  EFFTPeakInterpolationMethod* {.size: sizeof(uint8), pure.} = enum
    NearestNeighbor, Linear, Quadratic, ConstantQ,
    EFFTPeakInterpolationMethod_MAX
  EFFTWindowType* {.size: sizeof(uint8), pure.} = enum
    None, Hamming, Hann, Blackman, EFFTWindowType_MAX
  EAudioSpectrumType* {.size: sizeof(uint8), pure.} = enum
    MagnitudeSpectrum, PowerSpectrum, Decibel, EAudioSpectrumType_MAX
  EGainParamMode* {.size: sizeof(uint8), pure.} = enum
    Linear, Decibels, EGainParamMode_MAX
  EAudioSpectrumBandPresetType* {.size: sizeof(uint8), pure.} = enum
    KickDrum, SnareDrum, Voice, Cymbals, EAudioSpectrumBandPresetType_MAX
  EAudioRecordingExportType* {.size: sizeof(uint8), pure.} = enum
    SoundWave, WavFile, EAudioRecordingExportType_MAX
  ESendLevelControlMethod* {.size: sizeof(uint8), pure.} = enum
    Linear, CustomCurve, Manual, ESendLevelControlMethod_MAX
  ESubmixSendStage* {.size: sizeof(uint8), pure.} = enum
    PostDistanceAttenuation, PreDistanceAttenuation, ESubmixSendStage_MAX
  EDecompressionType* {.size: sizeof(uint8), pure.} = enum
    DTYPE_Setup, DTYPE_Invalid, DTYPE_Preview, DTYPE_Native, DTYPE_RealTime,
    DTYPE_Procedural, DTYPE_Xenon, DTYPE_Streaming, DTYPE_MAX
  ESoundWaveFFTSize* {.size: sizeof(uint8), pure.} = enum
    VerySmall_64, Small_256, Medium_512, Large_1024, VeryLarge_2048,
    ESoundWaveFFTSize_MAX
  ESoundAssetCompressionType* {.size: sizeof(uint8), pure.} = enum
    BinkAudio, ADPCM, PCM, PlatformSpecific, ESoundAssetCompressionType_MAX
  ESoundWaveLoadingBehavior* {.size: sizeof(uint8), pure.} = enum
    Inherited, RetainOnLoad, PrimeOnLoad, LoadOnDemand, ForceInline,
    Uninitialized, ESoundWaveLoadingBehavior_MAX
  ESplinePointType* {.size: sizeof(uint8), pure.} = enum
    Linear, Curve, Constant, CurveClamped, CurveCustomTangent,
    ESplinePointType_MAX
  ESplineCoordinateSpace* {.size: sizeof(uint8), pure.} = enum
    Local, World, ESplineCoordinateSpace_MAX
  ESplineMeshAxis* {.size: sizeof(uint8), pure.} = enum
    X, Y, Z, ESplineMeshAxis_MAX
  ENormalMode* {.size: sizeof(uint8), pure.} = enum
    NM_PreserveSmoothingGroups, NM_RecalculateNormals,
    NM_RecalculateNormalsSmooth, NM_RecalculateNormalsHard, TEMP_BROKEN,
    ENormalMode_MAX
  EImportanceLevel* {.size: sizeof(uint8), pure.} = enum
    IL_Off, IL_Lowest, IL_Low, IL_Normal, IL_High, IL_Highest, TEMP_BROKEN2,
    EImportanceLevel_MAX
  EOptimizationType* {.size: sizeof(uint8), pure.} = enum
    OT_NumOfTriangles, OT_MaxDeviation, OT_MAX
  EStereoLayerType* {.size: sizeof(uint8), pure.} = enum
    SLT_WorldLocked, SLT_TrackerLocked, SLT_FaceLocked, SLT_MAX
  EStereoLayerShape* {.size: sizeof(uint8), pure.} = enum
    SLSH_QuadLayer, SLSH_CylinderLayer, SLSH_CubemapLayer, SLSH_EquirectLayer,
    SLSH_MAX
  ESubUVBoundingVertexCount* {.size: sizeof(uint8), pure.} = enum
    BVC_FourVertices, BVC_EightVertices, BVC_MAX
  EOpacitySourceMode* {.size: sizeof(uint8), pure.} = enum
    OSM_Alpha, OSM_ColorBrightness, OSM_RedChannel, OSM_GreenChannel,
    OSM_BlueChannel, OSM_MAX
  EHorizTextAligment* {.size: sizeof(uint8), pure.} = enum
    EHTA_Left, EHTA_Center, EHTA_Right, EHTA_MAX
  EVerticalTextAligment* {.size: sizeof(uint8), pure.} = enum
    EVRTA_TextTop, EVRTA_TextCenter, EVRTA_TextBottom, EVRTA_QuadTop, EVRTA_MAX
  TextureFilter* {.size: sizeof(uint8), pure.} = enum
    TF_Nearest, TF_Bilinear, TF_Trilinear, TF_Default, TF_MAX
  TextureAddress* {.size: sizeof(uint8), pure.} = enum
    TA_Wrap, TA_Clamp, TA_Mirror, TA_MAX
  ETextureMipCount* {.size: sizeof(uint8), pure.} = enum
    TMC_ResidentMips, TMC_AllMips, TMC_AllMipsBiased, TMC_MAX
  ETextureSourceArtType* {.size: sizeof(uint8), pure.} = enum
    TSAT_Uncompressed, TSAT_PNGCompressed, TSAT_DDSFile, TSAT_MAX
  ETextureCompressionQuality* {.size: sizeof(uint8), pure.} = enum
    TCQ_Default, TCQ_Lowest, TCQ_Low, TCQ_Medium, TCQ_High, TCQ_Highest, TCQ_MAX
  TextureGroup* {.size: sizeof(uint8), pure.} = enum
    TEXTUREGROUP_World, TEXTUREGROUP_WorldNormalMap, TEXTUREGROUP_WorldSpecular,
    TEXTUREGROUP_Character, TEXTUREGROUP_CharacterNormalMap,
    TEXTUREGROUP_CharacterSpecular, TEXTUREGROUP_Weapon,
    TEXTUREGROUP_WeaponNormalMap, TEXTUREGROUP_WeaponSpecular,
    TEXTUREGROUP_Vehicle, TEXTUREGROUP_VehicleNormalMap,
    TEXTUREGROUP_VehicleSpecular, TEXTUREGROUP_Cinematic, TEXTUREGROUP_Effects,
    TEXTUREGROUP_EffectsNotFiltered, TEXTUREGROUP_Skybox, TEXTUREGROUP_UI,
    TEXTUREGROUP_Lightmap, TEXTUREGROUP_RenderTarget,
    TEXTUREGROUP_MobileFlattened, TEXTUREGROUP_ProcBuilding_Face,
    TEXTUREGROUP_ProcBuilding_LightMap, TEXTUREGROUP_Shadowmap,
    TEXTUREGROUP_ColorLookupTable, TEXTUREGROUP_Terrain_Heightmap,
    TEXTUREGROUP_Terrain_Weightmap, TEXTUREGROUP_Bokeh,
    TEXTUREGROUP_IESLightProfile, TEXTUREGROUP_Pixels2D,
    TEXTUREGROUP_HierarchicalLOD, TEXTUREGROUP_Impostor,
    TEXTUREGROUP_ImpostorNormalDepth, TEXTUREGROUP_8BitData,
    TEXTUREGROUP_16BitData, TEXTUREGROUP_Project01, TEXTUREGROUP_Project02,
    TEXTUREGROUP_Project03, TEXTUREGROUP_Project04, TEXTUREGROUP_Project05,
    TEXTUREGROUP_Project06, TEXTUREGROUP_Project07, TEXTUREGROUP_Project08,
    TEXTUREGROUP_Project09, TEXTUREGROUP_Project10, TEXTUREGROUP_Project11,
    TEXTUREGROUP_Project12, TEXTUREGROUP_Project13, TEXTUREGROUP_Project14,
    TEXTUREGROUP_Project15, TEXTUREGROUP_Project16, TEXTUREGROUP_MAX
  TextureMipGenSettings* {.size: sizeof(uint8), pure.} = enum
    TMGS_FromTextureGroup, TMGS_SimpleAverage, TMGS_Sharpen0, TMGS_Sharpen1,
    TMGS_Sharpen2, TMGS_Sharpen3, TMGS_Sharpen4, TMGS_Sharpen5, TMGS_Sharpen6,
    TMGS_Sharpen7, TMGS_Sharpen8, TMGS_Sharpen9, TMGS_Sharpen10, TMGS_NoMipmaps,
    TMGS_LeaveExistingMips, TMGS_Blur1, TMGS_Blur2, TMGS_Blur3, TMGS_Blur4,
    TMGS_Blur5, TMGS_Unfiltered, TMGS_Angular, TMGS_MAX
  ETexturePowerOfTwoSetting* {.size: sizeof(uint8), pure.} = enum
    None, PadToPowerOfTwo, PadToSquarePowerOfTwo, ETexturePowerOfTwoSetting_MAX
  ETextureSamplerFilter* {.size: sizeof(uint8), pure.} = enum
    Point, Bilinear, Trilinear, AnisotropicPoint, AnisotropicLinear,
    ETextureSamplerFilter_MAX
  ETextureMipLoadOptions* {.size: sizeof(uint8), pure.} = enum
    Default, AllMips, OnlyFirstMip, ETextureMipLoadOptions_MAX
  ETextureDownscaleOptions* {.size: sizeof(uint8), pure.} = enum
    Default, Unfiltered, SimpleAverage, Sharpen0, Sharpen1, Sharpen2, Sharpen3,
    Sharpen4, Sharpen5, Sharpen6, Sharpen7, Sharpen8, Sharpen9, Sharpen10,
    ETextureDownscaleOptions_MAX
  ETextureLossyCompressionAmount* {.size: sizeof(uint8), pure.} = enum
    TLCA_Default, TLCA_None, TLCA_Lowest, TLCA_Low, TLCA_Medium, TLCA_High,
    TLCA_Highest, TLCA_MAX
  ECompositeTextureMode* {.size: sizeof(uint8), pure.} = enum
    CTM_Disabled, CTM_NormalRoughnessToRed, CTM_NormalRoughnessToGreen,
    CTM_NormalRoughnessToBlue, CTM_NormalRoughnessToAlpha, CTM_MAX
  ETextureSourceCompressionFormat* {.size: sizeof(uint8), pure.} = enum
    TSCF_None, TSCF_PNG, TSCF_JPEG, TSCF_MAX
  ETextureSourceFormat* {.size: sizeof(uint8), pure.} = enum
    TSF_Invalid, TSF_G8, TSF_BGRA8, TSF_BGRE8, TSF_RGBA16, TSF_RGBA16F,
    TSF_RGBA8, TSF_RGBE8, TSF_G16, TSF_MAX
  TextureCompressionSettings* {.size: sizeof(uint8), pure.} = enum
    TC_Default, TC_Normalmap, TC_Masks, TC_Grayscale, TC_Displacementmap,
    TC_VectorDisplacementmap, TC_HDR, TC_EditorIcon, TC_Alpha,
    TC_DistanceFieldFont, TC_HDR_Compressed, TC_BC7, TC_HalfFloat, TC_LQ,
    TC_EncodedReflectionCapture, TC_MAX
  ETextureSourceEncoding* {.size: sizeof(uint8), pure.} = enum
    TSE_None, TSE_Linear, TSE_sRGB, TSE_ST2084, TSE_Gamma22, TSE_BT1886,
    TSE_Gamma26, TSE_Cineon, TSE_REDLog, TSE_REDLog3G10, TSE_SLog1, TSE_SLog2,
    TSE_SLog3, TSE_AlexaV3LogC, TSE_CanonLog, TSE_ProTune, TSE_VLog, TSE_MAX
  ETextureColorSpace* {.size: sizeof(uint8), pure.} = enum
    TCS_None, TCS_sRGB, TCS_Rec2020, TCS_ACESAP0, TCS_ACESAP1, TCS_P3DCI,
    TCS_P3D65, TCS_REDWideGamut, TCS_SonySGamut3, TCS_SonySGamut3Cine,
    TCS_AlexaWideGamut, TCS_CanonCinemaGamut, TCS_GoProProtuneNative,
    TCS_PanasonicVGamut, TCS_Custom, TCS_MAX
  ETextureChromaticAdaptationMethod* {.size: sizeof(uint8), pure.} = enum
    TCAM_None, TCAM_Bradford, TCAM_CAT02, TCAM_MAX
  ETextureEncodeEffort* {.size: sizeof(uint8), pure.} = enum
    Default, Low, Normal, High, ETextureEncodeEffort_MAX
  ETextureUniversalTiling* {.size: sizeof(uint8), pure.} = enum
    Disabled, Enabled_256KB, Enabled_64KB, ETextureUniversalTiling_MAX
  ETextureEncodeSpeed* {.size: sizeof(uint8), pure.} = enum
    Final, FinalIfAvailable, Fast, ETextureEncodeSpeed_MAX
  ETextureEncodeSpeedOverride* {.size: sizeof(uint8), pure.} = enum
    Disabled, Final, FinalIfAvailable, Fast, ETextureEncodeSpeedOverride_MAX
  ETextureRenderTargetFormat* {.size: sizeof(uint8), pure.} = enum
    RTF_R8, RTF_RG8, RTF_RGBA8, RTF_RGBA8_SRGB, RTF_R16f, RTF_RG16f,
    RTF_RGBA16f, RTF_R32f, RTF_RG32f, RTF_RGBA32f, RTF_RGB10A2, RTF_MAX
  ETimecodeProviderSynchronizationState* {.size: sizeof(uint8), pure.} = enum
    Closed, Error, Synchronized, Synchronizing,
    ETimecodeProviderSynchronizationState_MAX
  ETimelineLengthMode* {.size: sizeof(uint8), pure.} = enum
    TL_TimelineLength, TL_LastKeyFrame, TL_MAX
  ETimelineDirection* {.size: sizeof(uint8), pure.} = enum
    Forward, Backward, ETimelineDirection_MAX
  ETimeStretchCurveMapping* {.size: sizeof(uint8), pure.} = enum
    T_Original, T_TargetMin, T_TargetMax, MAX
  ETwitterRequestMethod* {.size: sizeof(uint8), pure.} = enum
    TRM_Get, TRM_Post, TRM_Delete, TRM_MAX
  ETwitterIntegrationDelegate* {.size: sizeof(uint8), pure.} = enum
    TID_AuthorizeComplete, TID_TweetUIComplete, TID_RequestComplete, TID_MAX
  ETypedElementWorldType* {.size: sizeof(uint8), pure.} = enum
    Game, Editor, ETypedElementWorldType_MAX
  EUserDefinedStructureStatus* {.size: sizeof(uint8), pure.} = enum
    UDSS_UpToDate, UDSS_Dirty, UDSS_Error, UDSS_Duplicate, UDSS_MAX
  ERenderFocusRule* {.size: sizeof(uint8), pure.} = enum
    Always, NonPointer, NavigationOnly, Never, ERenderFocusRule_MAX
  EUIScalingRule* {.size: sizeof(uint8), pure.} = enum
    ShortestSide, LongestSide, Horizontal, Vertical, ScaleToFit, Custom,
    EUIScalingRule_MAX
  EVectorFieldConstructionOp* {.size: sizeof(uint8), pure.} = enum
    VFCO_Extrude, VFCO_Revolve, VFCO_MAX
  EWindSourceType* {.size: sizeof(uint8), pure.} = enum
    Directional, Point, EWindSourceType_MAX
  EWorldPartitionRuntimeCellState* {.size: sizeof(uint8), pure.} = enum
    Unloaded, Loaded, Activated, EWorldPartitionRuntimeCellState_MAX
  EWorldPartitionStreamingPerformance* {.size: sizeof(uint8), pure.} = enum
    Good, Slow, Critical, EWorldPartitionStreamingPerformance_MAX
  EStreamingSourceTargetState* {.size: sizeof(uint8), pure.} = enum
    Loaded, Activated, EStreamingSourceTargetState_MAX
  EStreamingSourcePriority* {.size: sizeof(uint8), pure.} = enum
    Highest, High, Normal, Low, Lowest, Default, EStreamingSourcePriority_MAX
  EPSCPoolMethod* {.size: sizeof(uint8), pure.} = enum
    None, AutoRelease, ManualRelease, ManualRelease_OnComplete, FreeInPool,
    EPSCPoolMethod_MAX
  EVisibilityAggressiveness* {.size: sizeof(uint8), pure.} = enum
    VIS_LeastAggressive, VIS_ModeratelyAggressive, VIS_MostAggressive, VIS_Max
  EVolumeLightingMethod* {.size: sizeof(uint8), pure.} = enum
    VLM_VolumetricLightmap, VLM_SparseVolumeLightingSamples, VLM_MAX
  FTableRowBase* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FPostProcessSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bOverride_TemperatureType*: uint8
    bOverride_WhiteTemp*: uint8
    bOverride_WhiteTint*: uint8
    bOverride_ColorSaturation*: uint8
    bOverride_ColorContrast*: uint8
    bOverride_ColorGamma*: uint8
    bOverride_ColorGain*: uint8
    bOverride_ColorOffset*: uint8
    bOverride_ColorSaturationShadows*: uint8
    bOverride_ColorContrastShadows*: uint8
    bOverride_ColorGammaShadows*: uint8
    bOverride_ColorGainShadows*: uint8
    bOverride_ColorOffsetShadows*: uint8
    bOverride_ColorSaturationMidtones*: uint8
    bOverride_ColorContrastMidtones*: uint8
    bOverride_ColorGammaMidtones*: uint8
    bOverride_ColorGainMidtones*: uint8
    bOverride_ColorOffsetMidtones*: uint8
    bOverride_ColorSaturationHighlights*: uint8
    bOverride_ColorContrastHighlights*: uint8
    bOverride_ColorGammaHighlights*: uint8
    bOverride_ColorGainHighlights*: uint8
    bOverride_ColorOffsetHighlights*: uint8
    bOverride_ColorCorrectionShadowsMax*: uint8
    bOverride_ColorCorrectionHighlightsMin*: uint8
    bOverride_ColorCorrectionHighlightsMax*: uint8
    bOverride_BlueCorrection*: uint8
    bOverride_ExpandGamut*: uint8
    bOverride_ToneCurveAmount*: uint8
    bOverride_FilmSlope*: uint8
    bOverride_FilmToe*: uint8
    bOverride_FilmShoulder*: uint8
    bOverride_FilmBlackClip*: uint8
    bOverride_FilmWhiteClip*: uint8
    bOverride_SceneColorTint*: uint8
    bOverride_SceneFringeIntensity*: uint8
    bOverride_ChromaticAberrationStartOffset*: uint8
    bOverride_AmbientCubemapTint*: uint8
    bOverride_AmbientCubemapIntensity*: uint8
    bOverride_BloomMethod*: uint8
    bOverride_BloomIntensity*: uint8
    bOverride_BloomThreshold*: uint8
    bOverride_Bloom1Tint*: uint8
    bOverride_Bloom1Size*: uint8
    bOverride_Bloom2Size*: uint8
    bOverride_Bloom2Tint*: uint8
    bOverride_Bloom3Tint*: uint8
    bOverride_Bloom3Size*: uint8
    bOverride_Bloom4Tint*: uint8
    bOverride_Bloom4Size*: uint8
    bOverride_Bloom5Tint*: uint8
    bOverride_Bloom5Size*: uint8
    bOverride_Bloom6Tint*: uint8
    bOverride_Bloom6Size*: uint8
    bOverride_BloomSizeScale*: uint8
    bOverride_BloomConvolutionTexture*: uint8
    bOverride_BloomConvolutionScatterDispersion*: uint8
    bOverride_BloomConvolutionSize*: uint8
    bOverride_BloomConvolutionCenterUV*: uint8
    bOverride_BloomConvolutionPreFilterMin*: uint8
    bOverride_BloomConvolutionPreFilterMax*: uint8
    bOverride_BloomConvolutionPreFilterMult*: uint8
    bOverride_BloomConvolutionBufferScale*: uint8
    bOverride_BloomDirtMaskIntensity*: uint8
    bOverride_BloomDirtMaskTint*: uint8
    bOverride_BloomDirtMask*: uint8
    bOverride_CameraShutterSpeed*: uint8
    bOverride_CameraISO*: uint8
    bOverride_AutoExposureMethod*: uint8
    bOverride_AutoExposureLowPercent*: uint8
    bOverride_AutoExposureHighPercent*: uint8
    bOverride_AutoExposureMinBrightness*: uint8
    bOverride_AutoExposureMaxBrightness*: uint8
    bOverride_AutoExposureSpeedUp*: uint8
    bOverride_AutoExposureSpeedDown*: uint8
    bOverride_AutoExposureBias*: uint8
    bOverride_AutoExposureBiasCurve*: uint8
    bOverride_AutoExposureMeterMask*: uint8
    bOverride_AutoExposureApplyPhysicalCameraExposure*: uint8
    bOverride_HistogramLogMin*: uint8
    bOverride_HistogramLogMax*: uint8
    bOverride_LocalExposureContrastScale*: uint8
    bOverride_LocalExposureDetailStrength*: uint8
    bOverride_LocalExposureBlurredLuminanceBlend*: uint8
    bOverride_LocalExposureBlurredLuminanceKernelSizePercent*: uint8
    bOverride_LocalExposureMiddleGreyBias*: uint8
    bOverride_LensFlareIntensity*: uint8
    bOverride_LensFlareTint*: uint8
    bOverride_LensFlareTints*: uint8
    bOverride_LensFlareBokehSize*: uint8
    bOverride_LensFlareBokehShape*: uint8
    bOverride_LensFlareThreshold*: uint8
    bOverride_VignetteIntensity*: uint8
    bOverride_FilmGrainIntensity*: uint8
    bOverride_FilmGrainIntensityShadows*: uint8
    bOverride_FilmGrainIntensityMidtones*: uint8
    bOverride_FilmGrainIntensityHighlights*: uint8
    bOverride_FilmGrainShadowsMax*: uint8
    bOverride_FilmGrainHighlightsMin*: uint8
    bOverride_FilmGrainHighlightsMax*: uint8
    bOverride_FilmGrainTexelSize*: uint8
    bOverride_FilmGrainTexture*: uint8
    bOverride_AmbientOcclusionIntensity*: uint8
    bOverride_AmbientOcclusionStaticFraction*: uint8
    bOverride_AmbientOcclusionRadius*: uint8
    bOverride_AmbientOcclusionFadeDistance*: uint8
    bOverride_AmbientOcclusionFadeRadius*: uint8
    bOverride_AmbientOcclusionRadiusInWS*: uint8
    bOverride_AmbientOcclusionPower*: uint8
    bOverride_AmbientOcclusionBias*: uint8
    bOverride_AmbientOcclusionQuality*: uint8
    bOverride_AmbientOcclusionMipBlend*: uint8
    bOverride_AmbientOcclusionMipScale*: uint8
    bOverride_AmbientOcclusionMipThreshold*: uint8
    bOverride_AmbientOcclusionTemporalBlendWeight*: uint8
    bOverride_RayTracingAO*: uint8
    bOverride_RayTracingAOSamplesPerPixel*: uint8
    bOverride_RayTracingAOIntensity*: uint8
    bOverride_RayTracingAORadius*: uint8
    bOverride_IndirectLightingColor*: uint8
    bOverride_IndirectLightingIntensity*: uint8
    bOverride_ColorGradingIntensity*: uint8
    bOverride_ColorGradingLUT*: uint8
    bOverride_DepthOfFieldFocalDistance*: uint8
    bOverride_DepthOfFieldFstop*: uint8
    bOverride_DepthOfFieldMinFstop*: uint8
    bOverride_DepthOfFieldBladeCount*: uint8
    bOverride_DepthOfFieldSensorWidth*: uint8
    bOverride_DepthOfFieldDepthBlurRadius*: uint8
    bOverride_DepthOfFieldDepthBlurAmount*: uint8
    bOverride_DepthOfFieldFocalRegion*: uint8
    bOverride_DepthOfFieldNearTransitionRegion*: uint8
    bOverride_DepthOfFieldFarTransitionRegion*: uint8
    bOverride_DepthOfFieldScale*: uint8
    bOverride_DepthOfFieldNearBlurSize*: uint8
    bOverride_DepthOfFieldFarBlurSize*: uint8
    bOverride_MobileHQGaussian*: uint8
    bOverride_DepthOfFieldOcclusion*: uint8
    bOverride_DepthOfFieldSkyFocusDistance*: uint8
    bOverride_DepthOfFieldVignetteSize*: uint8
    bOverride_MotionBlurAmount*: uint8
    bOverride_MotionBlurMax*: uint8
    bOverride_MotionBlurTargetFPS*: uint8
    bOverride_MotionBlurPerObjectSize*: uint8
    bOverride_ReflectionMethod*: uint8
    bOverride_LumenReflectionQuality*: uint8
    bOverride_ScreenSpaceReflectionIntensity*: uint8
    bOverride_ScreenSpaceReflectionQuality*: uint8
    bOverride_ScreenSpaceReflectionMaxRoughness*: uint8
    bOverride_ScreenSpaceReflectionRoughnessScale*: uint8
    bOverride_RayTracingReflectionsMaxRoughness*: uint8
    bOverride_RayTracingReflectionsMaxBounces*: uint8
    bOverride_RayTracingReflectionsSamplesPerPixel*: uint8
    bOverride_RayTracingReflectionsShadows*: uint8
    bOverride_RayTracingReflectionsTranslucency*: uint8
    bOverride_TranslucencyType*: uint8
    bOverride_RayTracingTranslucencyMaxRoughness*: uint8
    bOverride_RayTracingTranslucencyRefractionRays*: uint8
    bOverride_RayTracingTranslucencySamplesPerPixel*: uint8
    bOverride_RayTracingTranslucencyShadows*: uint8
    bOverride_RayTracingTranslucencyRefraction*: uint8
    bOverride_DynamicGlobalIlluminationMethod*: uint8
    bOverride_LumenSceneLightingQuality*: uint8
    bOverride_LumenSceneDetail*: uint8
    bOverride_LumenSceneViewDistance*: uint8
    bOverride_LumenSceneLightingUpdateSpeed*: uint8
    bOverride_LumenFinalGatherQuality*: uint8
    bOverride_LumenFinalGatherLightingUpdateSpeed*: uint8
    bOverride_LumenMaxTraceDistance*: uint8
    bOverride_LumenRayLightingMode*: uint8
    bOverride_RayTracingGI*: uint8
    bOverride_RayTracingGIMaxBounces*: uint8
    bOverride_RayTracingGISamplesPerPixel*: uint8
    bOverride_PathTracingMaxBounces*: uint8
    bOverride_PathTracingSamplesPerPixel*: uint8
    bOverride_PathTracingFilterWidth*: uint8
    bOverride_PathTracingEnableEmissive*: uint8
    bOverride_PathTracingMaxPathExposure*: uint8
    bOverride_PathTracingEnableReferenceDOF*: uint8
    bOverride_PathTracingEnableDenoiser*: uint8
    bMobileHQGaussian*: uint8
    bloomMethod*: EBloomMethod
    autoExposureMethod*: EAutoExposureMethod
    temperatureType*: ETemperatureMethod
    whiteTemp*: float32
    whiteTint*: float32
    colorSaturation*: FVector4
    colorContrast*: FVector4
    colorGamma*: FVector4
    colorGain*: FVector4
    colorOffset*: FVector4
    colorSaturationShadows*: FVector4
    colorContrastShadows*: FVector4
    colorGammaShadows*: FVector4
    colorGainShadows*: FVector4
    colorOffsetShadows*: FVector4
    colorSaturationMidtones*: FVector4
    colorContrastMidtones*: FVector4
    colorGammaMidtones*: FVector4
    colorGainMidtones*: FVector4
    colorOffsetMidtones*: FVector4
    colorSaturationHighlights*: FVector4
    colorContrastHighlights*: FVector4
    colorGammaHighlights*: FVector4
    colorGainHighlights*: FVector4
    colorOffsetHighlights*: FVector4
    colorCorrectionHighlightsMin*: float32
    colorCorrectionHighlightsMax*: float32
    colorCorrectionShadowsMax*: float32
    blueCorrection*: float32
    expandGamut*: float32
    toneCurveAmount*: float32
    filmSlope*: float32
    filmToe*: float32
    filmShoulder*: float32
    filmBlackClip*: float32
    filmWhiteClip*: float32
    sceneColorTint*: FLinearColor
    sceneFringeIntensity*: float32
    chromaticAberrationStartOffset*: float32
    bloomIntensity*: float32
    bloomThreshold*: float32
    bloomSizeScale*: float32
    bloom1Size*: float32
    bloom2Size*: float32
    bloom3Size*: float32
    bloom4Size*: float32
    bloom5Size*: float32
    bloom6Size*: float32
    bloom1Tint*: FLinearColor
    bloom2Tint*: FLinearColor
    bloom3Tint*: FLinearColor
    bloom4Tint*: FLinearColor
    bloom5Tint*: FLinearColor
    bloom6Tint*: FLinearColor
    bloomConvolutionScatterDispersion*: float32
    bloomConvolutionSize*: float32
    bloomConvolutionTexture*: TObjectPtr[UTexture2D]
    bloomConvolutionCenterUV*: FVector2D
    bloomConvolutionPreFilterMin*: float32
    bloomConvolutionPreFilterMax*: float32
    bloomConvolutionPreFilterMult*: float32
    bloomConvolutionBufferScale*: float32
    bloomDirtMask*: TObjectPtr[UTexture]
    bloomDirtMaskIntensity*: float32
    bloomDirtMaskTint*: FLinearColor
    dynamicGlobalIlluminationMethod*: EDynamicGlobalIlluminationMethod::Type
    indirectLightingColor*: FLinearColor
    indirectLightingIntensity*: float32
    lumenSceneLightingQuality*: float32
    lumenSceneDetail*: float32
    lumenSceneViewDistance*: float32
    lumenSceneLightingUpdateSpeed*: float32
    lumenFinalGatherQuality*: float32
    lumenFinalGatherLightingUpdateSpeed*: float32
    lumenMaxTraceDistance*: float32
    rayTracingGIType*: ERayTracingGlobalIlluminationType
    rayTracingGIMaxBounces*: int32
    rayTracingGISamplesPerPixel*: int32
    reflectionMethod*: EReflectionMethod::Type
    lumenReflectionQuality*: float32
    lumenRayLightingMode*: ELumenRayLightingModeOverride
    screenSpaceReflectionIntensity*: float32
    screenSpaceReflectionQuality*: float32
    screenSpaceReflectionMaxRoughness*: float32
    rayTracingReflectionsMaxRoughness*: float32
    rayTracingReflectionsMaxBounces*: int32
    rayTracingReflectionsSamplesPerPixel*: int32
    rayTracingReflectionsShadows*: EReflectedAndRefractedRayTracedShadows
    rayTracingReflectionsTranslucency*: uint8
    ambientCubemapTint*: FLinearColor
    ambientCubemapIntensity*: float32
    ambientCubemap*: TObjectPtr[UTextureCube]
    cameraShutterSpeed*: float32
    cameraISO*: float32
    depthOfFieldFstop*: float32
    depthOfFieldMinFstop*: float32
    depthOfFieldBladeCount*: int32
    autoExposureBias*: float32
    autoExposureApplyPhysicalCameraExposure*: uint8
    autoExposureBiasCurve*: TObjectPtr[UCurveFloat]
    autoExposureMeterMask*: TObjectPtr[UTexture]
    autoExposureLowPercent*: float32
    autoExposureHighPercent*: float32
    autoExposureMinBrightness*: float32
    autoExposureMaxBrightness*: float32
    autoExposureSpeedUp*: float32
    autoExposureSpeedDown*: float32
    histogramLogMin*: float32
    histogramLogMax*: float32
    localExposureContrastScale*: float32
    localExposureDetailStrength*: float32
    localExposureBlurredLuminanceBlend*: float32
    localExposureBlurredLuminanceKernelSizePercent*: float32
    localExposureMiddleGreyBias*: float32
    lensFlareIntensity*: float32
    lensFlareTint*: FLinearColor
    lensFlareBokehSize*: float32
    lensFlareThreshold*: float32
    lensFlareBokehShape*: TObjectPtr[UTexture]
    vignetteIntensity*: float32
    filmGrainIntensity*: float32
    filmGrainIntensityShadows*: float32
    filmGrainIntensityMidtones*: float32
    filmGrainIntensityHighlights*: float32
    filmGrainShadowsMax*: float32
    filmGrainHighlightsMin*: float32
    filmGrainHighlightsMax*: float32
    filmGrainTexelSize*: float32
    filmGrainTexture*: TObjectPtr[UTexture2D]
    ambientOcclusionIntensity*: float32
    ambientOcclusionStaticFraction*: float32
    ambientOcclusionRadius*: float32
    ambientOcclusionRadiusInWS*: uint8
    ambientOcclusionFadeDistance*: float32
    ambientOcclusionFadeRadius*: float32
    ambientOcclusionPower*: float32
    ambientOcclusionBias*: float32
    ambientOcclusionQuality*: float32
    ambientOcclusionMipBlend*: float32
    ambientOcclusionMipScale*: float32
    ambientOcclusionMipThreshold*: float32
    ambientOcclusionTemporalBlendWeight*: float32
    rayTracingAO*: uint8
    rayTracingAOSamplesPerPixel*: int32
    rayTracingAOIntensity*: float32
    rayTracingAORadius*: float32
    colorGradingIntensity*: float32
    colorGradingLUT*: TObjectPtr[UTexture]
    depthOfFieldSensorWidth*: float32
    depthOfFieldFocalDistance*: float32
    depthOfFieldDepthBlurAmount*: float32
    depthOfFieldDepthBlurRadius*: float32
    depthOfFieldFocalRegion*: float32
    depthOfFieldNearTransitionRegion*: float32
    depthOfFieldFarTransitionRegion*: float32
    depthOfFieldScale*: float32
    depthOfFieldNearBlurSize*: float32
    depthOfFieldFarBlurSize*: float32
    depthOfFieldOcclusion*: float32
    depthOfFieldSkyFocusDistance*: float32
    depthOfFieldVignetteSize*: float32
    motionBlurAmount*: float32
    motionBlurMax*: float32
    motionBlurTargetFPS*: int32
    motionBlurPerObjectSize*: float32
    translucencyType*: ETranslucencyType
    rayTracingTranslucencyMaxRoughness*: float32
    rayTracingTranslucencyRefractionRays*: int32
    rayTracingTranslucencySamplesPerPixel*: int32
    rayTracingTranslucencyShadows*: EReflectedAndRefractedRayTracedShadows
    rayTracingTranslucencyRefraction*: uint8
    pathTracingMaxBounces*: int32
    pathTracingSamplesPerPixel*: int32
    pathTracingFilterWidth*: float32
    pathTracingEnableEmissive*: uint8
    pathTracingMaxPathExposure*: float32
    pathTracingEnableReferenceDOF*: uint8
    pathTracingEnableDenoiser*: uint8
    weightedBlendables*: FWeightedBlendables

  FWeightedBlendables* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    array*: TArray[FWeightedBlendable]

  FWeightedBlendable* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    weight*: float32
    `object`*: TObjectPtr[UObject]

  FEdGraphPinType* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FAnimNodeReference* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FAnimNode_AssetPlayerBase* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    blendWeight*: float32
    internalTimeAccumulator*: float32

  FPoseLinkBase* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FPoseLink* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FInputScaleBiasClamp* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bMapRange*: bool
    bClampResult*: bool
    bInterpResult*: bool
    inRange*: FInputRange
    outRange*: FInputRange
    scale*: float32
    bias*: float32
    clampMin*: float32
    clampMax*: float32
    interpSpeedIncreasing*: float32
    interpSpeedDecreasing*: float32

  FInputRange* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    min*: float32
    max*: float32

  FInputAlphaBoolBlend* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    blendInTime*: float32
    blendOutTime*: float32
    blendOption*: EAlphaBlendOption
    customCurve*: TObjectPtr[UCurveFloat]

  FAlphaBlend* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FInputScaleBias* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    scale*: float32
    bias*: float32

  FComponentSpacePoseLink* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FRuntimeFloatCurve* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FRichCurveKey* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    time*: float32
    value*: float32

  FAnimNode_Root* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    Result*: FPoseLink

  FPerBoneBlendWeight* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FPoseSnapshot* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    localTransforms*: TArray[FTransform]
    boneNames*: TArray[FName]
    skeletalMeshName*: FName
    snapshotName*: FName
    bIsValid*: bool

  FActorDataLayer* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName

  FMaterialParameterInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName
    association*: EMaterialParameterAssociation
    index*: int32

  FLightingChannels* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bChannel0*: uint8
    bChannel1*: uint8
    bChannel2*: uint8

  FAlphaBlendArgs* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    customCurve*: TObjectPtr[UCurveFloat]
    blendTime*: float32
    blendOption*: EAlphaBlendOption

  FBlendSampleData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FMarkerSyncAnimPosition* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FNamedFloat* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    value*: float32
    name*: FName

  FNamedVector* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    value*: FVector
    name*: FName

  FNamedColor* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    value*: FColor
    name*: FName

  FNamedTransform* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    value*: FTransform
    name*: FName

  FLocalSpacePose* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    transforms*: TArray[FTransform]
    names*: TArray[FName]

  FComponentSpacePose* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    transforms*: TArray[FTransform]
    names*: TArray[FName]

  FAnimCurveBase* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FFloatCurve* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FTransformCurve* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FCachedFloatCurve* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    curveName*: FName

  FBoneAnimationTrack* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    internalTrackData*: FRawAnimSequenceTrack
    boneTreeIndex*: int32
    name*: FName

  FRawAnimSequenceTrack* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FAnimationCurveData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    floatCurves*: TArray[FFloatCurve]
    transformCurves*: TArray[FTransformCurve]

  FAnimatedBoneAttribute* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    identifier*: FAnimationAttributeIdentifier
    curve*: FAttributeCurve

  FAttributeCurve* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FAnimationAttributeIdentifier* {.inject, importcpp: "$1_",
                                   header: "UEGenBindings.h".} = object
    name*: FName
    boneName*: FName
    boneIndex*: int32
    scriptStructPath*: FSoftObjectPath

  FEmptyPayload* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FBracketPayload* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    description*: FString

  FAnimationTrackPayload* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName

  FAnimationTrackAddedPayload* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    trackIndex*: int32

  FSequenceLengthChangedPayload* {.inject, importcpp: "$1_",
                                   header: "UEGenBindings.h".} = object
    previousLength*: float32
    t0*: float32
    t1*: float32

  FFrameRateChangedPayload* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    previousFrameRate*: FFrameRate

  FCurvePayload* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    identifier*: FAnimationCurveIdentifier

  FAnimationCurveIdentifier* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
  
  FCurveScaledPayload* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    factor*: float32
    origin*: float32

  FCurveRenamedPayload* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    newIdentifier*: FAnimationCurveIdentifier

  FCurveFlagsChangedPayload* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    oldFlags*: int32

  FAttributePayload* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    identifier*: FAnimationAttributeIdentifier

  FAnimExecutionContext* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FMontageBlendSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    blend*: FAlphaBlendArgs
    blendMode*: EMontageBlendMode

  FAnimNotifyEvent* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    triggerWeightThreshold*: float32
    notifyName*: FName
    notify*: TObjectPtr[UAnimNotify]
    notifyStateClass*: TObjectPtr[UAnimNotifyState]
    montageTickType*: EMontageNotifyTickType::Type
    notifyTriggerChance*: float32
    notifyFilterType*: ENotifyFilterType::Type
    notifyFilterLOD*: int32
    bTriggerOnDedicatedServer*: bool
    bTriggerOnFollower*: bool

  FAnimNodeConstantData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FAnimNodeData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FAnimNode_ConvertComponentToLocalSpace* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
    componentPose*: FComponentSpacePoseLink

  FAnimNode_ConvertLocalToComponentSpace* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
    localPose*: FPoseLink

  FAnimNode_ApplyMeshSpaceAdditive* {.inject, importcpp: "$1_",
                                      header: "UEGenBindings.h".} = object
    base*: FPoseLink
    additive*: FPoseLink
    alphaInputType*: EAnimAlphaInputType
    alpha*: float32
    bAlphaBoolEnabled*: uint8
    alphaBoolBlend*: FInputAlphaBoolBlend
    alphaCurveName*: FName
    alphaScaleBias*: FInputScaleBias
    alphaScaleBiasClamp*: FInputScaleBiasClamp
    lODThreshold*: int32

  FAnimNode_Inertialization* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    source*: FPoseLink
    filteredCurves*: TArray[FName]

  FAnimNode_LinkedAnimGraph* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
  
  FAnimNode_LinkedAnimLayer* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
  
  FAnimNode_SaveCachedPose* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    pose*: FPoseLink

  FAnimNode_SequencePlayerBase* {.inject, importcpp: "$1_",
                                  header: "UEGenBindings.h".} = object
  
  FInputScaleBiasClampState* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
  
  FAnimNode_SequencePlayer* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
  
  FInputScaleBiasClampConstants* {.inject, importcpp: "$1_",
                                   header: "UEGenBindings.h".} = object
    bMapRange*: bool
    bClampResult*: bool
    bInterpResult*: bool
    inRange*: FInputRange
    outRange*: FInputRange
    scale*: float32
    bias*: float32
    clampMin*: float32
    clampMax*: float32
    interpSpeedIncreasing*: float32
    interpSpeedDecreasing*: float32

  FAnimNode_SequencePlayer_Standalone* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
  
  FAnimNode_TransitionPoseEvaluator* {.inject, importcpp: "$1_",
                                       header: "UEGenBindings.h".} = object
    framesToCachePose*: int32
    dataSource*: EEvaluatorDataSource::Type

  FAnimNode_TransitionResult* {.inject, importcpp: "$1_",
                                header: "UEGenBindings.h".} = object
    bCanEnterTransition*: bool

  FAnimNotifyEventReference* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
  
  FAnimNode_SingleNode* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    sourcePose*: FPoseLink

  FPerBoneBlendWeights* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FAnimSyncMarker* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    markerName*: FName
    time*: float32

  FAssetCompileData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    asset*: TWeakObjectPtr[UObject]

  FAssetManagerSearchRules* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    assetScanPaths*: TArray[FString]
    includePatterns*: TArray[FString]
    excludePatterns*: TArray[FString]
    bHasBlueprintClasses*: bool
    bForceSynchronousScan*: bool
    bSkipVirtualPathExpansion*: bool
    bSkipManagerIncludeCheck*: bool

  FBaseAttenuationSettings* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    distanceAlgorithm*: EAttenuationDistanceModel
    attenuationShape*: EAttenuationShape::Type
    dBAttenuationAtMax*: float32
    falloffMode*: ENaturalSoundFalloffMode
    attenuationShapeExtents*: FVector
    coneOffset*: float32
    falloffDistance*: float32
    coneSphereRadius*: float32
    coneSphereFalloffDistance*: float32
    customAttenuationCurve*: FRuntimeFloatCurve

  FAudioVolumeSubmixSendSettings* {.inject, importcpp: "$1_",
                                    header: "UEGenBindings.h".} = object
    listenerLocationState*: EAudioVolumeLocationState
    submixSends*: TArray[FSoundSubmixSendInfo]

  FSoundSubmixSendInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    sendLevelControlMethod*: ESendLevelControlMethod
    sendStage*: ESubmixSendStage
    soundSubmix*: TObjectPtr[USoundSubmixBase]
    sendLevel*: float32
    disableManualSendClamp*: bool
    minSendLevel*: float32
    maxSendLevel*: float32
    minSendDistance*: float32
    maxSendDistance*: float32
    customSendLevelCurve*: FRuntimeFloatCurve

  FAudioVolumeSubmixOverrideSettings* {.inject, importcpp: "$1_",
                                        header: "UEGenBindings.h".} = object
    submix*: TObjectPtr[USoundSubmix]
    submixEffectChain*: TArray[TObjectPtr[USoundEffectSubmixPreset]]
    crossfadeTime*: float32

  FInteriorSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    exteriorVolume*: float32
    exteriorTime*: float32
    exteriorLPF*: float32
    exteriorLPFTime*: float32
    interiorVolume*: float32
    interiorTime*: float32
    interiorLPF*: float32
    interiorLPFTime*: float32

  FCollisionResponseContainer* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    worldStatic*: ECollisionResponse
    worldDynamic*: ECollisionResponse
    pawn*: ECollisionResponse
    visibility*: ECollisionResponse
    camera*: ECollisionResponse
    physicsBody*: ECollisionResponse
    vehicle*: ECollisionResponse
    destructible*: ECollisionResponse
    engineTraceChannel1*: ECollisionResponse
    engineTraceChannel2*: ECollisionResponse
    engineTraceChannel3*: ECollisionResponse
    engineTraceChannel4*: ECollisionResponse
    engineTraceChannel5*: ECollisionResponse
    engineTraceChannel6*: ECollisionResponse
    gameTraceChannel1*: ECollisionResponse
    gameTraceChannel2*: ECollisionResponse
    gameTraceChannel3*: ECollisionResponse
    gameTraceChannel4*: ECollisionResponse
    gameTraceChannel5*: ECollisionResponse
    gameTraceChannel6*: ECollisionResponse
    gameTraceChannel7*: ECollisionResponse
    gameTraceChannel8*: ECollisionResponse
    gameTraceChannel9*: ECollisionResponse
    gameTraceChannel10*: ECollisionResponse
    gameTraceChannel11*: ECollisionResponse
    gameTraceChannel12*: ECollisionResponse
    gameTraceChannel13*: ECollisionResponse
    gameTraceChannel14*: ECollisionResponse
    gameTraceChannel15*: ECollisionResponse
    gameTraceChannel16*: ECollisionResponse
    gameTraceChannel17*: ECollisionResponse
    gameTraceChannel18*: ECollisionResponse

  FBodyInstance* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    sleepFamily*: ESleepFamily
    bUseCCD*: uint8
    bIgnoreAnalyticCollisions*: uint8
    bNotifyRigidBodyCollision*: uint8
    bSmoothEdgeCollisions*: uint8
    positionSolverIterationCount*: uint8
    velocitySolverIterationCount*: uint8
    maxDepenetrationVelocity*: float32
    massInKgOverride*: float32
    linearDamping*: float32
    angularDamping*: float32
    cOMNudge*: FVector
    massScale*: float32
    inertiaTensorScale*: FVector
    walkableSlopeOverride*: FWalkableSlopeOverride
    physMaterialOverride*: TObjectPtr[UPhysicalMaterial]
    maxAngularVelocity*: float32
    customSleepThresholdMultiplier*: float32
    stabilizationThresholdMultiplier*: float32

  FWalkableSlopeOverride* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    walkableSlopeBehavior*: EWalkableSlopeBehavior
    walkableSlopeAngle*: float32

  FCachedAnimStateData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    stateMachineName*: FName
    stateName*: FName

  FCachedAnimStateArray* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    states*: TArray[FCachedAnimStateData]

  FCachedAnimAssetPlayerData* {.inject, importcpp: "$1_",
                                header: "UEGenBindings.h".} = object
    stateMachineName*: FName
    stateName*: FName

  FCachedAnimRelevancyData* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    stateMachineName*: FName
    stateName*: FName

  FCachedAnimTransitionData* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    stateMachineName*: FName
    fromStateName*: FName
    toStateName*: FName

  FCameraLensInterfaceClassSupport* {.inject, importcpp: "$1_",
                                      header: "UEGenBindings.h".} = object
  
  FCameraShakeStartParams* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bIsRestarting*: bool

  FCameraShakeUpdateParams* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    deltaTime*: float32
    shakeScale*: float32
    dynamicScale*: float32
    blendingWeight*: float32
    pOV*: FMinimalViewInfo

  FMinimalViewInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    location*: FVector
    rotation*: FRotator
    fOV*: float32
    orthoWidth*: float32
    orthoNearClipPlane*: float32
    orthoFarClipPlane*: float32
    aspectRatio*: float32
    bConstrainAspectRatio*: uint8
    bUseFieldOfViewForLOD*: uint8
    projectionMode*: ECameraProjectionMode::Type
    postProcessBlendWeight*: float32
    postProcessSettings*: FPostProcessSettings
    offCenterProjectionOffset*: FVector2D

  FCameraShakeScrubParams* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    absoluteTime*: float32
    shakeScale*: float32
    dynamicScale*: float32
    blendingWeight*: float32
    pOV*: FMinimalViewInfo

  FCameraShakeUpdateResult* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
  
  FCameraShakeStopParams* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bImmediately*: bool

  FCameraShakeDuration* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FCameraShakeInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FCanvasIcon* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    texture*: TObjectPtr[UTexture]
    u*: float32
    v*: float32
    uL*: float32
    vL*: float32

  FFindFloorResult* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bBlockingHit*: uint8
    bWalkableFloor*: uint8
    bLineTrace*: uint8
    floorDist*: float32
    lineDist*: float32
    hitResult*: FHitResult

  FMeshUVChannelInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FConstraintInstanceAccessor* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
  
  FCullDistanceSizePair* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    size*: float32
    cullDistance*: float32

  FNamedCurveValue* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName
    value*: float32

  FCurveTableRowHandle* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    curveTable*: TObjectPtr[UCurveTable]
    rowName*: FName

  FRuntimeVectorCurve* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FDataDrivenConsoleVariable* {.inject, importcpp: "$1_",
                                header: "UEGenBindings.h".} = object
  
  FDataTableRowHandle* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    dataTable*: TObjectPtr[UDataTable]
    rowName*: FName

  FDataTableCategoryHandle* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    dataTable*: TObjectPtr[UDataTable]
    columnName*: FName
    rowContents*: FName

  FDialogueContext* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    speaker*: TObjectPtr[UDialogueVoice]
    targets*: TArray[TObjectPtr[UDialogueVoice]]

  FFractureEffect* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    particleSystem*: TObjectPtr[UParticleSystem]
    sound*: TObjectPtr[USoundBase]

  FBasedPosition* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    base*: TObjectPtr[AActor]
    position*: FVector

  FPOV* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    location*: FVector
    rotation*: FRotator
    fOV*: float32

  FMeshBuildSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bUseMikkTSpace*: uint8
    bRecomputeNormals*: uint8
    bRecomputeTangents*: uint8
    bComputeWeightedNormals*: uint8
    bRemoveDegenerates*: uint8
    bBuildReversedIndexBuffer*: uint8
    bUseHighPrecisionTangentBasis*: uint8
    bUseFullPrecisionUVs*: uint8
    bUseBackwardsCompatibleF16TruncUVs*: uint8
    bGenerateLightmapUVs*: uint8
    bGenerateDistanceFieldAsIfTwoSided*: uint8
    bSupportFaceRemap*: uint8
    minLightmapResolution*: int32
    srcLightmapIndex*: int32
    dstLightmapIndex*: int32
    buildScale3D*: FVector
    distanceFieldResolutionScale*: float32
    distanceFieldReplacementMesh*: TObjectPtr[UStaticMesh]
    maxLumenMeshCards*: int32

  FSkeletalMeshBuildSettings* {.inject, importcpp: "$1_",
                                header: "UEGenBindings.h".} = object
    bRecomputeNormals*: uint8
    bRecomputeTangents*: uint8
    bUseMikkTSpace*: uint8
    bComputeWeightedNormals*: uint8
    bRemoveDegenerates*: uint8
    bUseHighPrecisionTangentBasis*: uint8
    bUseFullPrecisionUVs*: uint8
    bUseBackwardsCompatibleF16TruncUVs*: uint8
    thresholdPosition*: float32
    thresholdTangentNormal*: float32
    thresholdUV*: float32
    morphThresholdPosition*: float32

  FMeshNaniteSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bEnabled*: uint8
    positionPrecision*: int32
    keepPercentTriangles*: float32
    trimRelativeError*: float32
    fallbackPercentTriangles*: float32
    fallbackRelativeError*: float32

  FDamageEvent* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FRadialDamageParams* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    baseDamage*: float32
    minimumDamage*: float32
    innerRadius*: float32
    outerRadius*: float32
    damageFalloff*: float32

  FComponentReference* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    otherActor*: TObjectPtr[AActor]
    componentProperty*: FName

  FCollectionReference* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    collectionName*: FName

  FDepthFieldGlowInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bEnableGlow*: uint8
    glowColor*: FLinearColor
    glowOuterRadius*: FVector2D
    glowInnerRadius*: FVector2D

  FFontRenderInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bClipText*: uint8
    bEnableShadow*: uint8
    glowInfo*: FDepthFieldGlowInfo

  FCanvasUVTri* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    v0_Pos*: FVector2D
    v0_UV*: FVector2D
    v0_Color*: FLinearColor
    v1_Pos*: FVector2D
    v1_UV*: FVector2D
    v1_Color*: FLinearColor
    v2_Pos*: FVector2D
    v2_UV*: FVector2D
    v2_Color*: FLinearColor

  FExponentialHeightFogData* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    fogDensity*: float32
    fogHeightFalloff*: float32
    fogHeightOffset*: float32

  FForceFeedbackAttenuationSettings* {.inject, importcpp: "$1_",
                                       header: "UEGenBindings.h".} = object
  
  FPredictProjectilePathParams* {.inject, importcpp: "$1_",
                                  header: "UEGenBindings.h".} = object
    startLocation*: FVector
    launchVelocity*: FVector
    bTraceWithCollision*: bool
    projectileRadius*: float32
    maxSimTime*: float32
    bTraceWithChannel*: bool
    traceChannel*: ECollisionChannel
    actorsToIgnore*: TArray[TObjectPtr[AActor]]
    simFrequency*: float32
    overrideGravityZ*: float32
    drawDebugType*: EDrawDebugTrace::Type
    drawDebugTime*: float32
    bTraceComplex*: bool

  FPredictProjectilePathPointData* {.inject, importcpp: "$1_",
                                     header: "UEGenBindings.h".} = object
    location*: FVector
    velocity*: FVector
    time*: float32

  FPredictProjectilePathResult* {.inject, importcpp: "$1_",
                                  header: "UEGenBindings.h".} = object
    pathData*: TArray[FPredictProjectilePathPointData]
    lastTraceDestination*: FPredictProjectilePathPointData
    hitResult*: FHitResult

  FImportanceTexture* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FInputClampConstants* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bClampResult*: bool
    bInterpResult*: bool
    clampMin*: float32
    clampMax*: float32
    interpSpeedIncreasing*: float32
    interpSpeedDecreasing*: float32

  FInputClampState* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FFloatSpringState* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FVectorSpringState* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FQuaternionSpringState* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FDrawToRenderTargetContext* {.inject, importcpp: "$1_",
                                header: "UEGenBindings.h".} = object
  
  FMaterialProxySettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    textureSizingType*: ETextureSizingType
    textureSize*: FIntPoint
    targetTexelDensityPerMeter*: float32
    meshMaxScreenSizePercent*: float32
    meshMinDrawDistance*: float32
    gutterSpace*: float32
    metallicConstant*: float32
    roughnessConstant*: float32
    anisotropyConstant*: float32
    specularConstant*: float32
    opacityConstant*: float32
    opacityMaskConstant*: float32
    ambientOcclusionConstant*: float32
    blendMode*: EBlendMode
    bAllowTwoSidedMaterial*: uint8
    bNormalMap*: uint8
    bTangentMap*: uint8
    bMetallicMap*: uint8
    bRoughnessMap*: uint8
    bAnisotropyMap*: uint8
    bSpecularMap*: uint8
    bEmissiveMap*: uint8
    bOpacityMap*: uint8
    bOpacityMaskMap*: uint8
    bAmbientOcclusionMap*: uint8
    diffuseTextureSize*: FIntPoint
    normalTextureSize*: FIntPoint
    tangentTextureSize*: FIntPoint
    metallicTextureSize*: FIntPoint
    roughnessTextureSize*: FIntPoint
    anisotropyTextureSize*: FIntPoint
    specularTextureSize*: FIntPoint
    emissiveTextureSize*: FIntPoint
    opacityTextureSize*: FIntPoint
    opacityMaskTextureSize*: FIntPoint
    ambientOcclusionTextureSize*: FIntPoint

  FLODMappingData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    mapping*: TArray[int32]

  FComponentSync* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName
    syncOption*: ESyncOption

  FMaterialSpriteElement* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    material*: TObjectPtr[UMaterialInterface]
    distanceToOpacityCurve*: TObjectPtr[UCurveFloat]
    bSizeIsInScreenSpace*: uint8
    baseSizeX*: float32
    baseSizeY*: float32
    distanceToSizeCurve*: TObjectPtr[UCurveFloat]

  FScalarParameterValue* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    parameterInfo*: FMaterialParameterInfo
    parameterValue*: float32

  FVectorParameterValue* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    parameterInfo*: FMaterialParameterInfo
    parameterValue*: FLinearColor

  FDoubleVectorParameterValue* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    parameterInfo*: FMaterialParameterInfo

  FTextureParameterValue* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    parameterInfo*: FMaterialParameterInfo
    parameterValue*: TObjectPtr[UTexture]

  FRuntimeVirtualTextureParameterValue* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
    parameterInfo*: FMaterialParameterInfo
    parameterValue*: TObjectPtr[URuntimeVirtualTexture]

  FFontParameterValue* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    parameterInfo*: FMaterialParameterInfo
    fontValue*: TObjectPtr[UFont]
    fontPage*: int32

  FMeshReductionSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    percentTriangles*: float32
    percentVertices*: float32
    maxDeviation*: float32
    pixelError*: float32
    weldingThreshold*: float32
    hardAngleThreshold*: float32
    baseLODModel*: int32
    silhouetteImportance*: EMeshFeatureImportance::Type
    textureImportance*: EMeshFeatureImportance::Type
    shadingImportance*: EMeshFeatureImportance::Type
    bRecalculateNormals*: uint8
    bGenerateUniqueLightmapUVs*: uint8
    bKeepSymmetry*: uint8
    bVisibilityAided*: uint8
    bCullOccluded*: uint8
    terminationCriterion*: EStaticMeshReductionTerimationCriterion
    visibilityAggressiveness*: EMeshFeatureImportance::Type
    vertexColorImportance*: EMeshFeatureImportance::Type

  FMeshProxySettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    screenSize*: int32
    voxelSize*: float32
    materialSettings*: FMaterialProxySettings
    mergeDistance*: float32
    unresolvedGeometryColor*: FColor
    maxRayCastDist*: float32
    hardAngleThreshold*: float32
    lightMapResolution*: int32
    normalCalculationMethod*: EProxyNormalComputationMethod::Type
    landscapeCullingPrecision*: ELandscapeCullingPrecision::Type
    bCalculateCorrectLODModel*: uint8
    bOverrideVoxelSize*: uint8
    bOverrideTransferDistance*: uint8
    bUseHardAngleThreshold*: uint8
    bComputeLightMapResolution*: uint8
    bRecalculateNormals*: uint8
    bUseLandscapeCulling*: uint8
    bAllowDistanceField*: uint8
    bReuseMeshLightmapUVs*: uint8
    bGroupIdenticalMeshesForBaking*: uint8
    bCreateCollision*: uint8
    bAllowVertexColors*: uint8
    bGenerateLightmapUVs*: uint8
    bGenerateNaniteEnabledMesh*: uint8
    naniteProxyTrianglePercent*: float32

  FMeshMergingSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    targetLightMapResolution*: int32
    materialSettings*: FMaterialProxySettings
    specificLOD*: int32
    lODSelectionType*: EMeshLODSelectionType
    bGenerateLightMapUV*: uint8
    bComputedLightMapResolution*: uint8
    bPivotPointAtZero*: uint8
    bMergePhysicsData*: uint8
    bMergeMaterials*: uint8
    bCreateMergedMaterial*: uint8
    bBakeVertexDataToMesh*: uint8
    bUseVertexDataForBakingMaterial*: uint8
    bUseTextureBinning*: uint8
    bUseLandscapeCulling*: uint8
    bIncludeImposters*: uint8
    bGenerateNaniteEnabledMesh*: uint8
    naniteFallbackTrianglePercent*: float32

  FMeshInstancingSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    actorClassToUse*: TSubclassOf[AActor]
    instanceReplacementThreshold*: int32
    bSkipMeshesWithVertexColors*: bool
    bUseHLODVolumes*: bool
    iSMComponentToUse*: TSubclassOf[UInstancedStaticMeshComponent]

  FMeshApproximationSettings* {.inject, importcpp: "$1_",
                                header: "UEGenBindings.h".} = object
    outputType*: EMeshApproximationType
    approximationAccuracy*: float32
    clampVoxelDimension*: int32
    bAttemptAutoThickening*: bool
    targetMinThicknessMultiplier*: float32
    bIgnoreTinyParts*: bool
    tinyPartSizeMultiplier*: float32
    baseCapping*: EMeshApproximationBaseCappingType
    windingThreshold*: float32
    bFillGaps*: bool
    gapDistance*: float32
    occlusionMethod*: EOccludedGeometryFilteringPolicy
    bOccludeFromBottom*: bool
    simplifyMethod*: EMeshApproximationSimplificationPolicy
    targetTriCount*: int32
    trianglesPerM*: float32
    geometricDeviation*: float32
    groundClipping*: EMeshApproximationGroundPlaneClippingPolicy
    groundClippingZHeight*: float32
    bEstimateHardNormals*: bool
    hardNormalAngle*: float32
    uVGenerationMethod*: EMeshApproximationUVGenerationPolicy
    initialPatchCount*: int32
    curvatureAlignment*: float32
    mergingThreshold*: float32
    maxAngleDeviation*: float32
    bGenerateNaniteEnabledMesh*: bool
    naniteProxyTrianglePercent*: float32
    bSupportRayTracing*: bool
    bAllowDistanceField*: bool
    multiSamplingAA*: int32
    renderCaptureResolution*: int32
    materialSettings*: FMaterialProxySettings
    captureFieldOfView*: float32
    nearPlaneDist*: float32
    bUseRenderLODMeshes*: bool
    bEnableSimplifyPrePass*: bool
    bEnableParallelBaking*: bool
    bPrintDebugMessages*: bool
    bEmitFullDebugMesh*: bool

  FTrajectorySample* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    accumulatedSeconds*: float32
    accumulatedDistance*: float32
    position*: FVector
    localLinearVelocity*: FVector
    localLinearAcceleration*: FVector

  FTrajectorySampleRange* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    samples*: TArray[FTrajectorySample]
    sampleRate*: int32

  FNavAvoidanceMask* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bGroup0*: uint8
    bGroup1*: uint8
    bGroup2*: uint8
    bGroup3*: uint8
    bGroup4*: uint8
    bGroup5*: uint8
    bGroup6*: uint8
    bGroup7*: uint8
    bGroup8*: uint8
    bGroup9*: uint8
    bGroup10*: uint8
    bGroup11*: uint8
    bGroup12*: uint8
    bGroup13*: uint8
    bGroup14*: uint8
    bGroup15*: uint8
    bGroup16*: uint8
    bGroup17*: uint8
    bGroup18*: uint8
    bGroup19*: uint8
    bGroup20*: uint8
    bGroup21*: uint8
    bGroup22*: uint8
    bGroup23*: uint8
    bGroup24*: uint8
    bGroup25*: uint8
    bGroup26*: uint8
    bGroup27*: uint8
    bGroup28*: uint8
    bGroup29*: uint8
    bGroup30*: uint8
    bGroup31*: uint8

  FMovementProperties* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bCanCrouch*: uint8
    bCanJump*: uint8
    bCanWalk*: uint8
    bCanSwim*: uint8
    bCanFly*: uint8

  FNavAgentProperties* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    agentRadius*: float32
    agentHeight*: float32
    agentStepHeight*: float32
    navWalkingSearchHeightScale*: float32
    preferredNavData*: FSoftClassPath

  FNavDataConfig* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName
    color*: FColor
    defaultQueryExtent*: FVector
    navDataClass*: TSoftClassPtr[AActor]

  FNavigationLinkBase* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    direction*: ENavLinkDirection::Type

  FNavigationLink* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    left*: FVector
    right*: FVector

  FUniqueNetIdRepl* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FParticleSysParam* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    name*: FName
    paramType*: EParticleSysParamType
    scalar*: float32
    scalar_Low*: float32
    vector*: FVector
    vector_Low*: FVector
    color*: FColor
    actor*: TObjectPtr[AActor]
    material*: TObjectPtr[UMaterialInterface]

  FFXSystemSpawnParameters* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
  
  FPhysicalAnimationData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bIsLocalSimulation*: uint8
    orientationStrength*: float32
    angularVelocityStrength*: float32
    positionStrength*: float32
    velocityStrength*: float32
    maxLinearForce*: float32
    maxAngularForce*: float32

  FPhysicsAssetSolverSettings* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    positionIterations*: int32
    velocityIterations*: int32
    projectionIterations*: int32
    cullDistance*: float32
    maxDepenetrationVelocity*: float32
    fixedTimeStep*: float32

  FSolverIterations* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    solverIterations*: int32
    jointIterations*: int32
    collisionIterations*: int32
    solverPushOutIterations*: int32
    jointPushOutIterations*: int32
    collisionPushOutIterations*: int32

  FTViewTarget* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    target*: TObjectPtr[AActor]
    pOV*: FMinimalViewInfo
    playerState*: TObjectPtr[APlayerState]

  FViewTargetTransitionParams* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    blendTime*: float32
    blendFunction*: EViewTargetBlendFunction
    blendExp*: float32
    bLockOutgoing*: uint8

  FInputActionKeyMapping* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    actionName*: FName
    bShift*: uint8
    bCtrl*: uint8
    bAlt*: uint8
    bCmd*: uint8
    key*: FKey

  FInputAxisKeyMapping* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    axisName*: FName
    scale*: float32
    key*: FKey

  FInputActionSpeechMapping* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
  
  FQuartzPulseOverrideStep* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    numberOfPulses*: int32
    pulseDuration*: EQuartzCommandQuantization

  FQuartzTimeSignature* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    numBeats*: int32
    beatType*: EQuartzTimeSignatureQuantization
    optionalPulseOverride*: TArray[FQuartzPulseOverrideStep]

  FQuartzTransportTimeStamp* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    bars*: int32
    beat*: int32
    beatFraction*: float32
    seconds*: float32

  FQuartzQuantizationBoundary* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    quantization*: EQuartzCommandQuantization
    multiplier*: float32
    countingReferencePoint*: EQuarztQuantizationReference
    bFireOnClockStart*: bool
    bCancelCommandIfClockIsNotRunning*: bool
    bResetClockOnQueued*: bool
    bResumeClockOnQueued*: bool

  FQuartzClockSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    timeSignature*: FQuartzTimeSignature
    bIgnoreLevelChange*: bool

  FReverbSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bApplyReverb*: bool
    reverbEffect*: TObjectPtr[UReverbEffect]
    reverbPluginEffect*: TObjectPtr[USoundEffectSubmixPreset]
    volume*: float32
    fadeTime*: float32

  FColorGradePerRangeSettings* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    saturation*: FVector4
    contrast*: FVector4
    gamma*: FVector4
    gain*: FVector4
    offset*: FVector4

  FColorGradingSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    global*: FColorGradePerRangeSettings
    shadows*: FColorGradePerRangeSettings
    midtones*: FColorGradePerRangeSettings
    highlights*: FColorGradePerRangeSettings
    shadowsMax*: float32
    highlightsMin*: float32
    highlightsMax*: float32

  FFilmStockSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    slope*: float32
    toe*: float32
    shoulder*: float32
    blackClip*: float32
    whiteClip*: float32

  FGaussianSumBloomSettings* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    intensity*: float32
    threshold*: float32
    sizeScale*: float32
    filter1Size*: float32
    filter2Size*: float32
    filter3Size*: float32
    filter4Size*: float32
    filter5Size*: float32
    filter6Size*: float32
    filter1Tint*: FLinearColor
    filter2Tint*: FLinearColor
    filter3Tint*: FLinearColor
    filter4Tint*: FLinearColor
    filter5Tint*: FLinearColor
    filter6Tint*: FLinearColor

  FConvolutionBloomSettings* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    texture*: TObjectPtr[UTexture2D]
    scatterDispersion*: float32
    size*: float32
    centerUV*: FVector2D
    preFilterMin*: float32
    preFilterMax*: float32
    preFilterMult*: float32
    bufferScale*: float32

  FLensBloomSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    gaussianSum*: FGaussianSumBloomSettings
    convolution*: FConvolutionBloomSettings
    `method`*: EBloomMethod

  FLensImperfectionSettings* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    dirtMask*: TObjectPtr[UTexture]
    dirtMaskIntensity*: float32
    dirtMaskTint*: FLinearColor

  FLensSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bloom*: FLensBloomSettings
    imperfections*: FLensImperfectionSettings
    chromaticAberration*: float32

  FCameraExposureSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    `method`*: EAutoExposureMethod
    lowPercent*: float32
    highPercent*: float32
    minBrightness*: float32
    maxBrightness*: float32
    speedUp*: float32
    speedDown*: float32
    bias*: float32
    biasCurve*: TObjectPtr[UCurveFloat]
    meterMask*: TObjectPtr[UTexture]
    histogramLogMin*: float32
    histogramLogMax*: float32
    calibrationConstant*: float32
    applyPhysicalCameraExposure*: uint8

  FEngineShowFlagsSetting* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    showFlagName*: FString
    enabled*: bool

  FSceneViewExtensionIsActiveFunctor* {.inject, importcpp: "$1_",
                                        header: "UEGenBindings.h".} = object
  
  FSingleAnimationPlayData* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    animToPlay*: TObjectPtr[UAnimationAsset]
    bSavedLooping*: uint8
    bSavedPlaying*: uint8
    savedPosition*: float32
    savedPlayRate*: float32

  FSkeletalMaterial* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    materialInterface*: TObjectPtr[UMaterialInterface]
    materialSlotName*: FName
    uVChannelData*: FMeshUVChannelInfo

  FSkelMeshMergeSectionMapping* {.inject, importcpp: "$1_",
                                  header: "UEGenBindings.h".} = object
    sectionIDs*: TArray[int32]

  FSkelMeshMergeMeshUVTransforms* {.inject, importcpp: "$1_",
                                    header: "UEGenBindings.h".} = object
    uVTransforms*: TArray[FTransform]

  FSkelMeshMergeUVTransformMapping* {.inject, importcpp: "$1_",
                                      header: "UEGenBindings.h".} = object
    uVTransformsPerMesh*: TArray[FSkelMeshMergeMeshUVTransforms]

  FSkelMeshSkinWeightInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FVertexOffsetUsage* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
  
  FTentDistribution* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    tipAltitude*: float32
    tipValue*: float32
    width*: float32

  FSoundAttenuationPluginSettings* {.inject, importcpp: "$1_",
                                     header: "UEGenBindings.h".} = object
    spatializationPluginSettingsArray*: TArray[
        TObjectPtr[USpatializationPluginSourceSettingsBase]]
    occlusionPluginSettingsArray*: TArray[
        TObjectPtr[UOcclusionPluginSourceSettingsBase]]
    reverbPluginSettingsArray*: TArray[TObjectPtr[
        UReverbPluginSourceSettingsBase]]
    sourceDataOverridePluginSettingsArray*: TArray[
        TObjectPtr[USourceDataOverridePluginSourceSettingsBase]]

  FAttenuationSubmixSendSettings* {.inject, importcpp: "$1_",
                                    header: "UEGenBindings.h".} = object
    submix*: TObjectPtr[USoundSubmixBase]
    submixSendMethod*: ESubmixSendMethod
    submixSendLevelMin*: float32
    submixSendLevelMax*: float32
    submixSendDistanceMin*: float32
    submixSendDistanceMax*: float32
    manualSubmixSendLevel*: float32
    customSubmixSendCurve*: FRuntimeFloatCurve

  FSoundAttenuationSettings* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    bAttenuate*: uint8
    bSpatialize*: uint8
    bAttenuateWithLPF*: uint8
    bEnableListenerFocus*: uint8
    bEnableFocusInterpolation*: uint8
    bEnableOcclusion*: uint8
    bUseComplexCollisionForOcclusion*: uint8
    bEnableReverbSend*: uint8
    bEnablePriorityAttenuation*: uint8
    bApplyNormalizationToStereoSounds*: uint8
    bEnableLogFrequencyScaling*: uint8
    bEnableSubmixSends*: uint8
    bEnableSourceDataOverride*: uint8
    spatializationAlgorithm*: ESoundSpatializationAlgorithm
    binauralRadius*: float32
    absorptionMethod*: EAirAbsorptionMethod
    occlusionTraceChannel*: ECollisionChannel
    reverbSendMethod*: EReverbSendMethod
    priorityAttenuationMethod*: EPriorityAttenuationMethod
    omniRadius*: float32
    stereoSpread*: float32
    lPFRadiusMin*: float32
    lPFRadiusMax*: float32
    customLowpassAirAbsorptionCurve*: FRuntimeFloatCurve
    customHighpassAirAbsorptionCurve*: FRuntimeFloatCurve
    lPFFrequencyAtMin*: float32
    lPFFrequencyAtMax*: float32
    hPFFrequencyAtMin*: float32
    hPFFrequencyAtMax*: float32
    focusAzimuth*: float32
    nonFocusAzimuth*: float32
    focusDistanceScale*: float32
    nonFocusDistanceScale*: float32
    focusPriorityScale*: float32
    nonFocusPriorityScale*: float32
    focusVolumeAttenuation*: float32
    nonFocusVolumeAttenuation*: float32
    focusAttackInterpSpeed*: float32
    focusReleaseInterpSpeed*: float32
    occlusionLowPassFilterFrequency*: float32
    occlusionVolumeAttenuation*: float32
    occlusionInterpolationTime*: float32
    reverbWetLevelMin*: float32
    reverbWetLevelMax*: float32
    reverbDistanceMin*: float32
    reverbDistanceMax*: float32
    manualReverbSendLevel*: float32
    customReverbSendCurve*: FRuntimeFloatCurve
    submixSendSettings*: TArray[FAttenuationSubmixSendSettings]
    priorityAttenuationMin*: float32
    priorityAttenuationMax*: float32
    priorityAttenuationDistanceMin*: float32
    priorityAttenuationDistanceMax*: float32
    manualPriorityAttenuation*: float32
    customPriorityAttenuationCurve*: FRuntimeFloatCurve
    pluginSettings*: FSoundAttenuationPluginSettings

  FSoundClassProperties* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    volume*: float32
    pitch*: float32
    lowPassFilterFrequency*: float32
    attenuationDistanceScale*: float32
    lFEBleed*: float32
    voiceCenterChannelVolume*: float32
    radioFilterVolume*: float32
    radioFilterVolumeThreshold*: float32
    bApplyEffects*: uint8
    bAlwaysPlay*: uint8
    bIsUISound*: uint8
    bIsMusic*: uint8
    bCenterChannelOnly*: uint8
    bApplyAmbientVolumes*: uint8
    bReverb*: uint8
    default2DReverbSendAmount*: float32
    modulationSettings*: FSoundModulationDefaultSettings
    outputTarget*: EAudioOutputTarget::Type
    loadingBehavior*: ESoundWaveLoadingBehavior
    defaultSubmix*: TObjectPtr[USoundSubmix]

  FSoundModulationDefaultSettings* {.inject, importcpp: "$1_",
                                     header: "UEGenBindings.h".} = object
    volumeModulationDestination*: FSoundModulationDestinationSettings
    pitchModulationDestination*: FSoundModulationDestinationSettings
    highpassModulationDestination*: FSoundModulationDestinationSettings
    lowpassModulationDestination*: FSoundModulationDestinationSettings

  FSoundModulationDestinationSettings* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
    value*: float32
    modulator*: TObjectPtr[USoundModulatorBase]

  FPassiveSoundMixModifier* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    soundMix*: TObjectPtr[USoundMix]
    minVolumeThreshold*: float32
    maxVolumeThreshold*: float32

  FSoundConcurrencySettings* {.inject, importcpp: "$1_",
                               header: "UEGenBindings.h".} = object
    maxCount*: int32
    bLimitToOwner*: uint8
    resolutionRule*: EMaxConcurrentResolutionRule::Type
    retriggerTime*: float32
    volumeScaleMode*: EConcurrencyVolumeScaleMode
    volumeScaleAttackTime*: float32
    bVolumeScaleCanRelease*: uint8
    volumeScaleReleaseTime*: float32
    voiceStealReleaseTime*: float32

  FSourceEffectChainEntry* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    preset*: TObjectPtr[USoundEffectSourcePreset]
    bBypass*: uint8

  FSoundClassAdjuster* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    soundClassObject*: TObjectPtr[USoundClass]
    volumeAdjuster*: float32
    pitchAdjuster*: float32
    lowPassFilterFrequency*: float32
    bApplyToChildren*: uint8
    voiceCenterChannelVolumeAdjuster*: float32

  FSoundModulationDefaultRoutingSettings* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
    volumeRouting*: EModulationRouting
    pitchRouting*: EModulationRouting
    highpassRouting*: EModulationRouting
    lowpassRouting*: EModulationRouting

  FSoundSourceBusSendInfo* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    minSendLevel*: float32
    maxSendLevel*: float32
    minSendDistance*: float32
    maxSendDistance*: float32
    customSendLevelCurve*: FRuntimeFloatCurve

  FSoundSubmixSpectralAnalysisBandSettings* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
    bandFrequency*: float32
    attackTimeMsec*: int32
    releaseTimeMsec*: int32
    qFactor*: float32

  FSoundWaveSpectralData* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    frequencyHz*: float32
    magnitude*: float32
    normalizedMagnitude*: float32

  FSoundWaveSpectralDataPerSound* {.inject, importcpp: "$1_",
                                    header: "UEGenBindings.h".} = object
    spectralData*: TArray[FSoundWaveSpectralData]
    playbackTime*: float32
    soundWave*: TObjectPtr[USoundWave]

  FSoundWaveEnvelopeDataPerSound* {.inject, importcpp: "$1_",
                                    header: "UEGenBindings.h".} = object
    envelope*: float32
    playbackTime*: float32
    soundWave*: TObjectPtr[USoundWave]

  FSplinePoint* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    inputKey*: float32
    position*: FVector
    arriveTangent*: FVector
    leaveTangent*: FVector
    rotation*: FRotator
    scale*: FVector
    `type`*: ESplinePointType::Type

  FStaticMaterial* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    materialInterface*: TObjectPtr[UMaterialInterface]
    materialSlotName*: FName
    uVChannelData*: FMeshUVChannelInfo

  FEquirectProps* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    leftUVRect*: FBox2D
    rightUVRect*: FBox2D
    leftScale*: FVector2D
    rightScale*: FVector2D
    leftBias*: FVector2D
    rightBias*: FVector2D

  FSubsurfaceProfileStruct* {.inject, importcpp: "$1_",
                              header: "UEGenBindings.h".} = object
    surfaceAlbedo*: FLinearColor
    meanFreePathColor*: FLinearColor
    meanFreePathDistance*: float32
    worldUnitScale*: float32
    bEnableBurley*: bool
    tint*: FLinearColor
    scatterRadius*: float32
    subsurfaceColor*: FLinearColor
    falloffColor*: FLinearColor
    boundaryColorBleed*: FLinearColor
    extinctionScale*: float32
    normalScale*: float32
    scatteringDistribution*: float32
    iOR*: float32
    roughness0*: float32
    roughness1*: float32
    lobeMix*: float32
    transmissionTintColor*: FLinearColor

  FTextureSourceColorSettings* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    encodingOverride*: ETextureSourceEncoding
    colorSpace*: ETextureColorSpace
    redChromaticityCoordinate*: FVector2D
    greenChromaticityCoordinate*: FVector2D
    blueChromaticityCoordinate*: FVector2D
    whiteChromaticityCoordinate*: FVector2D
    chromaticAdaptationMethod*: ETextureChromaticAdaptationMethod

  FTypedElementDeletionOptions* {.inject, importcpp: "$1_",
                                  header: "UEGenBindings.h".} = object
    bVerifyDeletionCanHappen*: bool
    bWarnAboutReferences*: bool
    bWarnAboutSoftReferences*: bool

  FVoiceSettings* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    componentToAttachTo*: TObjectPtr[USceneComponent]
    attenuationSettings*: TObjectPtr[USoundAttenuation]
    sourceEffectChain*: TObjectPtr[USoundEffectSourcePresetChain]

  FStreamingSourceShape* {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object
    bUseGridLoadingRange*: bool
    radius*: float32
    bIsSector*: bool
    sectorAngle*: float32
    location*: FVector
    rotation*: FRotator

  FWorldPartitionStreamingQuerySource* {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object
    location*: FVector
    radius*: float32
    bUseGridLoadingRange*: bool
    dataLayers*: TArray[FName]
    bDataLayersOnly*: bool
    bSpatialQuery*: bool

  FLightmassWorldInfoSettings* {.inject, importcpp: "$1_",
                                 header: "UEGenBindings.h".} = object
    staticLightingLevelScale*: float32
    numIndirectLightingBounces*: int32
    numSkyLightingBounces*: int32
    indirectLightingQuality*: float32
    indirectLightingSmoothness*: float32
    environmentColor*: FColor
    environmentIntensity*: float32
    diffuseBoost*: float32
    volumeLightingMethod*: EVolumeLightingMethod
    bUseAmbientOcclusion*: uint8
    bGenerateAmbientOcclusionMaterialMask*: uint8
    bVisualizeMaterialDiffuse*: uint8
    bVisualizeAmbientOcclusion*: uint8
    bCompressLightmaps*: uint8
    volumetricLightmapDetailCellSize*: float32
    volumetricLightmapMaximumBrickMemoryMb*: float32
    volumetricLightmapSphericalHarmonicSmoothing*: float32
    volumeLightSamplePlacementScale*: float32
    directIlluminationOcclusionFraction*: float32
    indirectIlluminationOcclusionFraction*: float32
    occlusionExponent*: float32
    fullyOccludedSamplesFraction*: float32
    maxOcclusionDistance*: float32

  FOnProjectileBounceDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnProjectileStopDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformEventDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnAssetLoaded__DelegateSignature {.inject, importcpp: "$1_",
                                      header: "UEGenBindings.h".} = object of
      FScriptDelegate
  FOnAssetClassLoaded__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FScriptDelegate
  FOnInterpToResetDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnInterpToReverseDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnInterpToStopDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnInterpToWaitBeginDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnInterpToWaitEndDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnDataDrivenCVarChanged__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformDelegate__DelegateSignature {.inject, importcpp: "$1_",
      header: "UEGenBindings.h".} = object of FMulticastScriptDelegate
  FPlatformFailedToRegisterForRemoteNotificationsDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformReceivedLocalNotificationDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformReceivedRemoteNotificationDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformRegisteredForRemoteNotificationsDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformRegisteredForUserNotificationsDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformScreenOrientationChangedDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FPlatformStartupArgumentsDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FApplicationLifetimeDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FApplicationStartupArgumentsDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
  FOnLowPowerModeDelegate__DelegateSignature
      {.inject, importcpp: "$1_", header: "UEGenBindings.h".} = object of
      FMulticastScriptDelegate
proc `bOnlyRelevantToOwner`*(obj {.inject.}: AActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOnlyRelevantToOwner=`*(obj {.inject.}: AActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbOnlyRelevantToOwner(@)", header: "UEGenBindings.h".}
proc `bAlwaysRelevant`*(obj {.inject.}: AActorPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bAlwaysRelevant=`*(obj {.inject.}: AActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbAlwaysRelevant(@)", header: "UEGenBindings.h".}
proc `bHidden`*(obj {.inject.}: AActorPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bHidden=`*(obj {.inject.}: AActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbHidden(@)", header: "UEGenBindings.h".}
proc `bNetUseOwnerRelevancy`*(obj {.inject.}: AActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bNetUseOwnerRelevancy=`*(obj {.inject.}: AActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbNetUseOwnerRelevancy(@)", header: "UEGenBindings.h".}
proc `bAutoDestroyWhenFinished`*(obj {.inject.}: AActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoDestroyWhenFinished=`*(obj {.inject.}: AActorPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbAutoDestroyWhenFinished(@)", header: "UEGenBindings.h".}
proc `bCanBeDamaged`*(obj {.inject.}: AActorPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bCanBeDamaged=`*(obj {.inject.}: AActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbCanBeDamaged(@)", header: "UEGenBindings.h".}
proc `bFindCameraComponentWhenViewTarget`*(obj {.inject.}: AActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bFindCameraComponentWhenViewTarget=`*(obj {.inject.}: AActorPtr;
    val {.inject.}: uint8): void {.importcpp: "setbFindCameraComponentWhenViewTarget(@)",
                                   header: "UEGenBindings.h".}
proc `bGenerateOverlapEventsDuringLevelStreaming`*(obj {.inject.}: AActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bGenerateOverlapEventsDuringLevelStreaming=`*(obj {.inject.}: AActorPtr;
    val {.inject.}: uint8): void {.importcpp: "setbGenerateOverlapEventsDuringLevelStreaming(@)",
                                   header: "UEGenBindings.h".}
proc `bEnableAutoLODGeneration`*(obj {.inject.}: AActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableAutoLODGeneration=`*(obj {.inject.}: AActorPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbEnableAutoLODGeneration(@)", header: "UEGenBindings.h".}
proc `bReplicates`*(obj {.inject.}: AActorPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bReplicates=`*(obj {.inject.}: AActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbReplicates(@)", header: "UEGenBindings.h".}
proc `initialLifeSpan`*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `initialLifeSpan=`*(obj {.inject.}: AActorPtr; val {.inject.}: float32): void {.
    importcpp: "setinitialLifeSpan(@)", header: "UEGenBindings.h".}
proc `customTimeDilation`*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customTimeDilation=`*(obj {.inject.}: AActorPtr; val {.inject.}: float32): void {.
    importcpp: "setcustomTimeDilation(@)", header: "UEGenBindings.h".}
proc `netDormancy`*(obj {.inject.}: AActorPtr): ENetDormancy {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `netDormancy=`*(obj {.inject.}: AActorPtr; val {.inject.}: ENetDormancy): void {.
    importcpp: "setnetDormancy(@)", header: "UEGenBindings.h".}
proc `spawnCollisionHandlingMethod`*(obj {.inject.}: AActorPtr): ESpawnActorCollisionHandlingMethod {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spawnCollisionHandlingMethod=`*(obj {.inject.}: AActorPtr; val {.inject.}: ESpawnActorCollisionHandlingMethod): void {.
    importcpp: "setspawnCollisionHandlingMethod(@)", header: "UEGenBindings.h".}
proc `netCullDistanceSquared`*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `netCullDistanceSquared=`*(obj {.inject.}: AActorPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setnetCullDistanceSquared(@)", header: "UEGenBindings.h".}
proc `netUpdateFrequency`*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `netUpdateFrequency=`*(obj {.inject.}: AActorPtr; val {.inject.}: float32): void {.
    importcpp: "setnetUpdateFrequency(@)", header: "UEGenBindings.h".}
proc `minNetUpdateFrequency`*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minNetUpdateFrequency=`*(obj {.inject.}: AActorPtr; val {.inject.}: float32): void {.
    importcpp: "setminNetUpdateFrequency(@)", header: "UEGenBindings.h".}
proc `netPriority`*(obj {.inject.}: AActorPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `netPriority=`*(obj {.inject.}: AActorPtr; val {.inject.}: float32): void {.
    importcpp: "setnetPriority(@)", header: "UEGenBindings.h".}
proc `instigator`*(obj {.inject.}: AActorPtr): TObjectPtr[APawn] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `instigator=`*(obj {.inject.}: AActorPtr; val {.inject.}: TObjectPtr[APawn]): void {.
    importcpp: "setinstigator(@)", header: "UEGenBindings.h".}
proc `rootComponent`*(obj {.inject.}: AActorPtr): TObjectPtr[USceneComponent] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rootComponent=`*(obj {.inject.}: AActorPtr;
                       val {.inject.}: TObjectPtr[USceneComponent]): void {.
    importcpp: "setrootComponent(@)", header: "UEGenBindings.h".}
proc `pivotOffset`*(obj {.inject.}: AActorPtr): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `pivotOffset=`*(obj {.inject.}: AActorPtr; val {.inject.}: FVector): void {.
    importcpp: "setpivotOffset(@)", header: "UEGenBindings.h".}
proc `actorGuid`*(obj {.inject.}: AActorPtr): FGuid {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `actorGuid=`*(obj {.inject.}: AActorPtr; val {.inject.}: FGuid): void {.
    importcpp: "setactorGuid(@)", header: "UEGenBindings.h".}
proc `spriteScale`*(obj {.inject.}: AActorPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `spriteScale=`*(obj {.inject.}: AActorPtr; val {.inject.}: float32): void {.
    importcpp: "setspriteScale(@)", header: "UEGenBindings.h".}
proc `tags`*(obj {.inject.}: AActorPtr): var TArray[FName] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `tags=`*(obj {.inject.}: AActorPtr; val {.inject.}: TArray[FName]): void {.
    importcpp: "settags(@)", header: "UEGenBindings.h".}
proc wasRecentlyRendered*(obj {.inject.}: AActorPtr;
                          tolerance {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc tearOff*(obj {.inject.}: AActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setTickGroup*(obj {.inject.}: AActorPtr;
                   newTickGroup {.inject.}: ETickingGroup): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTickableWhenPaused*(obj {.inject.}: AActorPtr;
                            bTickableWhenPaused {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReplicates*(obj {.inject.}: AActorPtr; bInReplicates {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReplicateMovement*(obj {.inject.}: AActorPtr;
                           bInReplicateMovement {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRayTracingGroupId*(obj {.inject.}: AActorPtr;
                           inRaytracingGroupId {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOwner*(obj {.inject.}: AActorPtr; newOwner {.inject.}: AActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setNetDormancy*(obj {.inject.}: AActorPtr;
                     newDormancy {.inject.}: ENetDormancy): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLifeSpan*(obj {.inject.}: AActorPtr; inLifespan {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIsTemporarilyHiddenInEditor*(obj {.inject.}: AActorPtr;
                                     bIsHidden {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFolderPath*(obj {.inject.}: AActorPtr;
                    newFolderPath {.inject.}: var FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAutoDestroyWhenFinished*(obj {.inject.}: AActorPtr; bVal {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorTickInterval*(obj {.inject.}: AActorPtr;
                           tickInterval {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorTickEnabled*(obj {.inject.}: AActorPtr; bEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorScale3D*(obj {.inject.}: AActorPtr; newScale3D {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorRelativeScale3D*(obj {.inject.}: AActorPtr;
                              newRelativeScale {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorLabel*(obj {.inject.}: AActorPtr; newActorLabel {.inject.}: FString;
                    bMarkDirty {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setActorHiddenInGame*(obj {.inject.}: AActorPtr; bNewHidden {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorEnableCollision*(obj {.inject.}: AActorPtr;
                              bNewActorEnableCollision {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeTickPrerequisiteComponent*(obj {.inject.}: AActorPtr;
    prerequisiteComponent {.inject.}: UActorComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeTickPrerequisiteActor*(obj {.inject.}: AActorPtr;
                                  prerequisiteActor {.inject.}: AActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc prestreamTextures*(obj {.inject.}: AActorPtr; seconds {.inject.}: float32;
                        bEnableStreaming {.inject.}: bool;
                        cinematicTextureGroups {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeNoise*(obj {.inject.}: AActorPtr; loudness {.inject.}: float32;
                noiseInstigator {.inject.}: APawnPtr;
                noiseLocation {.inject.}: FVector; maxRange {.inject.}: float32;
                tag {.inject.}: FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc teleportTo*(obj {.inject.}: AActorPtr; destLocation {.inject.}: FVector;
                 destRotation {.inject.}: FRotator): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setActorTransform*(obj {.inject.}: AActorPtr;
                        newTransform {.inject.}: var FTransform;
                        bSweep {.inject.}: bool;
                        sweepHitResult {.inject.}: var FHitResult;
                        bTeleport {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setActorRotation*(obj {.inject.}: AActorPtr;
                       newRotation {.inject.}: FRotator;
                       bTeleportPhysics {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorRelativeTransform*(obj {.inject.}: AActorPtr;
                                newRelativeTransform {.inject.}: var FTransform;
                                bSweep {.inject.}: bool;
                                sweepHitResult {.inject.}: var FHitResult;
                                bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorRelativeRotation*(obj {.inject.}: AActorPtr;
                               newRelativeRotation {.inject.}: FRotator;
                               bSweep {.inject.}: bool;
                               sweepHitResult {.inject.}: var FHitResult;
                               bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorRelativeLocation*(obj {.inject.}: AActorPtr;
                               newRelativeLocation {.inject.}: FVector;
                               bSweep {.inject.}: bool;
                               sweepHitResult {.inject.}: var FHitResult;
                               bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorLocationAndRotation*(obj {.inject.}: AActorPtr;
                                  newLocation {.inject.}: FVector;
                                  newRotation {.inject.}: FRotator;
                                  bSweep {.inject.}: bool;
                                  sweepHitResult {.inject.}: var FHitResult;
                                  bTeleport {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorLocation*(obj {.inject.}: AActorPtr;
                       newLocation {.inject.}: FVector; bSweep {.inject.}: bool;
                       sweepHitResult {.inject.}: var FHitResult;
                       bTeleport {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getRootComponent*(obj {.inject.}: AActorPtr): USceneComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentsByClass*(obj {.inject.}: AActorPtr; componentClass {.inject.}: TSubclassOf[
    UActorComponent]): TArray[UActorComponentPtr] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getActorRotation*(obj {.inject.}: AActorPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorLocation*(obj {.inject.}: AActorPtr): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc detachFromActor*(obj {.inject.}: AActorPtr;
                      locationRule {.inject.}: EDetachmentRule;
                      rotationRule {.inject.}: EDetachmentRule;
                      scaleRule {.inject.}: EDetachmentRule): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc destroyActor*(obj {.inject.}: AActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc attachToComponent*(obj {.inject.}: AActorPtr;
                        parent {.inject.}: USceneComponentPtr;
                        socketName {.inject.}: FName;
                        locationRule {.inject.}: EAttachmentRule;
                        rotationRule {.inject.}: EAttachmentRule;
                        scaleRule {.inject.}: EAttachmentRule;
                        bWeldSimulatedBodies {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc attachToActor*(obj {.inject.}: AActorPtr; parentActor {.inject.}: AActorPtr;
                    socketName {.inject.}: FName;
                    locationRule {.inject.}: EAttachmentRule;
                    rotationRule {.inject.}: EAttachmentRule;
                    scaleRule {.inject.}: EAttachmentRule;
                    bWeldSimulatedBodies {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc attachRootComponentToActor*(obj {.inject.}: AActorPtr;
                                 inParentActor {.inject.}: AActorPtr;
                                 inSocketName {.inject.}: FName;
    attachLocationType {.inject.}: EAttachLocation::Type;
                                 bWeldSimulatedBodies {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc attachRootComponentTo*(obj {.inject.}: AActorPtr;
                            inParent {.inject.}: USceneComponentPtr;
                            inSocketName {.inject.}: FName;
    attachLocationType {.inject.}: EAttachLocation::Type;
                            bWeldSimulatedBodies {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActorWorldTransformKeepScale*(obj {.inject.}: AActorPtr;
                                      deltaTransform {.inject.}: var FTransform;
                                      bSweep {.inject.}: bool;
                                      sweepHitResult {.inject.}: var FHitResult;
                                      bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActorWorldTransform*(obj {.inject.}: AActorPtr;
                             deltaTransform {.inject.}: var FTransform;
                             bSweep {.inject.}: bool;
                             sweepHitResult {.inject.}: var FHitResult;
                             bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActorWorldRotation*(obj {.inject.}: AActorPtr;
                            deltaRotation {.inject.}: FRotator;
                            bSweep {.inject.}: bool;
                            sweepHitResult {.inject.}: var FHitResult;
                            bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActorWorldOffset*(obj {.inject.}: AActorPtr;
                          deltaLocation {.inject.}: FVector;
                          bSweep {.inject.}: bool;
                          sweepHitResult {.inject.}: var FHitResult;
                          bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActorLocalTransform*(obj {.inject.}: AActorPtr;
                             newTransform {.inject.}: var FTransform;
                             bSweep {.inject.}: bool;
                             sweepHitResult {.inject.}: var FHitResult;
                             bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActorLocalRotation*(obj {.inject.}: AActorPtr;
                            deltaRotation {.inject.}: FRotator;
                            bSweep {.inject.}: bool;
                            sweepHitResult {.inject.}: var FHitResult;
                            bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActorLocalOffset*(obj {.inject.}: AActorPtr;
                          deltaLocation {.inject.}: FVector;
                          bSweep {.inject.}: bool;
                          sweepHitResult {.inject.}: var FHitResult;
                          bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTemporarilyHiddenInEditor*(obj {.inject.}: AActorPtr;
                                  bIncludeParent {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isSelectable*(obj {.inject.}: AActorPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isOverlappingActor*(obj {.inject.}: AActorPtr; other {.inject.}: AActorPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isHiddenEdAtStartup*(obj {.inject.}: AActorPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isHiddenEd*(obj {.inject.}: AActorPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isEditable*(obj {.inject.}: AActorPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isChildActor*(obj {.inject.}: AActorPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isActorTickEnabled*(obj {.inject.}: AActorPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isActorBeingDestroyed*(obj {.inject.}: AActorPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasAuthority*(obj {.inject.}: AActorPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getVerticalDistanceTo*(obj {.inject.}: AActorPtr;
                            otherActor {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVelocity*(obj {.inject.}: AActorPtr): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getTransform*(obj {.inject.}: AActorPtr): FTransform {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getTickableWhenPaused*(obj {.inject.}: AActorPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSquaredHorizontalDistanceTo*(obj {.inject.}: AActorPtr;
                                     otherActor {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSquaredDistanceTo*(obj {.inject.}: AActorPtr;
                           otherActor {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRemoteRole*(obj {.inject.}: AActorPtr): ENetRole {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getRayTracingGroupId*(obj {.inject.}: AActorPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getParentComponent*(obj {.inject.}: AActorPtr): UChildActorComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getParentActor*(obj {.inject.}: AActorPtr): AActorPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getOwner*(obj {.inject.}: AActorPtr): AActorPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getOverlappingComponents*(obj {.inject.}: AActorPtr;
    overlappingComponents {.inject.}: var TArray[UPrimitiveComponentPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOverlappingActors*(obj {.inject.}: AActorPtr;
                           overlappingActors {.inject.}: var TArray[AActorPtr];
                           classFilter {.inject.}: TSubclassOf[AActor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocalRole*(obj {.inject.}: AActorPtr): ENetRole {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getLifeSpan*(obj {.inject.}: AActorPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getLevelTransform*(obj {.inject.}: AActorPtr): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLevel*(obj {.inject.}: AActorPtr): ULevelPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getInstigatorController*(obj {.inject.}: AActorPtr): AControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstigator*(obj {.inject.}: AActorPtr): APawnPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getInputVectorAxisValue*(obj {.inject.}: AActorPtr;
                              inputAxisKey {.inject.}: FKey): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputAxisValue*(obj {.inject.}: AActorPtr;
                        inputAxisName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputAxisKeyValue*(obj {.inject.}: AActorPtr;
                           inputAxisKey {.inject.}: FKey): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHorizontalDotProductTo*(obj {.inject.}: AActorPtr;
                                otherActor {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHorizontalDistanceTo*(obj {.inject.}: AActorPtr;
                              otherActor {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameTimeSinceCreation*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFolderPath*(obj {.inject.}: AActorPtr): FName {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getDotProductTo*(obj {.inject.}: AActorPtr; otherActor {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDistanceTo*(obj {.inject.}: AActorPtr; otherActor {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultActorLabel*(obj {.inject.}: AActorPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentsByTag*(obj {.inject.}: AActorPtr; componentClass {.inject.}: TSubclassOf[
    UActorComponent]; tag {.inject.}: FName): TArray[UActorComponentPtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentsByInterface*(obj {.inject.}: AActorPtr;
                               `interface` {.inject.}: TSubclassOf[UInterface]): TArray[UActorComponentPtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentByClass*(obj {.inject.}: AActorPtr; componentClass {.inject.}: TSubclassOf[
    UActorComponent]): UActorComponentPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getAttachParentSocketName*(obj {.inject.}: AActorPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAttachParentActor*(obj {.inject.}: AActorPtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAttachedActors*(obj {.inject.}: AActorPtr;
                        outActors {.inject.}: var TArray[AActorPtr];
                        bResetArray {.inject.}: bool;
                        bRecursivelyIncludeAttachedActors {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllChildActors*(obj {.inject.}: AActorPtr;
                        childActors {.inject.}: var TArray[AActorPtr];
                        bIncludeDescendants {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorUpVector*(obj {.inject.}: AActorPtr): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getActorTimeDilation*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorTickInterval*(obj {.inject.}: AActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorScale3D*(obj {.inject.}: AActorPtr): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getActorRightVector*(obj {.inject.}: AActorPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorRelativeScale3D*(obj {.inject.}: AActorPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorLabel*(obj {.inject.}: AActorPtr; bCreateIfNone {.inject.}: bool): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorForwardVector*(obj {.inject.}: AActorPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorEyesViewPoint*(obj {.inject.}: AActorPtr;
                            outLocation {.inject.}: var FVector;
                            outRotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorEnableCollision*(obj {.inject.}: AActorPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorBounds*(obj {.inject.}: AActorPtr;
                     bOnlyCollidingComponents {.inject.}: bool;
                     origin {.inject.}: var FVector;
                     boxExtent {.inject.}: var FVector;
                     bIncludeFromChildActors {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc forceNetUpdate*(obj {.inject.}: AActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc flushNetDormancy*(obj {.inject.}: AActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc finishAddComponent*(obj {.inject.}: AActorPtr;
                         component {.inject.}: UActorComponentPtr;
                         bManualAttachment {.inject.}: bool;
                         relativeTransform {.inject.}: var FTransform): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enableInput*(obj {.inject.}: AActorPtr;
                  playerController {.inject.}: APlayerControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc disableInput*(obj {.inject.}: AActorPtr;
                   playerController {.inject.}: APlayerControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc detachRootComponentFromParent*(obj {.inject.}: AActorPtr;
                                    bMaintainWorldPosition {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addTickPrerequisiteComponent*(obj {.inject.}: AActorPtr;
    prerequisiteComponent {.inject.}: UActorComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addTickPrerequisiteActor*(obj {.inject.}: AActorPtr;
                               prerequisiteActor {.inject.}: AActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addComponentByClass*(obj {.inject.}: AActorPtr;
                          class {.inject.}: TSubclassOf[UActorComponent];
                          bManualAttachment {.inject.}: bool;
                          relativeTransform {.inject.}: var FTransform;
                          bDeferredFinish {.inject.}: bool): UActorComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addComponent*(obj {.inject.}: AActorPtr; templateName {.inject.}: FName;
                   bManualAttachment {.inject.}: bool;
                   relativeTransform {.inject.}: var FTransform;
                   componentTemplateContext {.inject.}: UObjectPtr;
                   bDeferredFinish {.inject.}: bool): UActorComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc actorHasTag*(obj {.inject.}: AActorPtr; tag {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `componentTags`*(obj {.inject.}: UActorComponentPtr): var TArray[FName] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `componentTags=`*(obj {.inject.}: UActorComponentPtr;
                       val {.inject.}: TArray[FName]): void {.
    importcpp: "setcomponentTags(@)", header: "UEGenBindings.h".}
proc `bReplicates`*(obj {.inject.}: UActorComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReplicates=`*(obj {.inject.}: UActorComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbReplicates(@)", header: "UEGenBindings.h".}
proc `bAutoActivate`*(obj {.inject.}: UActorComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoActivate=`*(obj {.inject.}: UActorComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbAutoActivate(@)", header: "UEGenBindings.h".}
proc `bIsEditorOnly`*(obj {.inject.}: UActorComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsEditorOnly=`*(obj {.inject.}: UActorComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsEditorOnly(@)", header: "UEGenBindings.h".}
proc toggleActive*(obj {.inject.}: UActorComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTickGroup*(obj {.inject.}: UActorComponentPtr;
                   newTickGroup {.inject.}: ETickingGroup): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTickableWhenPaused*(obj {.inject.}: UActorComponentPtr;
                            bTickableWhenPaused {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIsReplicated*(obj {.inject.}: UActorComponentPtr;
                      shouldReplicate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setComponentTickIntervalAndCooldown*(obj {.inject.}: UActorComponentPtr;
    tickInterval {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setComponentTickInterval*(obj {.inject.}: UActorComponentPtr;
                               tickInterval {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setComponentTickEnabled*(obj {.inject.}: UActorComponentPtr;
                              bEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAutoActivate*(obj {.inject.}: UActorComponentPtr;
                      bNewAutoActivate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActive*(obj {.inject.}: UActorComponentPtr; bNewActive {.inject.}: bool;
                bReset {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc removeTickPrerequisiteComponent*(obj {.inject.}: UActorComponentPtr;
    prerequisiteComponent {.inject.}: UActorComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeTickPrerequisiteActor*(obj {.inject.}: UActorComponentPtr;
                                  prerequisiteActor {.inject.}: AActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc destroyComponent*(obj {.inject.}: UActorComponentPtr;
                       `object` {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isComponentTickEnabled*(obj {.inject.}: UActorComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isBeingDestroyed*(obj {.inject.}: UActorComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isActive*(obj {.inject.}: UActorComponentPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getOwner*(obj {.inject.}: UActorComponentPtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentTickInterval*(obj {.inject.}: UActorComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deactivate*(obj {.inject.}: UActorComponentPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc componentHasTag*(obj {.inject.}: UActorComponentPtr; tag {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addTickPrerequisiteComponent*(obj {.inject.}: UActorComponentPtr;
    prerequisiteComponent {.inject.}: UActorComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addTickPrerequisiteActor*(obj {.inject.}: UActorComponentPtr;
                               prerequisiteActor {.inject.}: AActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc activate*(obj {.inject.}: UActorComponentPtr; bReset {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeLocation`*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeLocation=`*(obj {.inject.}: USceneComponentPtr;
                          val {.inject.}: FVector): void {.
    importcpp: "setrelativeLocation(@)", header: "UEGenBindings.h".}
proc `relativeRotation`*(obj {.inject.}: USceneComponentPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeRotation=`*(obj {.inject.}: USceneComponentPtr;
                          val {.inject.}: FRotator): void {.
    importcpp: "setrelativeRotation(@)", header: "UEGenBindings.h".}
proc `relativeScale3D`*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeScale3D=`*(obj {.inject.}: USceneComponentPtr;
                         val {.inject.}: FVector): void {.
    importcpp: "setrelativeScale3D(@)", header: "UEGenBindings.h".}
proc `bAbsoluteLocation`*(obj {.inject.}: USceneComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAbsoluteLocation=`*(obj {.inject.}: USceneComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbAbsoluteLocation(@)", header: "UEGenBindings.h".}
proc `bAbsoluteRotation`*(obj {.inject.}: USceneComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAbsoluteRotation=`*(obj {.inject.}: USceneComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbAbsoluteRotation(@)", header: "UEGenBindings.h".}
proc `bAbsoluteScale`*(obj {.inject.}: USceneComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAbsoluteScale=`*(obj {.inject.}: USceneComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbAbsoluteScale(@)", header: "UEGenBindings.h".}
proc `bVisible`*(obj {.inject.}: USceneComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bVisible=`*(obj {.inject.}: USceneComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbVisible(@)", header: "UEGenBindings.h".}
proc `bShouldUpdatePhysicsVolume`*(obj {.inject.}: USceneComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldUpdatePhysicsVolume=`*(obj {.inject.}: USceneComponentPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbShouldUpdatePhysicsVolume(@)", header: "UEGenBindings.h".}
proc `bHiddenInGame`*(obj {.inject.}: USceneComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bHiddenInGame=`*(obj {.inject.}: USceneComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbHiddenInGame(@)", header: "UEGenBindings.h".}
proc `bUseAttachParentBound`*(obj {.inject.}: USceneComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseAttachParentBound=`*(obj {.inject.}: USceneComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbUseAttachParentBound(@)", header: "UEGenBindings.h".}
proc `mobility`*(obj {.inject.}: USceneComponentPtr): EComponentMobility::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mobility=`*(obj {.inject.}: USceneComponentPtr;
                  val {.inject.}: EComponentMobility::Type): void {.
    importcpp: "setmobility(@)", header: "UEGenBindings.h".}
proc `detailMode`*(obj {.inject.}: USceneComponentPtr): EDetailMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `detailMode=`*(obj {.inject.}: USceneComponentPtr;
                    val {.inject.}: EDetailMode): void {.
    importcpp: "setdetailMode(@)", header: "UEGenBindings.h".}
proc toggleVisibility*(obj {.inject.}: USceneComponentPtr;
                       bPropagateToChildren {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWorldScale3D*(obj {.inject.}: USceneComponentPtr;
                      newScale {.inject.}: FVector): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setVisibility*(obj {.inject.}: USceneComponentPtr;
                    bNewVisibility {.inject.}: bool;
                    bPropagateToChildren {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShouldUpdatePhysicsVolume*(obj {.inject.}: USceneComponentPtr;
                                   bInShouldUpdatePhysicsVolume {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRelativeScale3D*(obj {.inject.}: USceneComponentPtr;
                         newScale3D {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMobility*(obj {.inject.}: USceneComponentPtr;
                  newMobility {.inject.}: EComponentMobility::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setHiddenInGame*(obj {.inject.}: USceneComponentPtr;
                      newHidden {.inject.}: bool;
                      bPropagateToChildren {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAbsolute*(obj {.inject.}: USceneComponentPtr;
                  bNewAbsoluteLocation {.inject.}: bool;
                  bNewAbsoluteRotation {.inject.}: bool;
                  bNewAbsoluteScale {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetRelativeTransform*(obj {.inject.}: USceneComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWorldTransform*(obj {.inject.}: USceneComponentPtr;
                        newTransform {.inject.}: var FTransform;
                        bSweep {.inject.}: bool;
                        sweepHitResult {.inject.}: var FHitResult;
                        bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setWorldRotation*(obj {.inject.}: USceneComponentPtr;
                       newRotation {.inject.}: FRotator; bSweep {.inject.}: bool;
                       sweepHitResult {.inject.}: var FHitResult;
                       bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setWorldLocationAndRotation*(obj {.inject.}: USceneComponentPtr;
                                  newLocation {.inject.}: FVector;
                                  newRotation {.inject.}: FRotator;
                                  bSweep {.inject.}: bool;
                                  sweepHitResult {.inject.}: var FHitResult;
                                  bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWorldLocation*(obj {.inject.}: USceneComponentPtr;
                       newLocation {.inject.}: FVector; bSweep {.inject.}: bool;
                       sweepHitResult {.inject.}: var FHitResult;
                       bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setRelativeTransform*(obj {.inject.}: USceneComponentPtr;
                           newTransform {.inject.}: var FTransform;
                           bSweep {.inject.}: bool;
                           sweepHitResult {.inject.}: var FHitResult;
                           bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRelativeRotation*(obj {.inject.}: USceneComponentPtr;
                          newRotation {.inject.}: FRotator;
                          bSweep {.inject.}: bool;
                          sweepHitResult {.inject.}: var FHitResult;
                          bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRelativeLocationAndRotation*(obj {.inject.}: USceneComponentPtr;
                                     newLocation {.inject.}: FVector;
                                     newRotation {.inject.}: FRotator;
                                     bSweep {.inject.}: bool;
                                     sweepHitResult {.inject.}: var FHitResult;
                                     bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRelativeLocation*(obj {.inject.}: USceneComponentPtr;
                          newLocation {.inject.}: FVector;
                          bSweep {.inject.}: bool;
                          sweepHitResult {.inject.}: var FHitResult;
                          bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentToWorld*(obj {.inject.}: USceneComponentPtr): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentScale*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentRotation*(obj {.inject.}: USceneComponentPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentLocation*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc detachFromComponent*(obj {.inject.}: USceneComponentPtr;
                          locationRule {.inject.}: EDetachmentRule;
                          rotationRule {.inject.}: EDetachmentRule;
                          scaleRule {.inject.}: EDetachmentRule;
                          bCallModify {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc attachToComponent*(obj {.inject.}: USceneComponentPtr;
                        parent {.inject.}: USceneComponentPtr;
                        socketName {.inject.}: FName;
                        locationRule {.inject.}: EAttachmentRule;
                        rotationRule {.inject.}: EAttachmentRule;
                        scaleRule {.inject.}: EAttachmentRule;
                        bWeldSimulatedBodies {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc attachTo*(obj {.inject.}: USceneComponentPtr;
               inParent {.inject.}: USceneComponentPtr;
               inSocketName {.inject.}: FName;
               attachType {.inject.}: EAttachLocation::Type;
               bWeldSimulatedBodies {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addWorldTransformKeepScale*(obj {.inject.}: USceneComponentPtr;
                                 deltaTransform {.inject.}: var FTransform;
                                 bSweep {.inject.}: bool;
                                 sweepHitResult {.inject.}: var FHitResult;
                                 bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addWorldTransform*(obj {.inject.}: USceneComponentPtr;
                        deltaTransform {.inject.}: var FTransform;
                        bSweep {.inject.}: bool;
                        sweepHitResult {.inject.}: var FHitResult;
                        bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addWorldRotation*(obj {.inject.}: USceneComponentPtr;
                       deltaRotation {.inject.}: FRotator;
                       bSweep {.inject.}: bool;
                       sweepHitResult {.inject.}: var FHitResult;
                       bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addWorldOffset*(obj {.inject.}: USceneComponentPtr;
                     deltaLocation {.inject.}: FVector; bSweep {.inject.}: bool;
                     sweepHitResult {.inject.}: var FHitResult;
                     bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addRelativeRotation*(obj {.inject.}: USceneComponentPtr;
                          deltaRotation {.inject.}: FRotator;
                          bSweep {.inject.}: bool;
                          sweepHitResult {.inject.}: var FHitResult;
                          bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addRelativeLocation*(obj {.inject.}: USceneComponentPtr;
                          deltaLocation {.inject.}: FVector;
                          bSweep {.inject.}: bool;
                          sweepHitResult {.inject.}: var FHitResult;
                          bTeleport {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addLocalTransform*(obj {.inject.}: USceneComponentPtr;
                        deltaTransform {.inject.}: var FTransform;
                        bSweep {.inject.}: bool;
                        sweepHitResult {.inject.}: var FHitResult;
                        bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addLocalRotation*(obj {.inject.}: USceneComponentPtr;
                       deltaRotation {.inject.}: FRotator;
                       bSweep {.inject.}: bool;
                       sweepHitResult {.inject.}: var FHitResult;
                       bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addLocalOffset*(obj {.inject.}: USceneComponentPtr;
                     deltaLocation {.inject.}: FVector; bSweep {.inject.}: bool;
                     sweepHitResult {.inject.}: var FHitResult;
                     bTeleport {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isVisible*(obj {.inject.}: USceneComponentPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isSimulatingPhysics*(obj {.inject.}: USceneComponentPtr;
                          boneName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isAnySimulatingPhysics*(obj {.inject.}: USceneComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUpVector*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSocketTransform*(obj {.inject.}: USceneComponentPtr;
                         inSocketName {.inject.}: FName;
                         transformSpace {.inject.}: ERelativeTransformSpace): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSocketRotation*(obj {.inject.}: USceneComponentPtr;
                        inSocketName {.inject.}: FName): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSocketQuaternion*(obj {.inject.}: USceneComponentPtr;
                          inSocketName {.inject.}: FName): FQuat {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSocketLocation*(obj {.inject.}: USceneComponentPtr;
                        inSocketName {.inject.}: FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getShouldUpdatePhysicsVolume*(obj {.inject.}: USceneComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRightVector*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRelativeTransform*(obj {.inject.}: USceneComponentPtr): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicsVolume*(obj {.inject.}: USceneComponentPtr): APhysicsVolumePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getParentComponents*(obj {.inject.}: USceneComponentPtr;
                          parents {.inject.}: var TArray[USceneComponentPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumChildrenComponents*(obj {.inject.}: USceneComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getForwardVector*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentVelocity*(obj {.inject.}: USceneComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getChildrenComponents*(obj {.inject.}: USceneComponentPtr;
                            bIncludeAllDescendants {.inject.}: bool;
                            children {.inject.}: var TArray[USceneComponentPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getChildComponent*(obj {.inject.}: USceneComponentPtr;
                        childIndex {.inject.}: int32): USceneComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAttachSocketName*(obj {.inject.}: USceneComponentPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAttachParent*(obj {.inject.}: USceneComponentPtr): USceneComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllSocketNames*(obj {.inject.}: USceneComponentPtr): TArray[FName] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc doesSocketExist*(obj {.inject.}: USceneComponentPtr;
                      inSocketName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc detachFromParent*(obj {.inject.}: USceneComponentPtr;
                       bMaintainWorldPosition {.inject.}: bool;
                       bCallModify {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `minDrawDistance`*(obj {.inject.}: UPrimitiveComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minDrawDistance=`*(obj {.inject.}: UPrimitiveComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setminDrawDistance(@)", header: "UEGenBindings.h".}
proc `lDMaxDrawDistance`*(obj {.inject.}: UPrimitiveComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lDMaxDrawDistance=`*(obj {.inject.}: UPrimitiveComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setlDMaxDrawDistance(@)", header: "UEGenBindings.h".}
proc `cachedMaxDrawDistance`*(obj {.inject.}: UPrimitiveComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cachedMaxDrawDistance=`*(obj {.inject.}: UPrimitiveComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setcachedMaxDrawDistance(@)", header: "UEGenBindings.h".}
proc `indirectLightingCacheQuality`*(obj {.inject.}: UPrimitiveComponentPtr): EIndirectLightingCacheQuality {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `indirectLightingCacheQuality=`*(obj {.inject.}: UPrimitiveComponentPtr;
    val {.inject.}: EIndirectLightingCacheQuality): void {.
    importcpp: "setindirectLightingCacheQuality(@)", header: "UEGenBindings.h".}
proc `lightmapType`*(obj {.inject.}: UPrimitiveComponentPtr): ELightmapType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightmapType=`*(obj {.inject.}: UPrimitiveComponentPtr;
                      val {.inject.}: ELightmapType): void {.
    importcpp: "setlightmapType(@)", header: "UEGenBindings.h".}
proc `bEnableAutoLODGeneration`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableAutoLODGeneration=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbEnableAutoLODGeneration(@)", header: "UEGenBindings.h".}
proc `excludeForSpecificHLODLevels`*(obj {.inject.}: UPrimitiveComponentPtr): var TArray[
    int32] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `excludeForSpecificHLODLevels=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                      val {.inject.}: TArray[int32]): void {.
    importcpp: "setexcludeForSpecificHLODLevels(@)", header: "UEGenBindings.h".}
proc `hLODBatchingPolicy`*(obj {.inject.}: UPrimitiveComponentPtr): EHLODBatchingPolicy {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `hLODBatchingPolicy=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: EHLODBatchingPolicy): void {.
    importcpp: "sethLODBatchingPolicy(@)", header: "UEGenBindings.h".}
proc `bNeverDistanceCull`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bNeverDistanceCull=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbNeverDistanceCull(@)", header: "UEGenBindings.h".}
proc `bAlwaysCreatePhysicsState`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAlwaysCreatePhysicsState=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbAlwaysCreatePhysicsState(@)", header: "UEGenBindings.h".}
proc `bGenerateOverlapEvents`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bGenerateOverlapEvents=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbGenerateOverlapEvents(@)", header: "UEGenBindings.h".}
proc `bMultiBodyOverlap`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bMultiBodyOverlap=`*(obj {.inject.}: UPrimitiveComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbMultiBodyOverlap(@)", header: "UEGenBindings.h".}
proc `bTraceComplexOnMove`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bTraceComplexOnMove=`*(obj {.inject.}: UPrimitiveComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbTraceComplexOnMove(@)", header: "UEGenBindings.h".}
proc `bReturnMaterialOnMove`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReturnMaterialOnMove=`*(obj {.inject.}: UPrimitiveComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbReturnMaterialOnMove(@)", header: "UEGenBindings.h".}
proc `bAllowCullDistanceVolume`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAllowCullDistanceVolume=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbAllowCullDistanceVolume(@)", header: "UEGenBindings.h".}
proc `bVisibleInReflectionCaptures`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bVisibleInReflectionCaptures=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbVisibleInReflectionCaptures(@)", header: "UEGenBindings.h".}
proc `bVisibleInRealTimeSkyCaptures`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bVisibleInRealTimeSkyCaptures=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbVisibleInRealTimeSkyCaptures(@)", header: "UEGenBindings.h".}
proc `bVisibleInRayTracing`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bVisibleInRayTracing=`*(obj {.inject.}: UPrimitiveComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbVisibleInRayTracing(@)", header: "UEGenBindings.h".}
proc `bRenderInMainPass`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRenderInMainPass=`*(obj {.inject.}: UPrimitiveComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbRenderInMainPass(@)", header: "UEGenBindings.h".}
proc `bRenderInDepthPass`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRenderInDepthPass=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbRenderInDepthPass(@)", header: "UEGenBindings.h".}
proc `bReceivesDecals`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReceivesDecals=`*(obj {.inject.}: UPrimitiveComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbReceivesDecals(@)", header: "UEGenBindings.h".}
proc `bOwnerNoSee`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOwnerNoSee=`*(obj {.inject.}: UPrimitiveComponentPtr;
                     val {.inject.}: uint8): void {.
    importcpp: "setbOwnerNoSee(@)", header: "UEGenBindings.h".}
proc `bOnlyOwnerSee`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOnlyOwnerSee=`*(obj {.inject.}: UPrimitiveComponentPtr;
                       val {.inject.}: uint8): void {.
    importcpp: "setbOnlyOwnerSee(@)", header: "UEGenBindings.h".}
proc `bTreatAsBackgroundForOcclusion`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bTreatAsBackgroundForOcclusion=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbTreatAsBackgroundForOcclusion(@)", header: "UEGenBindings.h".}
proc `bUseAsOccluder`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseAsOccluder=`*(obj {.inject.}: UPrimitiveComponentPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbUseAsOccluder(@)", header: "UEGenBindings.h".}
proc `bForceMipStreaming`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceMipStreaming=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbForceMipStreaming(@)", header: "UEGenBindings.h".}
proc `castShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `castShadow=`*(obj {.inject.}: UPrimitiveComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setcastShadow(@)", header: "UEGenBindings.h".}
proc `bEmissiveLightSource`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEmissiveLightSource=`*(obj {.inject.}: UPrimitiveComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbEmissiveLightSource(@)", header: "UEGenBindings.h".}
proc `bAffectDynamicIndirectLighting`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAffectDynamicIndirectLighting=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbAffectDynamicIndirectLighting(@)", header: "UEGenBindings.h".}
proc `bAffectDistanceFieldLighting`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAffectDistanceFieldLighting=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbAffectDistanceFieldLighting(@)", header: "UEGenBindings.h".}
proc `bCastDynamicShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastDynamicShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbCastDynamicShadow(@)", header: "UEGenBindings.h".}
proc `bCastStaticShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastStaticShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbCastStaticShadow(@)", header: "UEGenBindings.h".}
proc `bCastVolumetricTranslucentShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastVolumetricTranslucentShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
    val {.inject.}: uint8): void {.importcpp: "setbCastVolumetricTranslucentShadow(@)",
                                   header: "UEGenBindings.h".}
proc `bCastContactShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastContactShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbCastContactShadow(@)", header: "UEGenBindings.h".}
proc `bSelfShadowOnly`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSelfShadowOnly=`*(obj {.inject.}: UPrimitiveComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbSelfShadowOnly(@)", header: "UEGenBindings.h".}
proc `bCastFarShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastFarShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbCastFarShadow(@)", header: "UEGenBindings.h".}
proc `bCastInsetShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastInsetShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbCastInsetShadow(@)", header: "UEGenBindings.h".}
proc `bCastCinematicShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastCinematicShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbCastCinematicShadow(@)", header: "UEGenBindings.h".}
proc `bCastHiddenShadow`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastHiddenShadow=`*(obj {.inject.}: UPrimitiveComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbCastHiddenShadow(@)", header: "UEGenBindings.h".}
proc `bCastShadowAsTwoSided`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastShadowAsTwoSided=`*(obj {.inject.}: UPrimitiveComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbCastShadowAsTwoSided(@)", header: "UEGenBindings.h".}
proc `bLightAttachmentsAsGroup`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bLightAttachmentsAsGroup=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbLightAttachmentsAsGroup(@)", header: "UEGenBindings.h".}
proc `bExcludeFromLightAttachmentGroup`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bExcludeFromLightAttachmentGroup=`*(obj {.inject.}: UPrimitiveComponentPtr;
    val {.inject.}: uint8): void {.importcpp: "setbExcludeFromLightAttachmentGroup(@)",
                                   header: "UEGenBindings.h".}
proc `bReceiveMobileCSMShadows`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReceiveMobileCSMShadows=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbReceiveMobileCSMShadows(@)", header: "UEGenBindings.h".}
proc `bSingleSampleShadowFromStationaryLights`*(
    obj {.inject.}: UPrimitiveComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bSingleSampleShadowFromStationaryLights=`*(
    obj {.inject.}: UPrimitiveComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbSingleSampleShadowFromStationaryLights(@)",
    header: "UEGenBindings.h".}
proc `bIgnoreRadialImpulse`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIgnoreRadialImpulse=`*(obj {.inject.}: UPrimitiveComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreRadialImpulse(@)", header: "UEGenBindings.h".}
proc `bIgnoreRadialForce`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIgnoreRadialForce=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreRadialForce(@)", header: "UEGenBindings.h".}
proc `bApplyImpulseOnDamage`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bApplyImpulseOnDamage=`*(obj {.inject.}: UPrimitiveComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbApplyImpulseOnDamage(@)", header: "UEGenBindings.h".}
proc `bReplicatePhysicsToAutonomousProxy`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReplicatePhysicsToAutonomousProxy=`*(
    obj {.inject.}: UPrimitiveComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbReplicatePhysicsToAutonomousProxy(@)",
    header: "UEGenBindings.h".}
proc `bRenderCustomDepth`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRenderCustomDepth=`*(obj {.inject.}: UPrimitiveComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbRenderCustomDepth(@)", header: "UEGenBindings.h".}
proc `bVisibleInSceneCaptureOnly`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bVisibleInSceneCaptureOnly=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbVisibleInSceneCaptureOnly(@)", header: "UEGenBindings.h".}
proc `bHiddenInSceneCapture`*(obj {.inject.}: UPrimitiveComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bHiddenInSceneCapture=`*(obj {.inject.}: UPrimitiveComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbHiddenInSceneCapture(@)", header: "UEGenBindings.h".}
proc `canCharacterStepUpOn`*(obj {.inject.}: UPrimitiveComponentPtr): ECanBeCharacterBase {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `canCharacterStepUpOn=`*(obj {.inject.}: UPrimitiveComponentPtr;
                              val {.inject.}: ECanBeCharacterBase): void {.
    importcpp: "setcanCharacterStepUpOn(@)", header: "UEGenBindings.h".}
proc `lightingChannels`*(obj {.inject.}: UPrimitiveComponentPtr): FLightingChannels {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightingChannels=`*(obj {.inject.}: UPrimitiveComponentPtr;
                          val {.inject.}: FLightingChannels): void {.
    importcpp: "setlightingChannels(@)", header: "UEGenBindings.h".}
proc `rayTracingGroupId`*(obj {.inject.}: UPrimitiveComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rayTracingGroupId=`*(obj {.inject.}: UPrimitiveComponentPtr;
                           val {.inject.}: int32): void {.
    importcpp: "setrayTracingGroupId(@)", header: "UEGenBindings.h".}
proc `customDepthStencilValue`*(obj {.inject.}: UPrimitiveComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customDepthStencilValue=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setcustomDepthStencilValue(@)", header: "UEGenBindings.h".}
proc `translucencySortPriority`*(obj {.inject.}: UPrimitiveComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `translucencySortPriority=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                  val {.inject.}: int32): void {.
    importcpp: "settranslucencySortPriority(@)", header: "UEGenBindings.h".}
proc `translucencySortDistanceOffset`*(obj {.inject.}: UPrimitiveComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `translucencySortDistanceOffset=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                        val {.inject.}: float32): void {.
    importcpp: "settranslucencySortDistanceOffset(@)", header: "UEGenBindings.h".}
proc `runtimeVirtualTextures`*(obj {.inject.}: UPrimitiveComponentPtr): var TArray[
    TObjectPtr[URuntimeVirtualTexture]] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `runtimeVirtualTextures=`*(obj {.inject.}: UPrimitiveComponentPtr;
    val {.inject.}: TArray[TObjectPtr[URuntimeVirtualTexture]]): void {.
    importcpp: "setruntimeVirtualTextures(@)", header: "UEGenBindings.h".}
proc `virtualTextureRenderPassType`*(obj {.inject.}: UPrimitiveComponentPtr): ERuntimeVirtualTextureMainPassType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `virtualTextureRenderPassType=`*(obj {.inject.}: UPrimitiveComponentPtr;
    val {.inject.}: ERuntimeVirtualTextureMainPassType): void {.
    importcpp: "setvirtualTextureRenderPassType(@)", header: "UEGenBindings.h".}
proc `bodyInstance`*(obj {.inject.}: UPrimitiveComponentPtr): FBodyInstance {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bodyInstance=`*(obj {.inject.}: UPrimitiveComponentPtr;
                      val {.inject.}: FBodyInstance): void {.
    importcpp: "setbodyInstance(@)", header: "UEGenBindings.h".}
proc `rayTracingGroupCullingPriority`*(obj {.inject.}: UPrimitiveComponentPtr): ERayTracingGroupCullingPriority {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rayTracingGroupCullingPriority=`*(obj {.inject.}: UPrimitiveComponentPtr;
    val {.inject.}: ERayTracingGroupCullingPriority): void {.
    importcpp: "setrayTracingGroupCullingPriority(@)", header: "UEGenBindings.h".}
proc `customDepthStencilWriteMask`*(obj {.inject.}: UPrimitiveComponentPtr): ERendererStencilMask {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customDepthStencilWriteMask=`*(obj {.inject.}: UPrimitiveComponentPtr;
                                     val {.inject.}: ERendererStencilMask): void {.
    importcpp: "setcustomDepthStencilWriteMask(@)", header: "UEGenBindings.h".}
proc wasRecentlyRendered*(obj {.inject.}: UPrimitiveComponentPtr;
                          tolerance {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wakeRigidBody*(obj {.inject.}: UPrimitiveComponentPtr;
                    boneName {.inject.}: FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc wakeAllRigidBodies*(obj {.inject.}: UPrimitiveComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWalkableSlopeOverride*(obj {.inject.}: UPrimitiveComponentPtr;
    newOverride {.inject.}: var FWalkableSlopeOverride): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVisibleInSceneCaptureOnly*(obj {.inject.}: UPrimitiveComponentPtr;
                                   bValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVisibleInRayTracing*(obj {.inject.}: UPrimitiveComponentPtr;
                             bNewVisibleInRayTracing {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVectorParameterForDefaultCustomPrimitiveData*(
    obj {.inject.}: UPrimitiveComponentPtr; parameterName {.inject.}: FName;
    value {.inject.}: FVector4): void {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc setVectorParameterForCustomPrimitiveData*(
    obj {.inject.}: UPrimitiveComponentPtr; parameterName {.inject.}: FName;
    value {.inject.}: FVector4): void {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc setUseCCD*(obj {.inject.}: UPrimitiveComponentPtr;
                inUseCCD {.inject.}: bool; boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTranslucentSortPriority*(obj {.inject.}: UPrimitiveComponentPtr;
                                 newTranslucentSortPriority {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTranslucencySortDistanceOffset*(obj {.inject.}: UPrimitiveComponentPtr;
    newTranslucencySortDistanceOffset {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSingleSampleShadowFromStationaryLights*(
    obj {.inject.}: UPrimitiveComponentPtr;
    bNewSingleSampleShadowFromStationaryLights {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSimulatePhysics*(obj {.inject.}: UPrimitiveComponentPtr;
                         bSimulate {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setScalarParameterForDefaultCustomPrimitiveData*(
    obj {.inject.}: UPrimitiveComponentPtr; parameterName {.inject.}: FName;
    value {.inject.}: float32): void {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc setScalarParameterForCustomPrimitiveData*(
    obj {.inject.}: UPrimitiveComponentPtr; parameterName {.inject.}: FName;
    value {.inject.}: float32): void {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc setRenderInMainPass*(obj {.inject.}: UPrimitiveComponentPtr;
                          bValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setRenderInDepthPass*(obj {.inject.}: UPrimitiveComponentPtr;
                           bValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setRenderCustomDepth*(obj {.inject.}: UPrimitiveComponentPtr;
                           bValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setReceivesDecals*(obj {.inject.}: UPrimitiveComponentPtr;
                        bNewReceivesDecals {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPhysMaterialOverride*(obj {.inject.}: UPrimitiveComponentPtr;
                              newPhysMaterial {.inject.}: UPhysicalMaterialPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPhysicsMaxAngularVelocityInRadians*(
    obj {.inject.}: UPrimitiveComponentPtr; newMaxAngVel {.inject.}: float32;
    bAddToCurrent {.inject.}: bool; boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPhysicsMaxAngularVelocityInDegrees*(
    obj {.inject.}: UPrimitiveComponentPtr; newMaxAngVel {.inject.}: float32;
    bAddToCurrent {.inject.}: bool; boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPhysicsLinearVelocity*(obj {.inject.}: UPrimitiveComponentPtr;
                               newVel {.inject.}: FVector;
                               bAddToCurrent {.inject.}: bool;
                               boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPhysicsAngularVelocityInRadians*(obj {.inject.}: UPrimitiveComponentPtr;
    newAngVel {.inject.}: FVector; bAddToCurrent {.inject.}: bool;
    boneName {.inject.}: FName): void {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc setPhysicsAngularVelocityInDegrees*(obj {.inject.}: UPrimitiveComponentPtr;
    newAngVel {.inject.}: FVector; bAddToCurrent {.inject.}: bool;
    boneName {.inject.}: FName): void {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc setOwnerNoSee*(obj {.inject.}: UPrimitiveComponentPtr;
                    bNewOwnerNoSee {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setOnlyOwnerSee*(obj {.inject.}: UPrimitiveComponentPtr;
                      bNewOnlyOwnerSee {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setNotifyRigidBodyCollision*(obj {.inject.}: UPrimitiveComponentPtr;
                                  bNewNotifyRigidBodyCollision {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaterialByName*(obj {.inject.}: UPrimitiveComponentPtr;
                        materialSlotName {.inject.}: FName;
                        material {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaterial*(obj {.inject.}: UPrimitiveComponentPtr;
                  elementIndex {.inject.}: int32;
                  material {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMassScale*(obj {.inject.}: UPrimitiveComponentPtr;
                   boneName {.inject.}: FName; inMassScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMassOverrideInKg*(obj {.inject.}: UPrimitiveComponentPtr;
                          boneName {.inject.}: FName;
                          massInKg {.inject.}: float32;
                          bOverrideMass {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearDamping*(obj {.inject.}: UPrimitiveComponentPtr;
                       inDamping {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightingChannels*(obj {.inject.}: UPrimitiveComponentPtr;
                          bChannel0 {.inject.}: bool; bChannel1 {.inject.}: bool;
                          bChannel2 {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightAttachmentsAsGroup*(obj {.inject.}: UPrimitiveComponentPtr;
                                 bInLightAttachmentsAsGroup {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setHiddenInSceneCapture*(obj {.inject.}: UPrimitiveComponentPtr;
                              bValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGenerateOverlapEvents*(obj {.inject.}: UPrimitiveComponentPtr;
                               bInGenerateOverlapEvents {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setExcludeFromLightAttachmentGroup*(obj {.inject.}: UPrimitiveComponentPtr;
    bInExcludeFromLightAttachmentGroup {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnableGravity*(obj {.inject.}: UPrimitiveComponentPtr;
                       bGravityEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEmissiveLightSource*(obj {.inject.}: UPrimitiveComponentPtr;
                             newEmissiveLightSource {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDefaultCustomPrimitiveDataVector4*(
    obj {.inject.}: UPrimitiveComponentPtr; dataIndex {.inject.}: int32;
    value {.inject.}: FVector4): void {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc setDefaultCustomPrimitiveDataVector3*(
    obj {.inject.}: UPrimitiveComponentPtr; dataIndex {.inject.}: int32;
    value {.inject.}: FVector): void {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc setDefaultCustomPrimitiveDataVector2*(
    obj {.inject.}: UPrimitiveComponentPtr; dataIndex {.inject.}: int32;
    value {.inject.}: FVector2D): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setDefaultCustomPrimitiveDataFloat*(obj {.inject.}: UPrimitiveComponentPtr;
    dataIndex {.inject.}: int32; value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCustomPrimitiveDataVector4*(obj {.inject.}: UPrimitiveComponentPtr;
                                    dataIndex {.inject.}: int32;
                                    value {.inject.}: FVector4): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCustomPrimitiveDataVector3*(obj {.inject.}: UPrimitiveComponentPtr;
                                    dataIndex {.inject.}: int32;
                                    value {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCustomPrimitiveDataVector2*(obj {.inject.}: UPrimitiveComponentPtr;
                                    dataIndex {.inject.}: int32;
                                    value {.inject.}: FVector2D): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCustomPrimitiveDataFloat*(obj {.inject.}: UPrimitiveComponentPtr;
                                  dataIndex {.inject.}: int32;
                                  value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCustomDepthStencilWriteMask*(obj {.inject.}: UPrimitiveComponentPtr;
    writeMaskBit {.inject.}: ERendererStencilMask): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCustomDepthStencilValue*(obj {.inject.}: UPrimitiveComponentPtr;
                                 value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCullDistance*(obj {.inject.}: UPrimitiveComponentPtr;
                      newCullDistance {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstraintMode*(obj {.inject.}: UPrimitiveComponentPtr;
                        constraintMode {.inject.}: EDOFMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCollisionResponseToChannel*(obj {.inject.}: UPrimitiveComponentPtr;
                                    channel {.inject.}: ECollisionChannel;
                                    newResponse {.inject.}: ECollisionResponse): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCollisionResponseToAllChannels*(obj {.inject.}: UPrimitiveComponentPtr;
    newResponse {.inject.}: ECollisionResponse): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCollisionProfileName*(obj {.inject.}: UPrimitiveComponentPtr;
                              inCollisionProfileName {.inject.}: FName;
                              bUpdateOverlaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCollisionObjectType*(obj {.inject.}: UPrimitiveComponentPtr;
                             channel {.inject.}: ECollisionChannel): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCollisionEnabled*(obj {.inject.}: UPrimitiveComponentPtr;
                          newType {.inject.}: ECollisionEnabled::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCenterOfMass*(obj {.inject.}: UPrimitiveComponentPtr;
                      centerOfMassOffset {.inject.}: FVector;
                      boneName {.inject.}: FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCastShadow*(obj {.inject.}: UPrimitiveComponentPtr;
                    newCastShadow {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCastInsetShadow*(obj {.inject.}: UPrimitiveComponentPtr;
                         bInCastInsetShadow {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastHiddenShadow*(obj {.inject.}: UPrimitiveComponentPtr;
                          newCastHiddenShadow {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastContactShadow*(obj {.inject.}: UPrimitiveComponentPtr;
                           bInCastContactShadow {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoundsScale*(obj {.inject.}: UPrimitiveComponentPtr;
                     newBoundsScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularDamping*(obj {.inject.}: UPrimitiveComponentPtr;
                        inDamping {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllUseCCD*(obj {.inject.}: UPrimitiveComponentPtr;
                   inUseCCD {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAllPhysicsLinearVelocity*(obj {.inject.}: UPrimitiveComponentPtr;
                                  newVel {.inject.}: FVector;
                                  bAddToCurrent {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllPhysicsAngularVelocityInRadians*(
    obj {.inject.}: UPrimitiveComponentPtr; newAngVel {.inject.}: var FVector;
    bAddToCurrent {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAllPhysicsAngularVelocityInDegrees*(
    obj {.inject.}: UPrimitiveComponentPtr; newAngVel {.inject.}: var FVector;
    bAddToCurrent {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAllMassScale*(obj {.inject.}: UPrimitiveComponentPtr;
                      inMassScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc scaleByMomentOfInertia*(obj {.inject.}: UPrimitiveComponentPtr;
                             inputVector {.inject.}: FVector;
                             boneName {.inject.}: FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc putRigidBodyToSleep*(obj {.inject.}: UPrimitiveComponentPtr;
                          boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereTraceComponent*(obj {.inject.}: UPrimitiveComponentPtr;
                           traceStart {.inject.}: FVector;
                           traceEnd {.inject.}: FVector;
                           sphereRadius {.inject.}: float32;
                           bTraceComplex {.inject.}: bool;
                           bShowTrace {.inject.}: bool;
                           bPersistentShowTrace {.inject.}: bool;
                           hitLocation {.inject.}: var FVector;
                           hitNormal {.inject.}: var FVector;
                           boneName {.inject.}: var FName;
                           outHit {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereOverlapComponent*(obj {.inject.}: UPrimitiveComponentPtr;
                             inSphereCentre {.inject.}: FVector;
                             inSphereRadius {.inject.}: float32;
                             bTraceComplex {.inject.}: bool;
                             bShowTrace {.inject.}: bool;
                             bPersistentShowTrace {.inject.}: bool;
                             hitLocation {.inject.}: var FVector;
                             hitNormal {.inject.}: var FVector;
                             boneName {.inject.}: var FName;
                             outHit {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lineTraceComponent*(obj {.inject.}: UPrimitiveComponentPtr;
                         traceStart {.inject.}: FVector;
                         traceEnd {.inject.}: FVector;
                         bTraceComplex {.inject.}: bool;
                         bShowTrace {.inject.}: bool;
                         bPersistentShowTrace {.inject.}: bool;
                         hitLocation {.inject.}: var FVector;
                         hitNormal {.inject.}: var FVector;
                         boneName {.inject.}: var FName;
                         outHit {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isQueryCollisionEnabled*(obj {.inject.}: UPrimitiveComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPhysicsCollisionEnabled*(obj {.inject.}: UPrimitiveComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isCollisionEnabled*(obj {.inject.}: UPrimitiveComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boxOverlapComponent*(obj {.inject.}: UPrimitiveComponentPtr;
                          inBoxCentre {.inject.}: FVector;
                          inBox {.inject.}: FBox; bTraceComplex {.inject.}: bool;
                          bShowTrace {.inject.}: bool;
                          bPersistentShowTrace {.inject.}: bool;
                          hitLocation {.inject.}: var FVector;
                          hitNormal {.inject.}: var FVector;
                          boneName {.inject.}: var FName;
                          outHit {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isOverlappingComponent*(obj {.inject.}: UPrimitiveComponentPtr;
                             otherComp {.inject.}: UPrimitiveComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isOverlappingActor*(obj {.inject.}: UPrimitiveComponentPtr;
                         other {.inject.}: AActorPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isGravityEnabled*(obj {.inject.}: UPrimitiveComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isAnyRigidBodyAwake*(obj {.inject.}: UPrimitiveComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc ignoreComponentWhenMoving*(obj {.inject.}: UPrimitiveComponentPtr;
                                component {.inject.}: UPrimitiveComponentPtr;
                                bShouldIgnore {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc ignoreActorWhenMoving*(obj {.inject.}: UPrimitiveComponentPtr;
                            actor {.inject.}: AActorPtr;
                            bShouldIgnore {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWalkableSlopeOverride*(obj {.inject.}: UPrimitiveComponentPtr): FWalkableSlopeOverride {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicsLinearVelocityAtPoint*(obj {.inject.}: UPrimitiveComponentPtr;
                                      point {.inject.}: FVector;
                                      boneName {.inject.}: FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicsLinearVelocity*(obj {.inject.}: UPrimitiveComponentPtr;
                               boneName {.inject.}: FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicsAngularVelocityInRadians*(obj {.inject.}: UPrimitiveComponentPtr;
    boneName {.inject.}: FName): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPhysicsAngularVelocityInDegrees*(obj {.inject.}: UPrimitiveComponentPtr;
    boneName {.inject.}: FName): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getOverlappingComponents*(obj {.inject.}: UPrimitiveComponentPtr;
    outOverlappingComponents {.inject.}: var TArray[UPrimitiveComponentPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOverlappingActors*(obj {.inject.}: UPrimitiveComponentPtr;
                           overlappingActors {.inject.}: var TArray[AActorPtr];
                           classFilter {.inject.}: TSubclassOf[AActor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumMaterials*(obj {.inject.}: UPrimitiveComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterialFromCollisionFaceIndex*(obj {.inject.}: UPrimitiveComponentPtr;
                                        faceIndex {.inject.}: int32;
                                        sectionIndex {.inject.}: var int32): UMaterialInterfacePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterial*(obj {.inject.}: UPrimitiveComponentPtr;
                  elementIndex {.inject.}: int32): UMaterialInterfacePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMassScale*(obj {.inject.}: UPrimitiveComponentPtr;
                   boneName {.inject.}: FName): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getMass*(obj {.inject.}: UPrimitiveComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearDamping*(obj {.inject.}: UPrimitiveComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInertiaTensor*(obj {.inject.}: UPrimitiveComponentPtr;
                       boneName {.inject.}: FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGenerateOverlapEvents*(obj {.inject.}: UPrimitiveComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCustomPrimitiveDataIndexForVectorParameter*(
    obj {.inject.}: UPrimitiveComponentPtr; parameterName {.inject.}: FName): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCustomPrimitiveDataIndexForScalarParameter*(
    obj {.inject.}: UPrimitiveComponentPtr; parameterName {.inject.}: FName): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCollisionResponseToChannel*(obj {.inject.}: UPrimitiveComponentPtr;
                                    channel {.inject.}: ECollisionChannel): ECollisionResponse {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCollisionProfileName*(obj {.inject.}: UPrimitiveComponentPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCollisionObjectType*(obj {.inject.}: UPrimitiveComponentPtr): ECollisionChannel {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCollisionEnabled*(obj {.inject.}: UPrimitiveComponentPtr): ECollisionEnabled::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClosestPointOnCollision*(obj {.inject.}: UPrimitiveComponentPtr;
                                 point {.inject.}: var FVector;
                                 outPointOnBody {.inject.}: var FVector;
                                 boneName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCenterOfMass*(obj {.inject.}: UPrimitiveComponentPtr;
                      boneName {.inject.}: FName): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getAngularDamping*(obj {.inject.}: UPrimitiveComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createDynamicMaterialInstance*(obj {.inject.}: UPrimitiveComponentPtr;
                                    elementIndex {.inject.}: int32;
    sourceMaterial {.inject.}: UMaterialInterfacePtr;
                                    optionalName {.inject.}: FName): UMaterialInstanceDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createAndSetMaterialInstanceDynamicFromMaterial*(
    obj {.inject.}: UPrimitiveComponentPtr; elementIndex {.inject.}: int32;
    parent {.inject.}: UMaterialInterfacePtr): UMaterialInstanceDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createAndSetMaterialInstanceDynamic*(obj {.inject.}: UPrimitiveComponentPtr;
    elementIndex {.inject.}: int32): UMaterialInstanceDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc copyArrayOfMoveIgnoreComponents*(obj {.inject.}: UPrimitiveComponentPtr): TArray[UPrimitiveComponentPtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc copyArrayOfMoveIgnoreActors*(obj {.inject.}: UPrimitiveComponentPtr): TArray[AActorPtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearMoveIgnoreComponents*(obj {.inject.}: UPrimitiveComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearMoveIgnoreActors*(obj {.inject.}: UPrimitiveComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canCharacterStepUp*(obj {.inject.}: UPrimitiveComponentPtr;
                         pawn {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addVelocityChangeImpulseAtLocation*(obj {.inject.}: UPrimitiveComponentPtr;
    impulse {.inject.}: FVector; location {.inject.}: FVector;
    boneName {.inject.}: FName): void {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc addTorqueInRadians*(obj {.inject.}: UPrimitiveComponentPtr;
                         torque {.inject.}: FVector; boneName {.inject.}: FName;
                         bAccelChange {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addTorqueInDegrees*(obj {.inject.}: UPrimitiveComponentPtr;
                         torque {.inject.}: FVector; boneName {.inject.}: FName;
                         bAccelChange {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addRadialImpulse*(obj {.inject.}: UPrimitiveComponentPtr;
                       origin {.inject.}: FVector; radius {.inject.}: float32;
                       strength {.inject.}: float32;
                       falloff {.inject.}: ERadialImpulseFalloff;
                       bVelChange {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addRadialForce*(obj {.inject.}: UPrimitiveComponentPtr;
                     origin {.inject.}: FVector; radius {.inject.}: float32;
                     strength {.inject.}: float32;
                     falloff {.inject.}: ERadialImpulseFalloff;
                     bAccelChange {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addImpulseAtLocation*(obj {.inject.}: UPrimitiveComponentPtr;
                           impulse {.inject.}: FVector;
                           location {.inject.}: FVector;
                           boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addImpulse*(obj {.inject.}: UPrimitiveComponentPtr;
                 impulse {.inject.}: FVector; boneName {.inject.}: FName;
                 bVelChange {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addForceAtLocationLocal*(obj {.inject.}: UPrimitiveComponentPtr;
                              force {.inject.}: FVector;
                              location {.inject.}: FVector;
                              boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addForceAtLocation*(obj {.inject.}: UPrimitiveComponentPtr;
                         force {.inject.}: FVector; location {.inject.}: FVector;
                         boneName {.inject.}: FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addForce*(obj {.inject.}: UPrimitiveComponentPtr; force {.inject.}: FVector;
               boneName {.inject.}: FName; bAccelChange {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addAngularImpulseInRadians*(obj {.inject.}: UPrimitiveComponentPtr;
                                 impulse {.inject.}: FVector;
                                 boneName {.inject.}: FName;
                                 bVelChange {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addAngularImpulseInDegrees*(obj {.inject.}: UPrimitiveComponentPtr;
                                 impulse {.inject.}: FVector;
                                 boneName {.inject.}: FName;
                                 bVelChange {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc scriptedAddFilename*(obj {.inject.}: UAssetImportDataPtr;
                          inPath {.inject.}: FString; index {.inject.}: int32;
                          sourceFileLabel {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFirstFilename*(obj {.inject.}: UAssetImportDataPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc extractFilenames*(obj {.inject.}: UAssetImportDataPtr): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `object`*(obj {.inject.}: UAssetExportTaskPtr): TObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `object=`*(obj {.inject.}: UAssetExportTaskPtr;
                val {.inject.}: TObjectPtr[UObject]): void {.
    importcpp: "setobject(@)", header: "UEGenBindings.h".}
proc `exporter`*(obj {.inject.}: UAssetExportTaskPtr): TObjectPtr[UExporter] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `exporter=`*(obj {.inject.}: UAssetExportTaskPtr;
                  val {.inject.}: TObjectPtr[UExporter]): void {.
    importcpp: "setexporter(@)", header: "UEGenBindings.h".}
proc `filename`*(obj {.inject.}: UAssetExportTaskPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `filename=`*(obj {.inject.}: UAssetExportTaskPtr; val {.inject.}: FString): void {.
    importcpp: "setfilename(@)", header: "UEGenBindings.h".}
proc `bSelected`*(obj {.inject.}: UAssetExportTaskPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSelected=`*(obj {.inject.}: UAssetExportTaskPtr; val {.inject.}: bool): void {.
    importcpp: "setbSelected(@)", header: "UEGenBindings.h".}
proc `bReplaceIdentical`*(obj {.inject.}: UAssetExportTaskPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReplaceIdentical=`*(obj {.inject.}: UAssetExportTaskPtr;
                           val {.inject.}: bool): void {.
    importcpp: "setbReplaceIdentical(@)", header: "UEGenBindings.h".}
proc `bPrompt`*(obj {.inject.}: UAssetExportTaskPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bPrompt=`*(obj {.inject.}: UAssetExportTaskPtr; val {.inject.}: bool): void {.
    importcpp: "setbPrompt(@)", header: "UEGenBindings.h".}
proc `bAutomated`*(obj {.inject.}: UAssetExportTaskPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutomated=`*(obj {.inject.}: UAssetExportTaskPtr; val {.inject.}: bool): void {.
    importcpp: "setbAutomated(@)", header: "UEGenBindings.h".}
proc `bUseFileArchive`*(obj {.inject.}: UAssetExportTaskPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseFileArchive=`*(obj {.inject.}: UAssetExportTaskPtr;
                         val {.inject.}: bool): void {.
    importcpp: "setbUseFileArchive(@)", header: "UEGenBindings.h".}
proc `bWriteEmptyFiles`*(obj {.inject.}: UAssetExportTaskPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bWriteEmptyFiles=`*(obj {.inject.}: UAssetExportTaskPtr;
                          val {.inject.}: bool): void {.
    importcpp: "setbWriteEmptyFiles(@)", header: "UEGenBindings.h".}
proc `ignoreObjectList`*(obj {.inject.}: UAssetExportTaskPtr): var TArray[
    TObjectPtr[UObject]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `ignoreObjectList=`*(obj {.inject.}: UAssetExportTaskPtr;
                          val {.inject.}: TArray[TObjectPtr[UObject]]): void {.
    importcpp: "setignoreObjectList(@)", header: "UEGenBindings.h".}
proc `options`*(obj {.inject.}: UAssetExportTaskPtr): TObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `options=`*(obj {.inject.}: UAssetExportTaskPtr;
                 val {.inject.}: TObjectPtr[UObject]): void {.
    importcpp: "setoptions(@)", header: "UEGenBindings.h".}
proc `errors`*(obj {.inject.}: UAssetExportTaskPtr): var TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `errors=`*(obj {.inject.}: UAssetExportTaskPtr;
                val {.inject.}: TArray[FString]): void {.
    importcpp: "seterrors(@)", header: "UEGenBindings.h".}
proc `bEnableMaterialParameterCaching`*(obj {.inject.}: UMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableMaterialParameterCaching=`*(obj {.inject.}: UMeshComponentPtr;
    val {.inject.}: uint8): void {.importcpp: "setbEnableMaterialParameterCaching(@)",
                                   header: "UEGenBindings.h".}
proc setVectorParameterValueOnMaterials*(obj {.inject.}: UMeshComponentPtr;
    parameterName {.inject.}: FName; parameterValue {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setScalarParameterValueOnMaterials*(obj {.inject.}: UMeshComponentPtr;
    parameterName {.inject.}: FName; parameterValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc prestreamTextures*(obj {.inject.}: UMeshComponentPtr;
                        seconds {.inject.}: float32;
                        bPrioritizeCharacterTextures {.inject.}: bool;
                        cinematicTextureGroups {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isMaterialSlotNameValid*(obj {.inject.}: UMeshComponentPtr;
                              materialSlotName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterialSlotNames*(obj {.inject.}: UMeshComponentPtr): TArray[FName] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterials*(obj {.inject.}: UMeshComponentPtr): TArray[UMaterialInterfacePtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterialIndex*(obj {.inject.}: UMeshComponentPtr;
                       materialSlotName {.inject.}: FName): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc activate*(obj {.inject.}: UBlueprintAsyncActionBasePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `optionsString`*(obj {.inject.}: AGameModeBasePtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `optionsString=`*(obj {.inject.}: AGameModeBasePtr; val {.inject.}: FString): void {.
    importcpp: "setoptionsString(@)", header: "UEGenBindings.h".}
proc `gameSessionClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[
    AGameSession] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `gameSessionClass=`*(obj {.inject.}: AGameModeBasePtr;
                          val {.inject.}: TSubclassOf[AGameSession]): void {.
    importcpp: "setgameSessionClass(@)", header: "UEGenBindings.h".}
proc `gameStateClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[
    AGameStateBase] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `gameStateClass=`*(obj {.inject.}: AGameModeBasePtr;
                        val {.inject.}: TSubclassOf[AGameStateBase]): void {.
    importcpp: "setgameStateClass(@)", header: "UEGenBindings.h".}
proc `playerControllerClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[
    APlayerController] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerControllerClass=`*(obj {.inject.}: AGameModeBasePtr;
                               val {.inject.}: TSubclassOf[APlayerController]): void {.
    importcpp: "setplayerControllerClass(@)", header: "UEGenBindings.h".}
proc `playerStateClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[
    APlayerState] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerStateClass=`*(obj {.inject.}: AGameModeBasePtr;
                          val {.inject.}: TSubclassOf[APlayerState]): void {.
    importcpp: "setplayerStateClass(@)", header: "UEGenBindings.h".}
proc `hUDClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[AHUD] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `hUDClass=`*(obj {.inject.}: AGameModeBasePtr;
                  val {.inject.}: TSubclassOf[AHUD]): void {.
    importcpp: "sethUDClass(@)", header: "UEGenBindings.h".}
proc `defaultPawnClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[APawn] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultPawnClass=`*(obj {.inject.}: AGameModeBasePtr;
                          val {.inject.}: TSubclassOf[APawn]): void {.
    importcpp: "setdefaultPawnClass(@)", header: "UEGenBindings.h".}
proc `spectatorClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[
    ASpectatorPawn] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spectatorClass=`*(obj {.inject.}: AGameModeBasePtr;
                        val {.inject.}: TSubclassOf[ASpectatorPawn]): void {.
    importcpp: "setspectatorClass(@)", header: "UEGenBindings.h".}
proc `replaySpectatorPlayerControllerClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[
    APlayerController] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `replaySpectatorPlayerControllerClass=`*(obj {.inject.}: AGameModeBasePtr;
    val {.inject.}: TSubclassOf[APlayerController]): void {.
    importcpp: "setreplaySpectatorPlayerControllerClass(@)",
    header: "UEGenBindings.h".}
proc `serverStatReplicatorClass`*(obj {.inject.}: AGameModeBasePtr): TSubclassOf[
    AServerStatReplicator] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `serverStatReplicatorClass=`*(obj {.inject.}: AGameModeBasePtr;
    val {.inject.}: TSubclassOf[AServerStatReplicator]): void {.
    importcpp: "setserverStatReplicatorClass(@)", header: "UEGenBindings.h".}
proc `bUseSeamlessTravel`*(obj {.inject.}: AGameModeBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseSeamlessTravel=`*(obj {.inject.}: AGameModeBasePtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbUseSeamlessTravel(@)", header: "UEGenBindings.h".}
proc `bStartPlayersAsSpectators`*(obj {.inject.}: AGameModeBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bStartPlayersAsSpectators=`*(obj {.inject.}: AGameModeBasePtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbStartPlayersAsSpectators(@)", header: "UEGenBindings.h".}
proc `bPauseable`*(obj {.inject.}: AGameModeBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPauseable=`*(obj {.inject.}: AGameModeBasePtr; val {.inject.}: uint8): void {.
    importcpp: "setbPauseable(@)", header: "UEGenBindings.h".}
proc startPlay*(obj {.inject.}: AGameModeBasePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc returnToMainMenuHost*(obj {.inject.}: AGameModeBasePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc restartPlayerAtTransform*(obj {.inject.}: AGameModeBasePtr;
                               newPlayer {.inject.}: AControllerPtr;
                               spawnTransform {.inject.}: var FTransform): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc restartPlayerAtPlayerStart*(obj {.inject.}: AGameModeBasePtr;
                                 newPlayer {.inject.}: AControllerPtr;
                                 startSpot {.inject.}: AActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc restartPlayer*(obj {.inject.}: AGameModeBasePtr;
                    newPlayer {.inject.}: AControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetLevel*(obj {.inject.}: AGameModeBasePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc playerCanRestart*(obj {.inject.}: AGameModeBasePtr;
                       player {.inject.}: APlayerControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findPlayerStart*(obj {.inject.}: AGameModeBasePtr;
                      player {.inject.}: AControllerPtr;
                      incomingName {.inject.}: FString): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasMatchStarted*(obj {.inject.}: AGameModeBasePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasMatchEnded*(obj {.inject.}: AGameModeBasePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumSpectators*(obj {.inject.}: AGameModeBasePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumPlayers*(obj {.inject.}: AGameModeBasePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultPawnClassForController*(obj {.inject.}: AGameModeBasePtr;
                                       inController {.inject.}: AControllerPtr): UClassPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc changeName*(obj {.inject.}: AGameModeBasePtr;
                 controller {.inject.}: AControllerPtr;
                 newName {.inject.}: FString; bNameChange {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDelayedStart`*(obj {.inject.}: AGameModePtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bDelayedStart=`*(obj {.inject.}: AGameModePtr; val {.inject.}: uint8): void {.
    importcpp: "setbDelayedStart(@)", header: "UEGenBindings.h".}
proc `numSpectators`*(obj {.inject.}: AGameModePtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `numSpectators=`*(obj {.inject.}: AGameModePtr; val {.inject.}: int32): void {.
    importcpp: "setnumSpectators(@)", header: "UEGenBindings.h".}
proc `numPlayers`*(obj {.inject.}: AGameModePtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `numPlayers=`*(obj {.inject.}: AGameModePtr; val {.inject.}: int32): void {.
    importcpp: "setnumPlayers(@)", header: "UEGenBindings.h".}
proc `numBots`*(obj {.inject.}: AGameModePtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `numBots=`*(obj {.inject.}: AGameModePtr; val {.inject.}: int32): void {.
    importcpp: "setnumBots(@)", header: "UEGenBindings.h".}
proc `minRespawnDelay`*(obj {.inject.}: AGameModePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minRespawnDelay=`*(obj {.inject.}: AGameModePtr; val {.inject.}: float32): void {.
    importcpp: "setminRespawnDelay(@)", header: "UEGenBindings.h".}
proc `numTravellingPlayers`*(obj {.inject.}: AGameModePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numTravellingPlayers=`*(obj {.inject.}: AGameModePtr; val {.inject.}: int32): void {.
    importcpp: "setnumTravellingPlayers(@)", header: "UEGenBindings.h".}
proc startMatch*(obj {.inject.}: AGameModePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc say*(obj {.inject.}: AGameModePtr; msg {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc restartGame*(obj {.inject.}: AGameModePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isMatchInProgress*(obj {.inject.}: AGameModePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMatchState*(obj {.inject.}: AGameModePtr): FName {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc endMatch*(obj {.inject.}: AGameModePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc abortMatch*(obj {.inject.}: AGameModePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `gameModeClass`*(obj {.inject.}: AGameStateBasePtr): TSubclassOf[
    AGameModeBase] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `gameModeClass=`*(obj {.inject.}: AGameStateBasePtr;
                       val {.inject.}: TSubclassOf[AGameModeBase]): void {.
    importcpp: "setgameModeClass(@)", header: "UEGenBindings.h".}
proc `authorityGameMode`*(obj {.inject.}: AGameStateBasePtr): TObjectPtr[
    AGameModeBase] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `authorityGameMode=`*(obj {.inject.}: AGameStateBasePtr;
                           val {.inject.}: TObjectPtr[AGameModeBase]): void {.
    importcpp: "setauthorityGameMode(@)", header: "UEGenBindings.h".}
proc `spectatorClass`*(obj {.inject.}: AGameStateBasePtr): TSubclassOf[
    ASpectatorPawn] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spectatorClass=`*(obj {.inject.}: AGameStateBasePtr;
                        val {.inject.}: TSubclassOf[ASpectatorPawn]): void {.
    importcpp: "setspectatorClass(@)", header: "UEGenBindings.h".}
proc `playerArray`*(obj {.inject.}: AGameStateBasePtr): var TArray[
    TObjectPtr[APlayerState]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerArray=`*(obj {.inject.}: AGameStateBasePtr;
                     val {.inject.}: TArray[TObjectPtr[APlayerState]]): void {.
    importcpp: "setplayerArray(@)", header: "UEGenBindings.h".}
proc hasMatchStarted*(obj {.inject.}: AGameStateBasePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasMatchEnded*(obj {.inject.}: AGameStateBasePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasBegunPlay*(obj {.inject.}: AGameStateBasePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getServerWorldTimeSeconds*(obj {.inject.}: AGameStateBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerStartTime*(obj {.inject.}: AGameStateBasePtr;
                         controller {.inject.}: AControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerRespawnDelay*(obj {.inject.}: AGameStateBasePtr;
                            controller {.inject.}: AControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerState`*(obj {.inject.}: AControllerPtr): TObjectPtr[APlayerState] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerState=`*(obj {.inject.}: AControllerPtr;
                     val {.inject.}: TObjectPtr[APlayerState]): void {.
    importcpp: "setplayerState(@)", header: "UEGenBindings.h".}
proc unPossess*(obj {.inject.}: AControllerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc stopMovement*(obj {.inject.}: AControllerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setInitialLocationAndRotation*(obj {.inject.}: AControllerPtr;
                                    newLocation {.inject.}: var FVector;
                                    newRotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIgnoreMoveInput*(obj {.inject.}: AControllerPtr;
                         bNewMoveInput {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIgnoreLookInput*(obj {.inject.}: AControllerPtr;
                         bNewLookInput {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setControlRotation*(obj {.inject.}: AControllerPtr;
                         newRotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetIgnoreMoveInput*(obj {.inject.}: AControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetIgnoreLookInput*(obj {.inject.}: AControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetIgnoreInputFlags*(obj {.inject.}: AControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc possess*(obj {.inject.}: AControllerPtr; inPawn {.inject.}: APawnPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lineOfSightTo*(obj {.inject.}: AControllerPtr; other {.inject.}: AActorPtr;
                    viewPoint {.inject.}: FVector;
                    bAlternateChecks {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPawn*(obj {.inject.}: AControllerPtr): APawnPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isPlayerController*(obj {.inject.}: AControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isMoveInputIgnored*(obj {.inject.}: AControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isLookInputIgnored*(obj {.inject.}: AControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isLocalPlayerController*(obj {.inject.}: AControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isLocalController*(obj {.inject.}: AControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getViewTarget*(obj {.inject.}: AControllerPtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerViewPoint*(obj {.inject.}: AControllerPtr;
                         location {.inject.}: var FVector;
                         rotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDesiredRotation*(obj {.inject.}: AControllerPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getControlRotation*(obj {.inject.}: AControllerPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerCameraManager`*(obj {.inject.}: APlayerControllerPtr): TObjectPtr[
    APlayerCameraManager] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerCameraManager=`*(obj {.inject.}: APlayerControllerPtr;
                             val {.inject.}: TObjectPtr[APlayerCameraManager]): void {.
    importcpp: "setplayerCameraManager(@)", header: "UEGenBindings.h".}
proc `playerCameraManagerClass`*(obj {.inject.}: APlayerControllerPtr): TSubclassOf[
    APlayerCameraManager] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerCameraManagerClass=`*(obj {.inject.}: APlayerControllerPtr;
    val {.inject.}: TSubclassOf[APlayerCameraManager]): void {.
    importcpp: "setplayerCameraManagerClass(@)", header: "UEGenBindings.h".}
proc `smoothTargetViewRotationSpeed`*(obj {.inject.}: APlayerControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `smoothTargetViewRotationSpeed=`*(obj {.inject.}: APlayerControllerPtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setsmoothTargetViewRotationSpeed(@)", header: "UEGenBindings.h".}
proc `cheatManager`*(obj {.inject.}: APlayerControllerPtr): TObjectPtr[
    UCheatManager] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cheatManager=`*(obj {.inject.}: APlayerControllerPtr;
                      val {.inject.}: TObjectPtr[UCheatManager]): void {.
    importcpp: "setcheatManager(@)", header: "UEGenBindings.h".}
proc `cheatClass`*(obj {.inject.}: APlayerControllerPtr): TSubclassOf[
    UCheatManager] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cheatClass=`*(obj {.inject.}: APlayerControllerPtr;
                    val {.inject.}: TSubclassOf[UCheatManager]): void {.
    importcpp: "setcheatClass(@)", header: "UEGenBindings.h".}
proc `bPlayerIsWaiting`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPlayerIsWaiting=`*(obj {.inject.}: APlayerControllerPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbPlayerIsWaiting(@)", header: "UEGenBindings.h".}
proc `bShowMouseCursor`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShowMouseCursor=`*(obj {.inject.}: APlayerControllerPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbShowMouseCursor(@)", header: "UEGenBindings.h".}
proc `bEnableClickEvents`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableClickEvents=`*(obj {.inject.}: APlayerControllerPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbEnableClickEvents(@)", header: "UEGenBindings.h".}
proc `bEnableTouchEvents`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableTouchEvents=`*(obj {.inject.}: APlayerControllerPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbEnableTouchEvents(@)", header: "UEGenBindings.h".}
proc `bEnableMouseOverEvents`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableMouseOverEvents=`*(obj {.inject.}: APlayerControllerPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbEnableMouseOverEvents(@)", header: "UEGenBindings.h".}
proc `bEnableTouchOverEvents`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableTouchOverEvents=`*(obj {.inject.}: APlayerControllerPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbEnableTouchOverEvents(@)", header: "UEGenBindings.h".}
proc `bForceFeedbackEnabled`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceFeedbackEnabled=`*(obj {.inject.}: APlayerControllerPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbForceFeedbackEnabled(@)", header: "UEGenBindings.h".}
proc `bEnableStreamingSource`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableStreamingSource=`*(obj {.inject.}: APlayerControllerPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbEnableStreamingSource(@)", header: "UEGenBindings.h".}
proc `bStreamingSourceShouldActivate`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bStreamingSourceShouldActivate=`*(obj {.inject.}: APlayerControllerPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbStreamingSourceShouldActivate(@)", header: "UEGenBindings.h".}
proc `bStreamingSourceShouldBlockOnSlowStreaming`*(
    obj {.inject.}: APlayerControllerPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bStreamingSourceShouldBlockOnSlowStreaming=`*(
    obj {.inject.}: APlayerControllerPtr; val {.inject.}: uint8): void {.
    importcpp: "setbStreamingSourceShouldBlockOnSlowStreaming(@)",
    header: "UEGenBindings.h".}
proc `clickEventKeys`*(obj {.inject.}: APlayerControllerPtr): var TArray[FKey] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `clickEventKeys=`*(obj {.inject.}: APlayerControllerPtr;
                        val {.inject.}: TArray[FKey]): void {.
    importcpp: "setclickEventKeys(@)", header: "UEGenBindings.h".}
proc `defaultMouseCursor`*(obj {.inject.}: APlayerControllerPtr): EMouseCursor::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultMouseCursor=`*(obj {.inject.}: APlayerControllerPtr;
                            val {.inject.}: EMouseCursor::Type): void {.
    importcpp: "setdefaultMouseCursor(@)", header: "UEGenBindings.h".}
proc `currentMouseCursor`*(obj {.inject.}: APlayerControllerPtr): EMouseCursor::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `currentMouseCursor=`*(obj {.inject.}: APlayerControllerPtr;
                            val {.inject.}: EMouseCursor::Type): void {.
    importcpp: "setcurrentMouseCursor(@)", header: "UEGenBindings.h".}
proc `defaultClickTraceChannel`*(obj {.inject.}: APlayerControllerPtr): ECollisionChannel {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultClickTraceChannel=`*(obj {.inject.}: APlayerControllerPtr;
                                  val {.inject.}: ECollisionChannel): void {.
    importcpp: "setdefaultClickTraceChannel(@)", header: "UEGenBindings.h".}
proc `currentClickTraceChannel`*(obj {.inject.}: APlayerControllerPtr): ECollisionChannel {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `currentClickTraceChannel=`*(obj {.inject.}: APlayerControllerPtr;
                                  val {.inject.}: ECollisionChannel): void {.
    importcpp: "setcurrentClickTraceChannel(@)", header: "UEGenBindings.h".}
proc `hitResultTraceDistance`*(obj {.inject.}: APlayerControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `hitResultTraceDistance=`*(obj {.inject.}: APlayerControllerPtr;
                                val {.inject.}: float32): void {.
    importcpp: "sethitResultTraceDistance(@)", header: "UEGenBindings.h".}
proc `bShouldPerformFullTickWhenPaused`*(obj {.inject.}: APlayerControllerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldPerformFullTickWhenPaused=`*(obj {.inject.}: APlayerControllerPtr;
    val {.inject.}: uint8): void {.importcpp: "setbShouldPerformFullTickWhenPaused(@)",
                                   header: "UEGenBindings.h".}
proc wasInputKeyJustReleased*(obj {.inject.}: APlayerControllerPtr;
                              key {.inject.}: FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc wasInputKeyJustPressed*(obj {.inject.}: APlayerControllerPtr;
                             key {.inject.}: FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc streamingSourceShouldBlockOnSlowStreaming*(
    obj {.inject.}: APlayerControllerPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc streamingSourceShouldActivate*(obj {.inject.}: APlayerControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopHapticEffect*(obj {.inject.}: APlayerControllerPtr;
                       hand {.inject.}: EControllerHand): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVirtualJoystickVisibility*(obj {.inject.}: APlayerControllerPtr;
                                   bVisible {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setViewTargetWithBlend*(obj {.inject.}: APlayerControllerPtr;
                             newViewTarget {.inject.}: AActorPtr;
                             blendTime {.inject.}: float32;
                             blendFunc {.inject.}: EViewTargetBlendFunction;
                             blendExp {.inject.}: float32;
                             bLockOutgoing {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMouseLocation*(obj {.inject.}: APlayerControllerPtr; x {.inject.}: int32;
                       y {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setHapticsByValue*(obj {.inject.}: APlayerControllerPtr;
                        frequency {.inject.}: float32;
                        amplitude {.inject.}: float32;
                        hand {.inject.}: EControllerHand): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDisableHaptics*(obj {.inject.}: APlayerControllerPtr;
                        bNewDisabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDeprecatedInputYawScale*(obj {.inject.}: APlayerControllerPtr;
                                 newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDeprecatedInputRollScale*(obj {.inject.}: APlayerControllerPtr;
                                  newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDeprecatedInputPitchScale*(obj {.inject.}: APlayerControllerPtr;
                                   newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setControllerLightColor*(obj {.inject.}: APlayerControllerPtr;
                              color {.inject.}: FColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCinematicMode*(obj {.inject.}: APlayerControllerPtr;
                       bInCinematicMode {.inject.}: bool;
                       bHidePlayer {.inject.}: bool;
                       bAffectsHUD {.inject.}: bool;
                       bAffectsMovement {.inject.}: bool;
                       bAffectsTurning {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAudioListenerOverride*(obj {.inject.}: APlayerControllerPtr;
                               attachToComponent {.inject.}: USceneComponentPtr;
                               location {.inject.}: FVector;
                               rotation {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAudioListenerAttenuationOverride*(obj {.inject.}: APlayerControllerPtr;
    attachToComponent {.inject.}: USceneComponentPtr;
    attenuationLocationOVerride {.inject.}: FVector): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc resetControllerLightColor*(obj {.inject.}: APlayerControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectWorldLocationToScreen*(obj {.inject.}: APlayerControllerPtr;
                                   worldLocation {.inject.}: FVector;
                                   screenLocation {.inject.}: var FVector2D;
                                   bPlayerViewportRelative {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playHapticEffect*(obj {.inject.}: APlayerControllerPtr;
                       hapticEffect {.inject.}: UHapticFeedbackEffect_BasePtr;
                       hand {.inject.}: EControllerHand;
                       scale {.inject.}: float32; bLoop {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playDynamicForceFeedback*(obj {.inject.}: APlayerControllerPtr;
                               intensity {.inject.}: float32;
                               duration {.inject.}: float32;
                               bAffectsLeftLarge {.inject.}: bool;
                               bAffectsLeftSmall {.inject.}: bool;
                               bAffectsRightLarge {.inject.}: bool;
                               bAffectsRightSmall {.inject.}: bool;
    action {.inject.}: EDynamicForceFeedbackAction::Type;
                               latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientPlayForceFeedback*(obj {.inject.}: APlayerControllerPtr;
    forceFeedbackEffect {.inject.}: UForceFeedbackEffectPtr;
                              tag {.inject.}: FName; bLooping {.inject.}: bool;
                              bIgnoreTimeDilation {.inject.}: bool;
                              bPlayWhilePaused {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isStreamingSourceEnabled*(obj {.inject.}: APlayerControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isInputKeyDown*(obj {.inject.}: APlayerControllerPtr; key {.inject.}: FKey): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getViewportSize*(obj {.inject.}: APlayerControllerPtr;
                      sizeX {.inject.}: var int32; sizeY {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSpectatorPawn*(obj {.inject.}: APlayerControllerPtr): ASpectatorPawnPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMousePosition*(obj {.inject.}: APlayerControllerPtr;
                       locationX {.inject.}: var float32;
                       locationY {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputVectorKeyState*(obj {.inject.}: APlayerControllerPtr;
                             key {.inject.}: FKey): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputTouchState*(obj {.inject.}: APlayerControllerPtr;
                         fingerIndex {.inject.}: ETouchIndex::Type;
                         locationX {.inject.}: var float32;
                         locationY {.inject.}: var float32;
                         bIsCurrentlyPressed {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputMouseDelta*(obj {.inject.}: APlayerControllerPtr;
                         deltaX {.inject.}: var float32;
                         deltaY {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputMotionState*(obj {.inject.}: APlayerControllerPtr;
                          tilt {.inject.}: var FVector;
                          rotationRate {.inject.}: var FVector;
                          gravity {.inject.}: var FVector;
                          acceleration {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputKeyTimeDown*(obj {.inject.}: APlayerControllerPtr;
                          key {.inject.}: FKey): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getInputAnalogStickState*(obj {.inject.}: APlayerControllerPtr;
    whichStick {.inject.}: EControllerAnalogStick::Type;
                               stickX {.inject.}: var float32;
                               stickY {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputAnalogKeyState*(obj {.inject.}: APlayerControllerPtr;
                             key {.inject.}: FKey): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHUD*(obj {.inject.}: APlayerControllerPtr): AHUDPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHitResultUnderFingerForObjects*(obj {.inject.}: APlayerControllerPtr;
    fingerIndex {.inject.}: ETouchIndex::Type; bTraceComplex {.inject.}: bool;
                                        hitResult {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHitResultUnderFingerByChannel*(obj {.inject.}: APlayerControllerPtr;
    fingerIndex {.inject.}: ETouchIndex::Type;
                                       traceChannel {.inject.}: ETraceTypeQuery;
                                       bTraceComplex {.inject.}: bool;
                                       hitResult {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHitResultUnderFinger*(obj {.inject.}: APlayerControllerPtr;
                              fingerIndex {.inject.}: ETouchIndex::Type;
                              traceChannel {.inject.}: ECollisionChannel;
                              bTraceComplex {.inject.}: bool;
                              hitResult {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHitResultUnderCursorForObjects*(obj {.inject.}: APlayerControllerPtr;
                                        bTraceComplex {.inject.}: bool;
                                        hitResult {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHitResultUnderCursorByChannel*(obj {.inject.}: APlayerControllerPtr;
                                       traceChannel {.inject.}: ETraceTypeQuery;
                                       bTraceComplex {.inject.}: bool;
                                       hitResult {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getHitResultUnderCursor*(obj {.inject.}: APlayerControllerPtr;
                              traceChannel {.inject.}: ECollisionChannel;
                              bTraceComplex {.inject.}: bool;
                              hitResult {.inject.}: var FHitResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFocalLocation*(obj {.inject.}: APlayerControllerPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDeprecatedInputYawScale*(obj {.inject.}: APlayerControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDeprecatedInputRollScale*(obj {.inject.}: APlayerControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDeprecatedInputPitchScale*(obj {.inject.}: APlayerControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deprojectScreenPositionToWorld*(obj {.inject.}: APlayerControllerPtr;
                                     screenX {.inject.}: float32;
                                     screenY {.inject.}: float32;
                                     worldLocation {.inject.}: var FVector;
                                     worldDirection {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deprojectMousePositionToWorld*(obj {.inject.}: APlayerControllerPtr;
                                    worldLocation {.inject.}: var FVector;
                                    worldDirection {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientStopForceFeedback*(obj {.inject.}: APlayerControllerPtr;
    forceFeedbackEffect {.inject.}: UForceFeedbackEffectPtr;
                              tag {.inject.}: FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc clientStopCameraShakesFromSource*(obj {.inject.}: APlayerControllerPtr;
    sourceComponent {.inject.}: UCameraShakeSourceComponentPtr;
                                       bImmediately {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientStopCameraShake*(obj {.inject.}: APlayerControllerPtr;
                            shake {.inject.}: TSubclassOf[UCameraShakeBase];
                            bImmediately {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientStartCameraShakeFromSource*(obj {.inject.}: APlayerControllerPtr;
    shake {.inject.}: TSubclassOf[UCameraShakeBase]; sourceComponent {.inject.}: UCameraShakeSourceComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientStartCameraShake*(obj {.inject.}: APlayerControllerPtr;
                             shake {.inject.}: TSubclassOf[UCameraShakeBase];
                             scale {.inject.}: float32;
                             playSpace {.inject.}: ECameraShakePlaySpace;
                             userPlaySpaceRot {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientSpawnGenericCameraLensEffect*(obj {.inject.}: APlayerControllerPtr;
    lensEffectEmitterClass {.inject.}: TSubclassOf[AActor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientSetHUD*(obj {.inject.}: APlayerControllerPtr;
                   newHUDClass {.inject.}: TSubclassOf[AHUD]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientPlayCameraAnim*(obj {.inject.}: APlayerControllerPtr;
                           animToPlay {.inject.}: UCameraAnimPtr;
                           scale {.inject.}: float32; rate {.inject.}: float32;
                           blendInTime {.inject.}: float32;
                           blendOutTime {.inject.}: float32;
                           bLoop {.inject.}: bool;
                           bRandomStartTime {.inject.}: bool;
                           space {.inject.}: ECameraShakePlaySpace;
                           customPlaySpace {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clientClearCameraLensEffects*(obj {.inject.}: APlayerControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearAudioListenerOverride*(obj {.inject.}: APlayerControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearAudioListenerAttenuationOverride*(obj {.inject.}: APlayerControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canRestartPlayer*(obj {.inject.}: APlayerControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addYawInput*(obj {.inject.}: APlayerControllerPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addRollInput*(obj {.inject.}: APlayerControllerPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addPitchInput*(obj {.inject.}: APlayerControllerPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc activateTouchInterface*(obj {.inject.}: APlayerControllerPtr;
                             newTouchInterface {.inject.}: UTouchInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightComponent`*(obj {.inject.}: ASkyLightPtr): TObjectPtr[
    USkyLightComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightComponent=`*(obj {.inject.}: ASkyLightPtr;
                        val {.inject.}: TObjectPtr[USkyLightComponent]): void {.
    importcpp: "setlightComponent(@)", header: "UEGenBindings.h".}
proc `numCinematicMipLevels`*(obj {.inject.}: UStreamableRenderAssetPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numCinematicMipLevels=`*(obj {.inject.}: UStreamableRenderAssetPtr;
                               val {.inject.}: int32): void {.
    importcpp: "setnumCinematicMipLevels(@)", header: "UEGenBindings.h".}
proc `neverStream`*(obj {.inject.}: UStreamableRenderAssetPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `neverStream=`*(obj {.inject.}: UStreamableRenderAssetPtr;
                     val {.inject.}: uint8): void {.
    importcpp: "setneverStream(@)", header: "UEGenBindings.h".}
proc `bGlobalForceMipLevelsToBeResident`*(
    obj {.inject.}: UStreamableRenderAssetPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bGlobalForceMipLevelsToBeResident=`*(
    obj {.inject.}: UStreamableRenderAssetPtr; val {.inject.}: uint8): void {.
    importcpp: "setbGlobalForceMipLevelsToBeResident(@)",
    header: "UEGenBindings.h".}
proc setForceMipLevelsToBeResident*(obj {.inject.}: UStreamableRenderAssetPtr;
                                    seconds {.inject.}: float32;
                                    cinematicLODGroupMask {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustBrightness`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustBrightness=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setadjustBrightness(@)", header: "UEGenBindings.h".}
proc `adjustBrightnessCurve`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustBrightnessCurve=`*(obj {.inject.}: UTexturePtr;
                               val {.inject.}: float32): void {.
    importcpp: "setadjustBrightnessCurve(@)", header: "UEGenBindings.h".}
proc `adjustVibrance`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustVibrance=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setadjustVibrance(@)", header: "UEGenBindings.h".}
proc `adjustSaturation`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustSaturation=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setadjustSaturation(@)", header: "UEGenBindings.h".}
proc `adjustRGBCurve`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustRGBCurve=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setadjustRGBCurve(@)", header: "UEGenBindings.h".}
proc `adjustHue`*(obj {.inject.}: UTexturePtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `adjustHue=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setadjustHue(@)", header: "UEGenBindings.h".}
proc `adjustMinAlpha`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustMinAlpha=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setadjustMinAlpha(@)", header: "UEGenBindings.h".}
proc `adjustMaxAlpha`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `adjustMaxAlpha=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setadjustMaxAlpha(@)", header: "UEGenBindings.h".}
proc `compressionNoAlpha`*(obj {.inject.}: UTexturePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compressionNoAlpha=`*(obj {.inject.}: UTexturePtr; val {.inject.}: uint8): void {.
    importcpp: "setcompressionNoAlpha(@)", header: "UEGenBindings.h".}
proc `deferCompression`*(obj {.inject.}: UTexturePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `deferCompression=`*(obj {.inject.}: UTexturePtr; val {.inject.}: uint8): void {.
    importcpp: "setdeferCompression(@)", header: "UEGenBindings.h".}
proc `lossyCompressionAmount`*(obj {.inject.}: UTexturePtr): ETextureLossyCompressionAmount {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lossyCompressionAmount=`*(obj {.inject.}: UTexturePtr;
                                val {.inject.}: ETextureLossyCompressionAmount): void {.
    importcpp: "setlossyCompressionAmount(@)", header: "UEGenBindings.h".}
proc `oodleTextureSdkVersion`*(obj {.inject.}: UTexturePtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `oodleTextureSdkVersion=`*(obj {.inject.}: UTexturePtr;
                                val {.inject.}: FName): void {.
    importcpp: "setoodleTextureSdkVersion(@)", header: "UEGenBindings.h".}
proc `maxTextureSize`*(obj {.inject.}: UTexturePtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `maxTextureSize=`*(obj {.inject.}: UTexturePtr; val {.inject.}: int32): void {.
    importcpp: "setmaxTextureSize(@)", header: "UEGenBindings.h".}
proc `compressionQuality`*(obj {.inject.}: UTexturePtr): ETextureCompressionQuality {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compressionQuality=`*(obj {.inject.}: UTexturePtr;
                            val {.inject.}: ETextureCompressionQuality): void {.
    importcpp: "setcompressionQuality(@)", header: "UEGenBindings.h".}
proc `bDitherMipMapAlpha`*(obj {.inject.}: UTexturePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDitherMipMapAlpha=`*(obj {.inject.}: UTexturePtr; val {.inject.}: uint8): void {.
    importcpp: "setbDitherMipMapAlpha(@)", header: "UEGenBindings.h".}
proc `bDoScaleMipsForAlphaCoverage`*(obj {.inject.}: UTexturePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDoScaleMipsForAlphaCoverage=`*(obj {.inject.}: UTexturePtr;
                                      val {.inject.}: bool): void {.
    importcpp: "setbDoScaleMipsForAlphaCoverage(@)", header: "UEGenBindings.h".}
proc `alphaCoverageThresholds`*(obj {.inject.}: UTexturePtr): FVector4 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `alphaCoverageThresholds=`*(obj {.inject.}: UTexturePtr;
                                 val {.inject.}: FVector4): void {.
    importcpp: "setalphaCoverageThresholds(@)", header: "UEGenBindings.h".}
proc `bPreserveBorder`*(obj {.inject.}: UTexturePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPreserveBorder=`*(obj {.inject.}: UTexturePtr; val {.inject.}: uint8): void {.
    importcpp: "setbPreserveBorder(@)", header: "UEGenBindings.h".}
proc `bFlipGreenChannel`*(obj {.inject.}: UTexturePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bFlipGreenChannel=`*(obj {.inject.}: UTexturePtr; val {.inject.}: uint8): void {.
    importcpp: "setbFlipGreenChannel(@)", header: "UEGenBindings.h".}
proc `powerOfTwoMode`*(obj {.inject.}: UTexturePtr): ETexturePowerOfTwoSetting::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `powerOfTwoMode=`*(obj {.inject.}: UTexturePtr;
                        val {.inject.}: ETexturePowerOfTwoSetting::Type): void {.
    importcpp: "setpowerOfTwoMode(@)", header: "UEGenBindings.h".}
proc `paddingColor`*(obj {.inject.}: UTexturePtr): FColor {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `paddingColor=`*(obj {.inject.}: UTexturePtr; val {.inject.}: FColor): void {.
    importcpp: "setpaddingColor(@)", header: "UEGenBindings.h".}
proc `bChromaKeyTexture`*(obj {.inject.}: UTexturePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bChromaKeyTexture=`*(obj {.inject.}: UTexturePtr; val {.inject.}: bool): void {.
    importcpp: "setbChromaKeyTexture(@)", header: "UEGenBindings.h".}
proc `chromaKeyThreshold`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `chromaKeyThreshold=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setchromaKeyThreshold(@)", header: "UEGenBindings.h".}
proc `chromaKeyColor`*(obj {.inject.}: UTexturePtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `chromaKeyColor=`*(obj {.inject.}: UTexturePtr; val {.inject.}: FColor): void {.
    importcpp: "setchromaKeyColor(@)", header: "UEGenBindings.h".}
proc `mipGenSettings`*(obj {.inject.}: UTexturePtr): TextureMipGenSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mipGenSettings=`*(obj {.inject.}: UTexturePtr;
                        val {.inject.}: TextureMipGenSettings): void {.
    importcpp: "setmipGenSettings(@)", header: "UEGenBindings.h".}
proc `compositeTexture`*(obj {.inject.}: UTexturePtr): TObjectPtr[UTexture] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compositeTexture=`*(obj {.inject.}: UTexturePtr;
                          val {.inject.}: TObjectPtr[UTexture]): void {.
    importcpp: "setcompositeTexture(@)", header: "UEGenBindings.h".}
proc `compositeTextureMode`*(obj {.inject.}: UTexturePtr): ECompositeTextureMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compositeTextureMode=`*(obj {.inject.}: UTexturePtr;
                              val {.inject.}: ECompositeTextureMode): void {.
    importcpp: "setcompositeTextureMode(@)", header: "UEGenBindings.h".}
proc `compositePower`*(obj {.inject.}: UTexturePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compositePower=`*(obj {.inject.}: UTexturePtr; val {.inject.}: float32): void {.
    importcpp: "setcompositePower(@)", header: "UEGenBindings.h".}
proc `lODBias`*(obj {.inject.}: UTexturePtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `lODBias=`*(obj {.inject.}: UTexturePtr; val {.inject.}: int32): void {.
    importcpp: "setlODBias(@)", header: "UEGenBindings.h".}
proc `compressionSettings`*(obj {.inject.}: UTexturePtr): TextureCompressionSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compressionSettings=`*(obj {.inject.}: UTexturePtr;
                             val {.inject.}: TextureCompressionSettings): void {.
    importcpp: "setcompressionSettings(@)", header: "UEGenBindings.h".}
proc `filter`*(obj {.inject.}: UTexturePtr): TextureFilter {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `filter=`*(obj {.inject.}: UTexturePtr; val {.inject.}: TextureFilter): void {.
    importcpp: "setfilter(@)", header: "UEGenBindings.h".}
proc `mipLoadOptions`*(obj {.inject.}: UTexturePtr): ETextureMipLoadOptions {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mipLoadOptions=`*(obj {.inject.}: UTexturePtr;
                        val {.inject.}: ETextureMipLoadOptions): void {.
    importcpp: "setmipLoadOptions(@)", header: "UEGenBindings.h".}
proc `lODGroup`*(obj {.inject.}: UTexturePtr): TextureGroup {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lODGroup=`*(obj {.inject.}: UTexturePtr; val {.inject.}: TextureGroup): void {.
    importcpp: "setlODGroup(@)", header: "UEGenBindings.h".}
proc `sRGB`*(obj {.inject.}: UTexturePtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `sRGB=`*(obj {.inject.}: UTexturePtr; val {.inject.}: uint8): void {.
    importcpp: "setsRGB(@)", header: "UEGenBindings.h".}
proc `sourceColorSettings`*(obj {.inject.}: UTexturePtr): FTextureSourceColorSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceColorSettings=`*(obj {.inject.}: UTexturePtr;
                             val {.inject.}: FTextureSourceColorSettings): void {.
    importcpp: "setsourceColorSettings(@)", header: "UEGenBindings.h".}
proc `bUseLegacyGamma`*(obj {.inject.}: UTexturePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseLegacyGamma=`*(obj {.inject.}: UTexturePtr; val {.inject.}: uint8): void {.
    importcpp: "setbUseLegacyGamma(@)", header: "UEGenBindings.h".}
proc `virtualTextureStreaming`*(obj {.inject.}: UTexturePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `virtualTextureStreaming=`*(obj {.inject.}: UTexturePtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setvirtualTextureStreaming(@)", header: "UEGenBindings.h".}
proc `forcedLodModel`*(obj {.inject.}: UStaticMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forcedLodModel=`*(obj {.inject.}: UStaticMeshComponentPtr;
                        val {.inject.}: int32): void {.
    importcpp: "setforcedLodModel(@)", header: "UEGenBindings.h".}
proc `minLOD`*(obj {.inject.}: UStaticMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minLOD=`*(obj {.inject.}: UStaticMeshComponentPtr; val {.inject.}: int32): void {.
    importcpp: "setminLOD(@)", header: "UEGenBindings.h".}
proc `staticMesh`*(obj {.inject.}: UStaticMeshComponentPtr): TObjectPtr[
    UStaticMesh] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `staticMesh=`*(obj {.inject.}: UStaticMeshComponentPtr;
                    val {.inject.}: TObjectPtr[UStaticMesh]): void {.
    importcpp: "setstaticMesh(@)", header: "UEGenBindings.h".}
proc `wireframeColorOverride`*(obj {.inject.}: UStaticMeshComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `wireframeColorOverride=`*(obj {.inject.}: UStaticMeshComponentPtr;
                                val {.inject.}: FColor): void {.
    importcpp: "setwireframeColorOverride(@)", header: "UEGenBindings.h".}
proc `bEvaluateWorldPositionOffset`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEvaluateWorldPositionOffset=`*(obj {.inject.}: UStaticMeshComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbEvaluateWorldPositionOffset(@)", header: "UEGenBindings.h".}
proc `bOverrideWireframeColor`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideWireframeColor=`*(obj {.inject.}: UStaticMeshComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbOverrideWireframeColor(@)", header: "UEGenBindings.h".}
proc `bOverrideMinLOD`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideMinLOD=`*(obj {.inject.}: UStaticMeshComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbOverrideMinLOD(@)", header: "UEGenBindings.h".}
proc `bDisallowMeshPaintPerInstance`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisallowMeshPaintPerInstance=`*(obj {.inject.}: UStaticMeshComponentPtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbDisallowMeshPaintPerInstance(@)", header: "UEGenBindings.h".}
proc `bIgnoreInstanceForTextureStreaming`*(
    obj {.inject.}: UStaticMeshComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bIgnoreInstanceForTextureStreaming=`*(
    obj {.inject.}: UStaticMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreInstanceForTextureStreaming(@)",
    header: "UEGenBindings.h".}
proc `bOverrideLightMapRes`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideLightMapRes=`*(obj {.inject.}: UStaticMeshComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbOverrideLightMapRes(@)", header: "UEGenBindings.h".}
proc `bCastDistanceFieldIndirectShadow`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastDistanceFieldIndirectShadow=`*(
    obj {.inject.}: UStaticMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbCastDistanceFieldIndirectShadow(@)",
    header: "UEGenBindings.h".}
proc `bOverrideDistanceFieldSelfShadowBias`*(
    obj {.inject.}: UStaticMeshComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bOverrideDistanceFieldSelfShadowBias=`*(
    obj {.inject.}: UStaticMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbOverrideDistanceFieldSelfShadowBias(@)",
    header: "UEGenBindings.h".}
proc `bSortTriangles`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSortTriangles=`*(obj {.inject.}: UStaticMeshComponentPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbSortTriangles(@)", header: "UEGenBindings.h".}
proc `bReverseCulling`*(obj {.inject.}: UStaticMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReverseCulling=`*(obj {.inject.}: UStaticMeshComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbReverseCulling(@)", header: "UEGenBindings.h".}
proc `overriddenLightMapRes`*(obj {.inject.}: UStaticMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `overriddenLightMapRes=`*(obj {.inject.}: UStaticMeshComponentPtr;
                               val {.inject.}: int32): void {.
    importcpp: "setoverriddenLightMapRes(@)", header: "UEGenBindings.h".}
proc `distanceFieldIndirectShadowMinVisibility`*(
    obj {.inject.}: UStaticMeshComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `distanceFieldIndirectShadowMinVisibility=`*(
    obj {.inject.}: UStaticMeshComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setdistanceFieldIndirectShadowMinVisibility(@)",
    header: "UEGenBindings.h".}
proc `distanceFieldSelfShadowBias`*(obj {.inject.}: UStaticMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `distanceFieldSelfShadowBias=`*(obj {.inject.}: UStaticMeshComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setdistanceFieldSelfShadowBias(@)", header: "UEGenBindings.h".}
proc `streamingDistanceMultiplier`*(obj {.inject.}: UStaticMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `streamingDistanceMultiplier=`*(obj {.inject.}: UStaticMeshComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setstreamingDistanceMultiplier(@)", header: "UEGenBindings.h".}
proc setStaticMesh*(obj {.inject.}: UStaticMeshComponentPtr;
                    newMesh {.inject.}: UStaticMeshPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReverseCulling*(obj {.inject.}: UStaticMeshComponentPtr;
                        reverseCulling {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setForcedLodModel*(obj {.inject.}: UStaticMeshComponentPtr;
                        newForcedLodModel {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEvaluateWorldPositionOffsetInRayTracing*(
    obj {.inject.}: UStaticMeshComponentPtr; newValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDistanceFieldSelfShadowBias*(obj {.inject.}: UStaticMeshComponentPtr;
                                     newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocalBounds*(obj {.inject.}: UStaticMeshComponentPtr;
                     min {.inject.}: var FVector; max {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseControllerRotationPitch`*(obj {.inject.}: APawnPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseControllerRotationPitch=`*(obj {.inject.}: APawnPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbUseControllerRotationPitch(@)", header: "UEGenBindings.h".}
proc `bUseControllerRotationYaw`*(obj {.inject.}: APawnPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseControllerRotationYaw=`*(obj {.inject.}: APawnPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbUseControllerRotationYaw(@)", header: "UEGenBindings.h".}
proc `bUseControllerRotationRoll`*(obj {.inject.}: APawnPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseControllerRotationRoll=`*(obj {.inject.}: APawnPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbUseControllerRotationRoll(@)", header: "UEGenBindings.h".}
proc `bCanAffectNavigationGeneration`*(obj {.inject.}: APawnPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCanAffectNavigationGeneration=`*(obj {.inject.}: APawnPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbCanAffectNavigationGeneration(@)", header: "UEGenBindings.h".}
proc `baseEyeHeight`*(obj {.inject.}: APawnPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `baseEyeHeight=`*(obj {.inject.}: APawnPtr; val {.inject.}: float32): void {.
    importcpp: "setbaseEyeHeight(@)", header: "UEGenBindings.h".}
proc `aIControllerClass`*(obj {.inject.}: APawnPtr): TSubclassOf[AController] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `aIControllerClass=`*(obj {.inject.}: APawnPtr;
                           val {.inject.}: TSubclassOf[AController]): void {.
    importcpp: "setaIControllerClass(@)", header: "UEGenBindings.h".}
proc `playerState`*(obj {.inject.}: APawnPtr): TObjectPtr[APlayerState] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerState=`*(obj {.inject.}: APawnPtr;
                     val {.inject.}: TObjectPtr[APlayerState]): void {.
    importcpp: "setplayerState(@)", header: "UEGenBindings.h".}
proc `lastHitBy`*(obj {.inject.}: APawnPtr): TObjectPtr[AController] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lastHitBy=`*(obj {.inject.}: APawnPtr;
                   val {.inject.}: TObjectPtr[AController]): void {.
    importcpp: "setlastHitBy(@)", header: "UEGenBindings.h".}
proc spawnDefaultController*(obj {.inject.}: APawnPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCanAffectNavigationGeneration*(obj {.inject.}: APawnPtr;
                                       bNewValue {.inject.}: bool;
                                       bForceUpdate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pawnMakeNoise*(obj {.inject.}: APawnPtr; loudness {.inject.}: float32;
                    noiseLocation {.inject.}: FVector;
                    bUseNoiseMakerLocation {.inject.}: bool;
                    noiseMaker {.inject.}: AActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPlayerControlled*(obj {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isPawnControlled*(obj {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isMoveInputIgnored*(obj {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isLocallyViewed*(obj {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isLocallyControlled*(obj {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isControlled*(obj {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isBotControlled*(obj {.inject.}: APawnPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPendingMovementInputVector*(obj {.inject.}: APawnPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNavAgentLocation*(obj {.inject.}: APawnPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMovementComponent*(obj {.inject.}: APawnPtr): UPawnMovementComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMovementBaseActor*(pawn {.inject.}: APawnPtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocalViewingPlayerController*(obj {.inject.}: APawnPtr): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLastMovementInputVector*(obj {.inject.}: APawnPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getControlRotation*(obj {.inject.}: APawnPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getController*(obj {.inject.}: APawnPtr): AControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBaseAimRotation*(obj {.inject.}: APawnPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc detachFromControllerPendingDestroy*(obj {.inject.}: APawnPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc consumeMovementInputVector*(obj {.inject.}: APawnPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addMovementInput*(obj {.inject.}: APawnPtr;
                       worldDirection {.inject.}: FVector;
                       scaleValue {.inject.}: float32; bForce {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addControllerYawInput*(obj {.inject.}: APawnPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addControllerRollInput*(obj {.inject.}: APawnPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addControllerPitchInput*(obj {.inject.}: APawnPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mesh`*(obj {.inject.}: ACharacterPtr): TObjectPtr[USkeletalMeshComponent] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mesh=`*(obj {.inject.}: ACharacterPtr;
              val {.inject.}: TObjectPtr[USkeletalMeshComponent]): void {.
    importcpp: "setmesh(@)", header: "UEGenBindings.h".}
proc `characterMovement`*(obj {.inject.}: ACharacterPtr): TObjectPtr[
    UCharacterMovementComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `characterMovement=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: TObjectPtr[
    UCharacterMovementComponent]): void {.importcpp: "setcharacterMovement(@)",
    header: "UEGenBindings.h".}
proc `capsuleComponent`*(obj {.inject.}: ACharacterPtr): TObjectPtr[
    UCapsuleComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `capsuleComponent=`*(obj {.inject.}: ACharacterPtr;
                          val {.inject.}: TObjectPtr[UCapsuleComponent]): void {.
    importcpp: "setcapsuleComponent(@)", header: "UEGenBindings.h".}
proc `crouchedEyeHeight`*(obj {.inject.}: ACharacterPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `crouchedEyeHeight=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: float32): void {.
    importcpp: "setcrouchedEyeHeight(@)", header: "UEGenBindings.h".}
proc `bIsCrouched`*(obj {.inject.}: ACharacterPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bIsCrouched=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsCrouched(@)", header: "UEGenBindings.h".}
proc `bPressedJump`*(obj {.inject.}: ACharacterPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bPressedJump=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: uint8): void {.
    importcpp: "setbPressedJump(@)", header: "UEGenBindings.h".}
proc `bWasJumping`*(obj {.inject.}: ACharacterPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bWasJumping=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: uint8): void {.
    importcpp: "setbWasJumping(@)", header: "UEGenBindings.h".}
proc `jumpKeyHoldTime`*(obj {.inject.}: ACharacterPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpKeyHoldTime=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: float32): void {.
    importcpp: "setjumpKeyHoldTime(@)", header: "UEGenBindings.h".}
proc `jumpForceTimeRemaining`*(obj {.inject.}: ACharacterPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpForceTimeRemaining=`*(obj {.inject.}: ACharacterPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setjumpForceTimeRemaining(@)", header: "UEGenBindings.h".}
proc `proxyJumpForceStartedTime`*(obj {.inject.}: ACharacterPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `proxyJumpForceStartedTime=`*(obj {.inject.}: ACharacterPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setproxyJumpForceStartedTime(@)", header: "UEGenBindings.h".}
proc `jumpMaxHoldTime`*(obj {.inject.}: ACharacterPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpMaxHoldTime=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: float32): void {.
    importcpp: "setjumpMaxHoldTime(@)", header: "UEGenBindings.h".}
proc `jumpMaxCount`*(obj {.inject.}: ACharacterPtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `jumpMaxCount=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: int32): void {.
    importcpp: "setjumpMaxCount(@)", header: "UEGenBindings.h".}
proc `jumpCurrentCount`*(obj {.inject.}: ACharacterPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpCurrentCount=`*(obj {.inject.}: ACharacterPtr; val {.inject.}: int32): void {.
    importcpp: "setjumpCurrentCount(@)", header: "UEGenBindings.h".}
proc `jumpCurrentCountPreJump`*(obj {.inject.}: ACharacterPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpCurrentCountPreJump=`*(obj {.inject.}: ACharacterPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setjumpCurrentCountPreJump(@)", header: "UEGenBindings.h".}
proc unCrouch*(obj {.inject.}: ACharacterPtr; bClientSimulation {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopJumping*(obj {.inject.}: ACharacterPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc stopAnimMontage*(obj {.inject.}: ACharacterPtr;
                      animMontage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playAnimMontage*(obj {.inject.}: ACharacterPtr;
                      animMontage {.inject.}: UAnimMontagePtr;
                      inPlayRate {.inject.}: float32;
                      startSectionName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc launchCharacter*(obj {.inject.}: ACharacterPtr;
                      launchVelocity {.inject.}: FVector;
                      bXYOverride {.inject.}: bool; bZOverride {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc jump*(obj {.inject.}: ACharacterPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isPlayingRootMotion*(obj {.inject.}: ACharacterPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPlayingNetworkedRootMotionMontage*(obj {.inject.}: ACharacterPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isJumpProvidingForce*(obj {.inject.}: ACharacterPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasAnyRootMotion*(obj {.inject.}: ACharacterPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentMontage*(obj {.inject.}: ACharacterPtr): UAnimMontagePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBaseTranslationOffset*(obj {.inject.}: ACharacterPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBaseRotationOffsetRotator*(obj {.inject.}: ACharacterPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAnimRootMotionTranslationScale*(obj {.inject.}: ACharacterPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc crouch*(obj {.inject.}: ACharacterPtr; bClientSimulation {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canJump*(obj {.inject.}: ACharacterPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc canCrouch*(obj {.inject.}: ACharacterPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc cacheInitialMeshOffset*(obj {.inject.}: ACharacterPtr;
                             meshRelativeLocation {.inject.}: FVector;
                             meshRelativeRotation {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldSettings*(obj {.inject.}: UWorldPtr): AWorldSettingsPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraComponent`*(obj {.inject.}: ACameraActorPtr): TObjectPtr[
    UCameraComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraComponent=`*(obj {.inject.}: ACameraActorPtr;
                         val {.inject.}: TObjectPtr[UCameraComponent]): void {.
    importcpp: "setcameraComponent(@)", header: "UEGenBindings.h".}
proc `sceneComponent`*(obj {.inject.}: ACameraActorPtr): TObjectPtr[
    USceneComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sceneComponent=`*(obj {.inject.}: ACameraActorPtr;
                        val {.inject.}: TObjectPtr[USceneComponent]): void {.
    importcpp: "setsceneComponent(@)", header: "UEGenBindings.h".}
proc getAutoActivatePlayerIndex*(obj {.inject.}: ACameraActorPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fieldOfView`*(obj {.inject.}: UCameraComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fieldOfView=`*(obj {.inject.}: UCameraComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setfieldOfView(@)", header: "UEGenBindings.h".}
proc `orthoWidth`*(obj {.inject.}: UCameraComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `orthoWidth=`*(obj {.inject.}: UCameraComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setorthoWidth(@)", header: "UEGenBindings.h".}
proc `orthoNearClipPlane`*(obj {.inject.}: UCameraComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `orthoNearClipPlane=`*(obj {.inject.}: UCameraComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setorthoNearClipPlane(@)", header: "UEGenBindings.h".}
proc `orthoFarClipPlane`*(obj {.inject.}: UCameraComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `orthoFarClipPlane=`*(obj {.inject.}: UCameraComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setorthoFarClipPlane(@)", header: "UEGenBindings.h".}
proc `aspectRatio`*(obj {.inject.}: UCameraComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `aspectRatio=`*(obj {.inject.}: UCameraComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setaspectRatio(@)", header: "UEGenBindings.h".}
proc `bConstrainAspectRatio`*(obj {.inject.}: UCameraComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bConstrainAspectRatio=`*(obj {.inject.}: UCameraComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbConstrainAspectRatio(@)", header: "UEGenBindings.h".}
proc `bUseFieldOfViewForLOD`*(obj {.inject.}: UCameraComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseFieldOfViewForLOD=`*(obj {.inject.}: UCameraComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbUseFieldOfViewForLOD(@)", header: "UEGenBindings.h".}
proc `bDrawFrustumAllowed`*(obj {.inject.}: UCameraComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDrawFrustumAllowed=`*(obj {.inject.}: UCameraComponentPtr;
                             val {.inject.}: bool): void {.
    importcpp: "setbDrawFrustumAllowed(@)", header: "UEGenBindings.h".}
proc `bCameraMeshHiddenInGame`*(obj {.inject.}: UCameraComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCameraMeshHiddenInGame=`*(obj {.inject.}: UCameraComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbCameraMeshHiddenInGame(@)", header: "UEGenBindings.h".}
proc `bLockToHmd`*(obj {.inject.}: UCameraComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bLockToHmd=`*(obj {.inject.}: UCameraComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbLockToHmd(@)", header: "UEGenBindings.h".}
proc `bUsePawnControlRotation`*(obj {.inject.}: UCameraComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsePawnControlRotation=`*(obj {.inject.}: UCameraComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbUsePawnControlRotation(@)", header: "UEGenBindings.h".}
proc `projectionMode`*(obj {.inject.}: UCameraComponentPtr): ECameraProjectionMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `projectionMode=`*(obj {.inject.}: UCameraComponentPtr;
                        val {.inject.}: ECameraProjectionMode::Type): void {.
    importcpp: "setprojectionMode(@)", header: "UEGenBindings.h".}
proc `cameraMesh`*(obj {.inject.}: UCameraComponentPtr): TObjectPtr[UStaticMesh] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraMesh=`*(obj {.inject.}: UCameraComponentPtr;
                    val {.inject.}: TObjectPtr[UStaticMesh]): void {.
    importcpp: "setcameraMesh(@)", header: "UEGenBindings.h".}
proc `postProcessBlendWeight`*(obj {.inject.}: UCameraComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `postProcessBlendWeight=`*(obj {.inject.}: UCameraComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setpostProcessBlendWeight(@)", header: "UEGenBindings.h".}
proc `postProcessSettings`*(obj {.inject.}: UCameraComponentPtr): FPostProcessSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `postProcessSettings=`*(obj {.inject.}: UCameraComponentPtr;
                             val {.inject.}: FPostProcessSettings): void {.
    importcpp: "setpostProcessSettings(@)", header: "UEGenBindings.h".}
proc setUseFieldOfViewForLOD*(obj {.inject.}: UCameraComponentPtr;
                              bInUseFieldOfViewForLOD {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setProjectionMode*(obj {.inject.}: UCameraComponentPtr;
                        inProjectionMode {.inject.}: ECameraProjectionMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPostProcessBlendWeight*(obj {.inject.}: UCameraComponentPtr;
                                inPostProcessBlendWeight {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOrthoWidth*(obj {.inject.}: UCameraComponentPtr;
                    inOrthoWidth {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOrthoNearClipPlane*(obj {.inject.}: UCameraComponentPtr;
                            inOrthoNearClipPlane {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOrthoFarClipPlane*(obj {.inject.}: UCameraComponentPtr;
                           inOrthoFarClipPlane {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFieldOfView*(obj {.inject.}: UCameraComponentPtr;
                     inFieldOfView {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstraintAspectRatio*(obj {.inject.}: UCameraComponentPtr;
                               bInConstrainAspectRatio {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAspectRatio*(obj {.inject.}: UCameraComponentPtr;
                     inAspectRatio {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeBlendable*(obj {.inject.}: UCameraComponentPtr;
    inBlendableObject {.inject.}: TScriptInterface[UBlendableInterface]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc onCameraMeshHiddenChanged*(obj {.inject.}: UCameraComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCameraView*(obj {.inject.}: UCameraComponentPtr;
                    deltaTime {.inject.}: float32;
                    desiredView {.inject.}: var FMinimalViewInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addOrUpdateBlendable*(obj {.inject.}: UCameraComponentPtr;
    inBlendableObject {.inject.}: TScriptInterface[UBlendableInterface];
                           inWeight {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skeletalMesh`*(obj {.inject.}: USkinnedMeshComponentPtr): TObjectPtr[
    USkeletalMesh] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skeletalMesh=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                      val {.inject.}: TObjectPtr[USkeletalMesh]): void {.
    importcpp: "setskeletalMesh(@)", header: "UEGenBindings.h".}
proc `masterPoseComponent`*(obj {.inject.}: USkinnedMeshComponentPtr): TWeakObjectPtr[
    USkinnedMeshComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `masterPoseComponent=`*(obj {.inject.}: USkinnedMeshComponentPtr;
    val {.inject.}: TWeakObjectPtr[USkinnedMeshComponent]): void {.
    importcpp: "setmasterPoseComponent(@)", header: "UEGenBindings.h".}
proc `skinCacheUsage`*(obj {.inject.}: USkinnedMeshComponentPtr): var TArray[
    ESkinCacheUsage] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skinCacheUsage=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                        val {.inject.}: TArray[ESkinCacheUsage]): void {.
    importcpp: "setskinCacheUsage(@)", header: "UEGenBindings.h".}
proc `meshDeformer`*(obj {.inject.}: USkinnedMeshComponentPtr): TObjectPtr[
    UMeshDeformer] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `meshDeformer=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                      val {.inject.}: TObjectPtr[UMeshDeformer]): void {.
    importcpp: "setmeshDeformer(@)", header: "UEGenBindings.h".}
proc `physicsAssetOverride`*(obj {.inject.}: USkinnedMeshComponentPtr): TObjectPtr[
    UPhysicsAsset] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `physicsAssetOverride=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                              val {.inject.}: TObjectPtr[UPhysicsAsset]): void {.
    importcpp: "setphysicsAssetOverride(@)", header: "UEGenBindings.h".}
proc `forcedLodModel`*(obj {.inject.}: USkinnedMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forcedLodModel=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                        val {.inject.}: int32): void {.
    importcpp: "setforcedLodModel(@)", header: "UEGenBindings.h".}
proc `minLodModel`*(obj {.inject.}: USkinnedMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minLodModel=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                     val {.inject.}: int32): void {.
    importcpp: "setminLodModel(@)", header: "UEGenBindings.h".}
proc `streamingDistanceMultiplier`*(obj {.inject.}: USkinnedMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `streamingDistanceMultiplier=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setstreamingDistanceMultiplier(@)", header: "UEGenBindings.h".}
proc `visibilityBasedAnimTickOption`*(obj {.inject.}: USkinnedMeshComponentPtr): EVisibilityBasedAnimTickOption {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `visibilityBasedAnimTickOption=`*(obj {.inject.}: USkinnedMeshComponentPtr;
    val {.inject.}: EVisibilityBasedAnimTickOption): void {.
    importcpp: "setvisibilityBasedAnimTickOption(@)", header: "UEGenBindings.h".}
proc `bOverrideMinLod`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideMinLod=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbOverrideMinLod(@)", header: "UEGenBindings.h".}
proc `bUseBoundsFromMasterPoseComponent`*(
    obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bUseBoundsFromMasterPoseComponent=`*(
    obj {.inject.}: USkinnedMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUseBoundsFromMasterPoseComponent(@)",
    header: "UEGenBindings.h".}
proc `bDisableMorphTarget`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableMorphTarget=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbDisableMorphTarget(@)", header: "UEGenBindings.h".}
proc `bPerBoneMotionBlur`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPerBoneMotionBlur=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbPerBoneMotionBlur(@)", header: "UEGenBindings.h".}
proc `bComponentUseFixedSkelBounds`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bComponentUseFixedSkelBounds=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbComponentUseFixedSkelBounds(@)", header: "UEGenBindings.h".}
proc `bConsiderAllBodiesForBounds`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bConsiderAllBodiesForBounds=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbConsiderAllBodiesForBounds(@)", header: "UEGenBindings.h".}
proc `bSyncAttachParentLOD`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSyncAttachParentLOD=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbSyncAttachParentLOD(@)", header: "UEGenBindings.h".}
proc `bCastCapsuleDirectShadow`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastCapsuleDirectShadow=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbCastCapsuleDirectShadow(@)", header: "UEGenBindings.h".}
proc `bCastCapsuleIndirectShadow`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastCapsuleIndirectShadow=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbCastCapsuleIndirectShadow(@)", header: "UEGenBindings.h".}
proc `bEnableUpdateRateOptimizations`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableUpdateRateOptimizations=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbEnableUpdateRateOptimizations(@)", header: "UEGenBindings.h".}
proc `bDisplayDebugUpdateRateOptimizations`*(
    obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bDisplayDebugUpdateRateOptimizations=`*(
    obj {.inject.}: USkinnedMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbDisplayDebugUpdateRateOptimizations(@)",
    header: "UEGenBindings.h".}
proc `bRenderStatic`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRenderStatic=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                       val {.inject.}: uint8): void {.
    importcpp: "setbRenderStatic(@)", header: "UEGenBindings.h".}
proc `bIgnoreMasterPoseComponentLOD`*(obj {.inject.}: USkinnedMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIgnoreMasterPoseComponentLOD=`*(obj {.inject.}: USkinnedMeshComponentPtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreMasterPoseComponentLOD(@)", header: "UEGenBindings.h".}
proc `capsuleIndirectShadowMinVisibility`*(
    obj {.inject.}: USkinnedMeshComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `capsuleIndirectShadowMinVisibility=`*(
    obj {.inject.}: USkinnedMeshComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setcapsuleIndirectShadowMinVisibility(@)",
    header: "UEGenBindings.h".}
proc unloadSkinWeightProfile*(obj {.inject.}: USkinnedMeshComponentPtr;
                              inProfileName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unHideBoneByName*(obj {.inject.}: USkinnedMeshComponentPtr;
                       boneName {.inject.}: FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc transformToBoneSpace*(obj {.inject.}: USkinnedMeshComponentPtr;
                           boneName {.inject.}: FName;
                           inPosition {.inject.}: FVector;
                           inRotation {.inject.}: FRotator;
                           outPosition {.inject.}: var FVector;
                           outRotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc transformFromBoneSpace*(obj {.inject.}: USkinnedMeshComponentPtr;
                             boneName {.inject.}: FName;
                             inPosition {.inject.}: FVector;
                             inRotation {.inject.}: FRotator;
                             outPosition {.inject.}: var FVector;
                             outRotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc showMaterialSection*(obj {.inject.}: USkinnedMeshComponentPtr;
                          materialID {.inject.}: int32;
                          sectionIndex {.inject.}: int32; bShow {.inject.}: bool;
                          lODIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc showAllMaterialSections*(obj {.inject.}: USkinnedMeshComponentPtr;
                              lODIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVertexOffsetUsage*(obj {.inject.}: USkinnedMeshComponentPtr;
                           lODIndex {.inject.}: int32; usage {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVertexColorOverride_LinearColor*(
    obj {.inject.}: USkinnedMeshComponentPtr; lODIndex {.inject.}: int32;
    vertexColors {.inject.}: var TArray[FLinearColor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSkinWeightProfile*(obj {.inject.}: USkinnedMeshComponentPtr;
                           inProfileName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSkinWeightOverride*(obj {.inject.}: USkinnedMeshComponentPtr;
                            lODIndex {.inject.}: int32; skinWeights {.inject.}: var TArray[
    FSkelMeshSkinWeightInfo]): void {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc setSkeletalMesh*(obj {.inject.}: USkinnedMeshComponentPtr;
                      newMesh {.inject.}: USkeletalMeshPtr;
                      bReinitPose {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setRenderStatic*(obj {.inject.}: USkinnedMeshComponentPtr;
                      bNewValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPreSkinningOffsets*(obj {.inject.}: USkinnedMeshComponentPtr;
                            lODIndex {.inject.}: int32;
                            offsets {.inject.}: TArray[FVector]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPostSkinningOffsets*(obj {.inject.}: USkinnedMeshComponentPtr;
                             lODIndex {.inject.}: int32;
                             offsets {.inject.}: TArray[FVector]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPhysicsAsset*(obj {.inject.}: USkinnedMeshComponentPtr;
                      newPhysicsAsset {.inject.}: UPhysicsAssetPtr;
                      bForceReInit {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setMinLOD*(obj {.inject.}: USkinnedMeshComponentPtr;
                inNewMinLOD {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setMeshDeformer*(obj {.inject.}: USkinnedMeshComponentPtr;
                      inMeshDeformer {.inject.}: UMeshDeformerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMasterPoseComponent*(obj {.inject.}: USkinnedMeshComponentPtr;
    newMasterBoneComponent {.inject.}: USkinnedMeshComponentPtr;
                             bForceUpdate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setForcedLOD*(obj {.inject.}: USkinnedMeshComponentPtr;
                   inNewForcedLOD {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCastCapsuleIndirectShadow*(obj {.inject.}: USkinnedMeshComponentPtr;
                                   bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastCapsuleDirectShadow*(obj {.inject.}: USkinnedMeshComponentPtr;
                                 bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCapsuleIndirectShadowMinVisibility*(
    obj {.inject.}: USkinnedMeshComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isUsingSkinWeightProfile*(obj {.inject.}: USkinnedMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isMaterialSectionShown*(obj {.inject.}: USkinnedMeshComponentPtr;
                             materialID {.inject.}: int32;
                             lODIndex {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isBoneHiddenByName*(obj {.inject.}: USkinnedMeshComponentPtr;
                         boneName {.inject.}: FName): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc hideBoneByName*(obj {.inject.}: USkinnedMeshComponentPtr;
                     boneName {.inject.}: FName;
                     physBodyOption {.inject.}: EPhysBodyOp): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVertexOffsetUsage*(obj {.inject.}: USkinnedMeshComponentPtr;
                           lODIndex {.inject.}: int32): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTwistAndSwingAngleOfDeltaRotationFromRefPose*(
    obj {.inject.}: USkinnedMeshComponentPtr; boneName {.inject.}: FName;
    outTwistAngle {.inject.}: var float32; outSwingAngle {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSocketBoneName*(obj {.inject.}: USkinnedMeshComponentPtr;
                        inSocketName {.inject.}: FName): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRefPoseTransform*(obj {.inject.}: USkinnedMeshComponentPtr;
                          boneIndex {.inject.}: int32): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRefPosePosition*(obj {.inject.}: USkinnedMeshComponentPtr;
                         boneIndex {.inject.}: int32): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getParentBone*(obj {.inject.}: USkinnedMeshComponentPtr;
                    boneName {.inject.}: FName): FName {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getNumLODs*(obj {.inject.}: USkinnedMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumBones*(obj {.inject.}: USkinnedMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getForcedLOD*(obj {.inject.}: USkinnedMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDeltaTransformFromRefPose*(obj {.inject.}: USkinnedMeshComponentPtr;
                                   boneName {.inject.}: FName;
                                   baseName {.inject.}: FName): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentSkinWeightProfileName*(obj {.inject.}: USkinnedMeshComponentPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneName*(obj {.inject.}: USkinnedMeshComponentPtr;
                  boneIndex {.inject.}: int32): FName {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getBoneIndex*(obj {.inject.}: USkinnedMeshComponentPtr;
                   boneName {.inject.}: FName): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc findClosestBone_K2*(obj {.inject.}: USkinnedMeshComponentPtr;
                         testLocation {.inject.}: FVector;
                         boneLocation {.inject.}: var FVector;
                         ignoreScale {.inject.}: float32;
                         bRequirePhysicsAsset {.inject.}: bool): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearVertexColorOverride*(obj {.inject.}: USkinnedMeshComponentPtr;
                               lODIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearSkinWeightProfile*(obj {.inject.}: USkinnedMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearSkinWeightOverride*(obj {.inject.}: USkinnedMeshComponentPtr;
                              lODIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boneIsChildOf*(obj {.inject.}: USkinnedMeshComponentPtr;
                    boneName {.inject.}: FName; parentBoneName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `animClass`*(obj {.inject.}: USkeletalMeshComponentPtr): TSubclassOf[
    UAnimInstance] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `animClass=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                   val {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "setanimClass(@)", header: "UEGenBindings.h".}
proc `animationData`*(obj {.inject.}: USkeletalMeshComponentPtr): FSingleAnimationPlayData {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `animationData=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                       val {.inject.}: FSingleAnimationPlayData): void {.
    importcpp: "setanimationData(@)", header: "UEGenBindings.h".}
proc `globalAnimRateScale`*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `globalAnimRateScale=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setglobalAnimRateScale(@)", header: "UEGenBindings.h".}
proc `kinematicBonesUpdateType`*(obj {.inject.}: USkeletalMeshComponentPtr): EKinematicBonesUpdateToPhysics::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `kinematicBonesUpdateType=`*(obj {.inject.}: USkeletalMeshComponentPtr;
    val {.inject.}: EKinematicBonesUpdateToPhysics::Type): void {.
    importcpp: "setkinematicBonesUpdateType(@)", header: "UEGenBindings.h".}
proc `physicsTransformUpdateMode`*(obj {.inject.}: USkeletalMeshComponentPtr): EPhysicsTransformUpdateMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `physicsTransformUpdateMode=`*(obj {.inject.}: USkeletalMeshComponentPtr;
    val {.inject.}: EPhysicsTransformUpdateMode::Type): void {.
    importcpp: "setphysicsTransformUpdateMode(@)", header: "UEGenBindings.h".}
proc `animationMode`*(obj {.inject.}: USkeletalMeshComponentPtr): EAnimationMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `animationMode=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                       val {.inject.}: EAnimationMode::Type): void {.
    importcpp: "setanimationMode(@)", header: "UEGenBindings.h".}
proc `bDisablePostProcessBlueprint`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisablePostProcessBlueprint=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbDisablePostProcessBlueprint(@)", header: "UEGenBindings.h".}
proc `bEnablePhysicsOnDedicatedServer`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnablePhysicsOnDedicatedServer=`*(
    obj {.inject.}: USkeletalMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbEnablePhysicsOnDedicatedServer(@)",
    header: "UEGenBindings.h".}
proc `bUpdateJointsFromAnimation`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUpdateJointsFromAnimation=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbUpdateJointsFromAnimation(@)", header: "UEGenBindings.h".}
proc `bAllowClothActors`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAllowClothActors=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbAllowClothActors(@)", header: "UEGenBindings.h".}
proc `bDisableClothSimulation`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableClothSimulation=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbDisableClothSimulation(@)", header: "UEGenBindings.h".}
proc `bCollideWithEnvironment`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCollideWithEnvironment=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbCollideWithEnvironment(@)", header: "UEGenBindings.h".}
proc `bCollideWithAttachedChildren`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCollideWithAttachedChildren=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbCollideWithAttachedChildren(@)", header: "UEGenBindings.h".}
proc `bForceCollisionUpdate`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceCollisionUpdate=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbForceCollisionUpdate(@)", header: "UEGenBindings.h".}
proc `bLocalSpaceSimulation`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bLocalSpaceSimulation=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbLocalSpaceSimulation(@)", header: "UEGenBindings.h".}
proc `bResetAfterTeleport`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bResetAfterTeleport=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbResetAfterTeleport(@)", header: "UEGenBindings.h".}
proc `bDeferKinematicBoneUpdate`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDeferKinematicBoneUpdate=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbDeferKinematicBoneUpdate(@)", header: "UEGenBindings.h".}
proc `bNoSkeletonUpdate`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bNoSkeletonUpdate=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbNoSkeletonUpdate(@)", header: "UEGenBindings.h".}
proc `bPauseAnims`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPauseAnims=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                     val {.inject.}: uint8): void {.
    importcpp: "setbPauseAnims(@)", header: "UEGenBindings.h".}
proc `bEnablePerPolyCollision`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnablePerPolyCollision=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbEnablePerPolyCollision(@)", header: "UEGenBindings.h".}
proc `bIncludeComponentLocationIntoBounds`*(
    obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bIncludeComponentLocationIntoBounds=`*(
    obj {.inject.}: USkeletalMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIncludeComponentLocationIntoBounds(@)",
    header: "UEGenBindings.h".}
proc `bPropagateCurvesToSlaves`*(obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPropagateCurvesToSlaves=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbPropagateCurvesToSlaves(@)", header: "UEGenBindings.h".}
proc `bSkipKinematicUpdateWhenInterpolating`*(
    obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bSkipKinematicUpdateWhenInterpolating=`*(
    obj {.inject.}: USkeletalMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbSkipKinematicUpdateWhenInterpolating(@)",
    header: "UEGenBindings.h".}
proc `bSkipBoundsUpdateWhenInterpolating`*(
    obj {.inject.}: USkeletalMeshComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bSkipBoundsUpdateWhenInterpolating=`*(
    obj {.inject.}: USkeletalMeshComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbSkipBoundsUpdateWhenInterpolating(@)",
    header: "UEGenBindings.h".}
proc `clothBlendWeight`*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `clothBlendWeight=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setclothBlendWeight(@)", header: "UEGenBindings.h".}
proc `bWaitForParallelClothTask`*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bWaitForParallelClothTask=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                   val {.inject.}: bool): void {.
    importcpp: "setbWaitForParallelClothTask(@)", header: "UEGenBindings.h".}
proc `clothMaxDistanceScale`*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `clothMaxDistanceScale=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setclothMaxDistanceScale(@)", header: "UEGenBindings.h".}
proc `teleportDistanceThreshold`*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `teleportDistanceThreshold=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setteleportDistanceThreshold(@)", header: "UEGenBindings.h".}
proc `teleportRotationThreshold`*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `teleportRotationThreshold=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setteleportRotationThreshold(@)", header: "UEGenBindings.h".}
proc `defaultAnimatingRigOverride`*(obj {.inject.}: USkeletalMeshComponentPtr): TSoftObjectPtr[
    UObject] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultAnimatingRigOverride=`*(obj {.inject.}: USkeletalMeshComponentPtr;
                                     val {.inject.}: TSoftObjectPtr[UObject]): void {.
    importcpp: "setdefaultAnimatingRigOverride(@)", header: "UEGenBindings.h".}
proc unlinkAnimClassLayers*(obj {.inject.}: USkeletalMeshComponentPtr;
                            inClass {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unbindClothFromMasterPoseComponent*(
    obj {.inject.}: USkeletalMeshComponentPtr;
    bRestoreSimulationSpace {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc toggleDisablePostProcessBlueprint*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc termBodiesBelow*(obj {.inject.}: USkeletalMeshComponentPtr;
                      parentBoneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc suspendClothingSimulation*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stop*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc snapshotPose*(obj {.inject.}: USkeletalMeshComponentPtr;
                   snapshot {.inject.}: var FPoseSnapshot): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUpdateClothInEditor*(obj {.inject.}: USkeletalMeshComponentPtr;
                             newUpdateState {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUpdateAnimationInEditor*(obj {.inject.}: USkeletalMeshComponentPtr;
                                 newUpdateState {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTeleportRotationThreshold*(obj {.inject.}: USkeletalMeshComponentPtr;
                                   threshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTeleportDistanceThreshold*(obj {.inject.}: USkeletalMeshComponentPtr;
                                   threshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPosition*(obj {.inject.}: USkeletalMeshComponentPtr;
                  inPos {.inject.}: float32; bFireNotifies {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlayRate*(obj {.inject.}: USkeletalMeshComponentPtr;
                  rate {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPhysicsBlendWeight*(obj {.inject.}: USkeletalMeshComponentPtr;
                            physicsBlendWeight {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setNotifyRigidBodyCollisionBelow*(obj {.inject.}: USkeletalMeshComponentPtr;
    bNewNotifyRigidBodyCollision {.inject.}: bool; boneName {.inject.}: FName;
                                       bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMorphTarget*(obj {.inject.}: USkeletalMeshComponentPtr;
                     morphTargetName {.inject.}: FName;
                     value {.inject.}: float32;
                     bRemoveZeroWeight {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnablePhysicsBlending*(obj {.inject.}: USkeletalMeshComponentPtr;
                               bNewBlendPhysics {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnableGravityOnAllBodiesBelow*(obj {.inject.}: USkeletalMeshComponentPtr;
                                       bEnableGravity {.inject.}: bool;
                                       boneName {.inject.}: FName;
                                       bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnableBodyGravity*(obj {.inject.}: USkeletalMeshComponentPtr;
                           bEnableGravity {.inject.}: bool;
                           boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDisablePostProcessBlueprint*(obj {.inject.}: USkeletalMeshComponentPtr;
                                     bInDisablePostProcess {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDisableAnimCurves*(obj {.inject.}: USkeletalMeshComponentPtr;
                           bInDisableAnimCurves {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDefaultAnimatingRigOverride*(obj {.inject.}: USkeletalMeshComponentPtr;
    inAnimatingRig {.inject.}: TSoftObjectPtr[UObject]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstraintProfileForAll*(obj {.inject.}: USkeletalMeshComponentPtr;
                                 profileName {.inject.}: FName;
                                 bDefaultIfNotFound {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstraintProfile*(obj {.inject.}: USkeletalMeshComponentPtr;
                           jointName {.inject.}: FName;
                           profileName {.inject.}: FName;
                           bDefaultIfNotFound {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setClothMaxDistanceScale*(obj {.inject.}: USkeletalMeshComponentPtr;
                               scale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBodyNotifyRigidBodyCollision*(obj {.inject.}: USkeletalMeshComponentPtr;
    bNewNotifyRigidBodyCollision {.inject.}: bool; boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAnimClass*(obj {.inject.}: USkeletalMeshComponentPtr;
                   newClass {.inject.}: UClassPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAnimationMode*(obj {.inject.}: USkeletalMeshComponentPtr;
                       inAnimationMode {.inject.}: EAnimationMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAnimation*(obj {.inject.}: USkeletalMeshComponentPtr;
                   newAnimToPlay {.inject.}: UAnimationAssetPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularLimits*(obj {.inject.}: USkeletalMeshComponentPtr;
                       inBoneName {.inject.}: FName;
                       swing1LimitAngle {.inject.}: float32;
                       twistLimitAngle {.inject.}: float32;
                       swing2LimitAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllowRigidBodyAnimNode*(obj {.inject.}: USkeletalMeshComponentPtr;
                                bInAllow {.inject.}: bool;
                                bReinitAnim {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllowedAnimCurvesEvaluation*(obj {.inject.}: USkeletalMeshComponentPtr;
                                     list {.inject.}: var TArray[FName];
                                     bAllow {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllowClothActors*(obj {.inject.}: USkeletalMeshComponentPtr;
                          bInAllow {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAllowAnimCurveEvaluation*(obj {.inject.}: USkeletalMeshComponentPtr;
                                  bInAllow {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllMotorsAngularVelocityDrive*(obj {.inject.}: USkeletalMeshComponentPtr;
                                       bEnableSwingDrive {.inject.}: bool;
                                       bEnableTwistDrive {.inject.}: bool;
                                       bSkipCustomPhysicsType {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllMotorsAngularPositionDrive*(obj {.inject.}: USkeletalMeshComponentPtr;
                                       bEnableSwingDrive {.inject.}: bool;
                                       bEnableTwistDrive {.inject.}: bool;
                                       bSkipCustomPhysicsType {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllMotorsAngularDriveParams*(obj {.inject.}: USkeletalMeshComponentPtr;
                                     inSpring {.inject.}: float32;
                                     inDamping {.inject.}: float32;
                                     inForceLimit {.inject.}: float32;
                                     bSkipCustomPhysicsType {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllBodiesSimulatePhysics*(obj {.inject.}: USkeletalMeshComponentPtr;
                                  bNewSimulate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllBodiesPhysicsBlendWeight*(obj {.inject.}: USkeletalMeshComponentPtr;
                                     physicsBlendWeight {.inject.}: float32;
                                     bSkipCustomPhysicsType {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllBodiesBelowSimulatePhysics*(obj {.inject.}: USkeletalMeshComponentPtr;
                                       inBoneName {.inject.}: var FName;
                                       bNewSimulate {.inject.}: bool;
                                       bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllBodiesBelowPhysicsDisabled*(obj {.inject.}: USkeletalMeshComponentPtr;
                                       inBoneName {.inject.}: var FName;
                                       bDisabled {.inject.}: bool;
                                       bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllBodiesBelowPhysicsBlendWeight*(
    obj {.inject.}: USkeletalMeshComponentPtr; inBoneName {.inject.}: var FName;
    physicsBlendWeight {.inject.}: float32;
    bSkipCustomPhysicsType {.inject.}: bool; bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAllBodiesBelowLinearVelocity*(obj {.inject.}: USkeletalMeshComponentPtr;
                                      inBoneName {.inject.}: var FName;
                                      linearVelocity {.inject.}: var FVector;
                                      bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resumeClothingSimulation*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetClothTeleportMode*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetAnimInstanceDynamics*(obj {.inject.}: USkeletalMeshComponentPtr;
                                inTeleportType {.inject.}: ETeleportType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetAllowedAnimCurveEvaluation*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetAllBodiesSimulatePhysics*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playAnimation*(obj {.inject.}: USkeletalMeshComponentPtr;
                    newAnimToPlay {.inject.}: UAnimationAssetPtr;
                    bLooping {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc play*(obj {.inject.}: USkeletalMeshComponentPtr; bLooping {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc overrideAnimationData*(obj {.inject.}: USkeletalMeshComponentPtr;
                            inAnimToPlay {.inject.}: UAnimationAssetPtr;
                            bIsLooping {.inject.}: bool;
                            bIsPlaying {.inject.}: bool;
                            position {.inject.}: float32;
                            playRate {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc linkAnimGraphByTag*(obj {.inject.}: USkeletalMeshComponentPtr;
                         inTag {.inject.}: FName;
                         inClass {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc linkAnimClassLayers*(obj {.inject.}: USkeletalMeshComponentPtr;
                          inClass {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClosestPointOnPhysicsAsset*(obj {.inject.}: USkeletalMeshComponentPtr;
                                    worldPosition {.inject.}: var FVector;
    closestWorldPosition {.inject.}: var FVector; normal {.inject.}: var FVector;
                                    boneName {.inject.}: var FName;
                                    distance {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPlaying*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isClothingSimulationSuspended*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isBodyGravityEnabled*(obj {.inject.}: USkeletalMeshComponentPtr;
                           boneName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasValidAnimationInstance*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTransformAttribute_Ref*(obj {.inject.}: USkeletalMeshComponentPtr;
                                boneName {.inject.}: var FName;
                                attributeName {.inject.}: var FName;
                                outValue {.inject.}: var FTransform;
    lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTransformAttribute*(obj {.inject.}: USkeletalMeshComponentPtr;
                            boneName {.inject.}: var FName;
                            attributeName {.inject.}: var FName;
                            defaultValue {.inject.}: FTransform;
                            outValue {.inject.}: var FTransform;
                            lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTeleportRotationThreshold*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTeleportDistanceThreshold*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStringAttribute_Ref*(obj {.inject.}: USkeletalMeshComponentPtr;
                             boneName {.inject.}: var FName;
                             attributeName {.inject.}: var FName;
                             outValue {.inject.}: var FString;
                             lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStringAttribute*(obj {.inject.}: USkeletalMeshComponentPtr;
                         boneName {.inject.}: var FName;
                         attributeName {.inject.}: var FName;
                         defaultValue {.inject.}: FString;
                         outValue {.inject.}: var FString;
                         lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSkeletalCenterOfMass*(obj {.inject.}: USkeletalMeshComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPostProcessInstance*(obj {.inject.}: USkeletalMeshComponentPtr): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPosition*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayRate*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMorphTarget*(obj {.inject.}: USkeletalMeshComponentPtr;
                     morphTargetName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimLayerInstanceByGroup*(obj {.inject.}: USkeletalMeshComponentPtr;
                                        inGroup {.inject.}: FName): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimLayerInstanceByClass*(obj {.inject.}: USkeletalMeshComponentPtr;
    inClass {.inject.}: TSubclassOf[UAnimInstance]): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimGraphInstancesByTag*(obj {.inject.}: USkeletalMeshComponentPtr;
                                       inTag {.inject.}: FName;
    outLinkedInstances {.inject.}: var TArray[UAnimInstancePtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimGraphInstanceByTag*(obj {.inject.}: USkeletalMeshComponentPtr;
                                      inTag {.inject.}: FName): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getIntegerAttribute_Ref*(obj {.inject.}: USkeletalMeshComponentPtr;
                              boneName {.inject.}: var FName;
                              attributeName {.inject.}: var FName;
                              outValue {.inject.}: var int32;
                              lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getIntegerAttribute*(obj {.inject.}: USkeletalMeshComponentPtr;
                          boneName {.inject.}: var FName;
                          attributeName {.inject.}: var FName;
                          defaultValue {.inject.}: int32;
                          outValue {.inject.}: var int32;
                          lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFloatAttribute_Ref*(obj {.inject.}: USkeletalMeshComponentPtr;
                            boneName {.inject.}: var FName;
                            attributeName {.inject.}: var FName;
                            outValue {.inject.}: var float32;
                            lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFloatAttribute*(obj {.inject.}: USkeletalMeshComponentPtr;
                        boneName {.inject.}: var FName;
                        attributeName {.inject.}: var FName;
                        defaultValue {.inject.}: float32;
                        outValue {.inject.}: var float32;
                        lookupType {.inject.}: ECustomBoneAttributeLookup): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDisablePostProcessBlueprint*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDisableAnimCurves*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultAnimatingRigOverride*(obj {.inject.}: USkeletalMeshComponentPtr): TSoftObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultAnimatingRig*(obj {.inject.}: USkeletalMeshComponentPtr): TSoftObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentJointAngles*(obj {.inject.}: USkeletalMeshComponentPtr;
                            inBoneName {.inject.}: FName;
                            swing1Angle {.inject.}: var float32;
                            twistAngle {.inject.}: var float32;
                            swing2Angle {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstraintsFromBody*(obj {.inject.}: USkeletalMeshComponentPtr;
                             bodyName {.inject.}: FName;
                             bParentConstraints {.inject.}: bool;
                             bChildConstraints {.inject.}: bool;
                             bIncludesTerminated {.inject.}: bool;
    outConstraints {.inject.}: var TArray[FConstraintInstanceAccessor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstraints*(obj {.inject.}: USkeletalMeshComponentPtr;
                     bIncludesTerminated {.inject.}: bool;
    outConstraints {.inject.}: var TArray[FConstraintInstanceAccessor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstraintByName*(obj {.inject.}: USkeletalMeshComponentPtr;
                          constraintName {.inject.}: FName;
                          bIncludesTerminated {.inject.}: bool): FConstraintInstanceAccessor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClothMaxDistanceScale*(obj {.inject.}: USkeletalMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClothingSimulationInteractor*(obj {.inject.}: USkeletalMeshComponentPtr): UClothingSimulationInteractorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneMass*(obj {.inject.}: USkeletalMeshComponentPtr;
                  boneName {.inject.}: FName; bScaleMass {.inject.}: bool): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneLinearVelocity*(obj {.inject.}: USkeletalMeshComponentPtr;
                            inBoneName {.inject.}: var FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAnimInstance*(obj {.inject.}: USkeletalMeshComponentPtr): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAnimationMode*(obj {.inject.}: USkeletalMeshComponentPtr): EAnimationMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllowRigidBodyAnimNode*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllowedAnimCurveEvaluate*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllowClothActors*(obj {.inject.}: USkeletalMeshComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc forceClothNextUpdateTeleportAndReset*(
    obj {.inject.}: USkeletalMeshComponentPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc forceClothNextUpdateTeleport*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findConstraintBoneName*(obj {.inject.}: USkeletalMeshComponentPtr;
                             constraintIndex {.inject.}: int32): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearMorphTargets*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc breakConstraint*(obj {.inject.}: USkeletalMeshComponentPtr;
                      impulse {.inject.}: FVector;
                      hitLocation {.inject.}: FVector;
                      inBoneName {.inject.}: FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc bindClothToMasterPoseComponent*(obj {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc allowAnimCurveEvaluation*(obj {.inject.}: USkeletalMeshComponentPtr;
                               nameOfCurve {.inject.}: FName;
                               bAllow {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addImpulseToAllBodiesBelow*(obj {.inject.}: USkeletalMeshComponentPtr;
                                 impulse {.inject.}: FVector;
                                 boneName {.inject.}: FName;
                                 bVelChange {.inject.}: bool;
                                 bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addForceToAllBodiesBelow*(obj {.inject.}: USkeletalMeshComponentPtr;
                               force {.inject.}: FVector;
                               boneName {.inject.}: FName;
                               bAccelChange {.inject.}: bool;
                               bIncludeSelf {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc accumulateAllBodiesBelowPhysicsBlendWeight*(
    obj {.inject.}: USkeletalMeshComponentPtr; inBoneName {.inject.}: var FName;
    addPhysicsBlendWeight {.inject.}: float32;
    bSkipCustomPhysicsType {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc wasAnimNotifyTriggeredInStateMachine*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32;
    animNotifyType {.inject.}: TSubclassOf[UAnimNotify]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasAnimNotifyTriggeredInSourceState*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32; stateIndex {.inject.}: int32;
    animNotifyType {.inject.}: TSubclassOf[UAnimNotify]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasAnimNotifyTriggeredInAnyState*(obj {.inject.}: UAnimInstancePtr;
    animNotifyType {.inject.}: TSubclassOf[UAnimNotify]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasAnimNotifyStateActiveInStateMachine*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32;
    animNotifyStateType {.inject.}: TSubclassOf[UAnimNotifyState]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasAnimNotifyStateActiveInSourceState*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32; stateIndex {.inject.}: int32;
    animNotifyStateType {.inject.}: TSubclassOf[UAnimNotifyState]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasAnimNotifyStateActiveInAnyState*(obj {.inject.}: UAnimInstancePtr;
    animNotifyStateType {.inject.}: TSubclassOf[UAnimNotifyState]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasAnimNotifyNameTriggeredInStateMachine*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32; notifyName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasAnimNotifyNameTriggeredInSourceState*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32; stateIndex {.inject.}: int32;
    notifyName {.inject.}: FName): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc wasAnimNotifyNameTriggeredInAnyState*(obj {.inject.}: UAnimInstancePtr;
    notifyName {.inject.}: FName): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc unlockAIResources*(obj {.inject.}: UAnimInstancePtr;
                        bUnlockMovement {.inject.}: bool;
                        unlockAILogic {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unlinkAnimClassLayers*(obj {.inject.}: UAnimInstancePtr;
                            inClass {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc tryGetPawnOwner*(obj {.inject.}: UAnimInstancePtr): APawnPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopSlotAnimation*(obj {.inject.}: UAnimInstancePtr;
                        inBlendOutTime {.inject.}: float32;
                        slotNodeName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc snapshotPose*(obj {.inject.}: UAnimInstancePtr;
                   snapshot {.inject.}: var FPoseSnapshot): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUseMainInstanceMontageEvaluationData*(obj {.inject.}: UAnimInstancePtr;
    bSet {.inject.}: bool): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRootMotionMode*(obj {.inject.}: UAnimInstancePtr;
                        value {.inject.}: ERootMotionMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReceiveNotifiesFromLinkedInstances*(obj {.inject.}: UAnimInstancePtr;
    bSet {.inject.}: bool): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPropagateNotifiesToLinkedInstances*(obj {.inject.}: UAnimInstancePtr;
    bSet {.inject.}: bool): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMorphTarget*(obj {.inject.}: UAnimInstancePtr;
                     morphTargetName {.inject.}: FName; value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc savePoseSnapshot*(obj {.inject.}: UAnimInstancePtr;
                       snapshotName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetDynamics*(obj {.inject.}: UAnimInstancePtr;
                    inTeleportType {.inject.}: ETeleportType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc requestSlotGroupInertialization*(obj {.inject.}: UAnimInstancePtr;
                                      inSlotGroupName {.inject.}: FName;
                                      duration {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removePoseSnapshot*(obj {.inject.}: UAnimInstancePtr;
                         snapshotName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playSlotAnimationAsDynamicMontage_WithBlendSettings*(
    obj {.inject.}: UAnimInstancePtr; asset {.inject.}: UAnimSequenceBasePtr;
    slotNodeName {.inject.}: FName;
    blendInSettings {.inject.}: var FMontageBlendSettings;
    blendOutSettings {.inject.}: var FMontageBlendSettings;
    inPlayRate {.inject.}: float32; loopCount {.inject.}: int32;
    blendOutTriggerTime {.inject.}: float32;
    inTimeToStartMontageAt {.inject.}: float32): UAnimMontagePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playSlotAnimationAsDynamicMontage_WithBlendArgs*(
    obj {.inject.}: UAnimInstancePtr; asset {.inject.}: UAnimSequenceBasePtr;
    slotNodeName {.inject.}: FName; blendIn {.inject.}: var FAlphaBlendArgs;
    blendOut {.inject.}: var FAlphaBlendArgs; inPlayRate {.inject.}: float32;
    loopCount {.inject.}: int32; blendOutTriggerTime {.inject.}: float32;
    inTimeToStartMontageAt {.inject.}: float32): UAnimMontagePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playSlotAnimationAsDynamicMontage*(obj {.inject.}: UAnimInstancePtr;
                                        asset {.inject.}: UAnimSequenceBasePtr;
                                        slotNodeName {.inject.}: FName;
                                        blendInTime {.inject.}: float32;
                                        blendOutTime {.inject.}: float32;
                                        inPlayRate {.inject.}: float32;
                                        loopCount {.inject.}: int32;
                                        blendOutTriggerTime {.inject.}: float32;
    inTimeToStartMontageAt {.inject.}: float32): UAnimMontagePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montageSync_StopFollowing*(obj {.inject.}: UAnimInstancePtr;
                                montageFollower {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montageSync_Follow*(obj {.inject.}: UAnimInstancePtr;
                         montageFollower {.inject.}: UAnimMontagePtr;
                         otherAnimInstance {.inject.}: UAnimInstancePtr;
                         montageLeader {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_StopWithBlendSettings*(obj {.inject.}: UAnimInstancePtr;
    blendOutSettings {.inject.}: var FMontageBlendSettings;
                                    montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_StopWithBlendOut*(obj {.inject.}: UAnimInstancePtr;
                               blendOut {.inject.}: var FAlphaBlendArgs;
                               montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_StopGroupByName*(obj {.inject.}: UAnimInstancePtr;
                              inBlendOutTime {.inject.}: float32;
                              groupName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_Stop*(obj {.inject.}: UAnimInstancePtr;
                   inBlendOutTime {.inject.}: float32;
                   montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_SetPosition*(obj {.inject.}: UAnimInstancePtr;
                          montage {.inject.}: UAnimMontagePtr;
                          newPosition {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_SetPlayRate*(obj {.inject.}: UAnimInstancePtr;
                          montage {.inject.}: UAnimMontagePtr;
                          newPlayRate {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_SetNextSection*(obj {.inject.}: UAnimInstancePtr;
                             sectionNameToChange {.inject.}: FName;
                             nextSection {.inject.}: FName;
                             montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_Resume*(obj {.inject.}: UAnimInstancePtr;
                     montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_PlayWithBlendSettings*(obj {.inject.}: UAnimInstancePtr;
                                    montageToPlay {.inject.}: UAnimMontagePtr;
    blendInSettings {.inject.}: var FMontageBlendSettings;
                                    inPlayRate {.inject.}: float32;
    returnValueType {.inject.}: EMontagePlayReturnType;
                                    inTimeToStartMontageAt {.inject.}: float32;
                                    bStopAllMontages {.inject.}: bool): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_PlayWithBlendIn*(obj {.inject.}: UAnimInstancePtr;
                              montageToPlay {.inject.}: UAnimMontagePtr;
                              blendIn {.inject.}: var FAlphaBlendArgs;
                              inPlayRate {.inject.}: float32;
    returnValueType {.inject.}: EMontagePlayReturnType;
                              inTimeToStartMontageAt {.inject.}: float32;
                              bStopAllMontages {.inject.}: bool): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_Play*(obj {.inject.}: UAnimInstancePtr;
                   montageToPlay {.inject.}: UAnimMontagePtr;
                   inPlayRate {.inject.}: float32;
                   returnValueType {.inject.}: EMontagePlayReturnType;
                   inTimeToStartMontageAt {.inject.}: float32;
                   bStopAllMontages {.inject.}: bool): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_Pause*(obj {.inject.}: UAnimInstancePtr;
                    montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_JumpToSectionsEnd*(obj {.inject.}: UAnimInstancePtr;
                                sectionName {.inject.}: FName;
                                montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_JumpToSection*(obj {.inject.}: UAnimInstancePtr;
                            sectionName {.inject.}: FName;
                            montage {.inject.}: UAnimMontagePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_IsPlaying*(obj {.inject.}: UAnimInstancePtr;
                        montage {.inject.}: UAnimMontagePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_IsActive*(obj {.inject.}: UAnimInstancePtr;
                       montage {.inject.}: UAnimMontagePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_GetPosition*(obj {.inject.}: UAnimInstancePtr;
                          montage {.inject.}: UAnimMontagePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_GetPlayRate*(obj {.inject.}: UAnimInstancePtr;
                          montage {.inject.}: UAnimMontagePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_GetIsStopped*(obj {.inject.}: UAnimInstancePtr;
                           montage {.inject.}: UAnimMontagePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_GetCurrentSection*(obj {.inject.}: UAnimInstancePtr;
                                montage {.inject.}: UAnimMontagePtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc montage_GetBlendTime*(obj {.inject.}: UAnimInstancePtr;
                           montage {.inject.}: UAnimMontagePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lockAIResources*(obj {.inject.}: UAnimInstancePtr;
                      bLockMovement {.inject.}: bool;
                      lockAILogic {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc linkAnimGraphByTag*(obj {.inject.}: UAnimInstancePtr;
                         inTag {.inject.}: FName;
                         inClass {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc linkAnimClassLayers*(obj {.inject.}: UAnimInstancePtr;
                          inClass {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isUsingMainInstanceMontageEvaluationData*(obj {.inject.}: UAnimInstancePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isSyncGroupBetweenMarkers*(obj {.inject.}: UAnimInstancePtr;
                                inSyncGroupName {.inject.}: FName;
                                previousMarker {.inject.}: FName;
                                nextMarker {.inject.}: FName;
                                bRespectMarkerOrder {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPlayingSlotAnimation*(obj {.inject.}: UAnimInstancePtr;
                             asset {.inject.}: UAnimSequenceBasePtr;
                             slotNodeName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isAnyMontagePlaying*(obj {.inject.}: UAnimInstancePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasMarkerBeenHitThisFrame*(obj {.inject.}: UAnimInstancePtr;
                                syncGroup {.inject.}: FName;
                                markerName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimeToClosestMarker*(obj {.inject.}: UAnimInstancePtr;
                             syncGroup {.inject.}: FName;
                             markerName {.inject.}: FName;
                             outMarkerTime {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSyncGroupPosition*(obj {.inject.}: UAnimInstancePtr;
                           inSyncGroupName {.inject.}: FName): FMarkerSyncAnimPosition {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRelevantAnimTimeRemainingFraction*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32; stateIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRelevantAnimTimeRemaining*(obj {.inject.}: UAnimInstancePtr;
                                   machineIndex {.inject.}: int32;
                                   stateIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRelevantAnimTimeFraction*(obj {.inject.}: UAnimInstancePtr;
                                  machineIndex {.inject.}: int32;
                                  stateIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRelevantAnimTime*(obj {.inject.}: UAnimInstancePtr;
                          machineIndex {.inject.}: int32;
                          stateIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRelevantAnimLength*(obj {.inject.}: UAnimInstancePtr;
                            machineIndex {.inject.}: int32;
                            stateIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getReceiveNotifiesFromLinkedInstances*(obj {.inject.}: UAnimInstancePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPropagateNotifiesToLinkedInstances*(obj {.inject.}: UAnimInstancePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOwningComponent*(obj {.inject.}: UAnimInstancePtr): USkeletalMeshComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOwningActor*(obj {.inject.}: UAnimInstancePtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimLayerInstancesByGroup*(obj {.inject.}: UAnimInstancePtr;
    inGroup {.inject.}: FName;
    outLinkedInstances {.inject.}: var TArray[UAnimInstancePtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimLayerInstanceByGroupAndClass*(obj {.inject.}: UAnimInstancePtr;
    inGroup {.inject.}: FName; inClass {.inject.}: TSubclassOf[UAnimInstance]): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimLayerInstanceByGroup*(obj {.inject.}: UAnimInstancePtr;
                                        inGroup {.inject.}: FName): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimLayerInstanceByClass*(obj {.inject.}: UAnimInstancePtr;
    inClass {.inject.}: TSubclassOf[UAnimInstance]): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimGraphInstancesByTag*(obj {.inject.}: UAnimInstancePtr;
                                       inTag {.inject.}: FName;
    outLinkedInstances {.inject.}: var TArray[UAnimInstancePtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinkedAnimGraphInstanceByTag*(obj {.inject.}: UAnimInstancePtr;
                                      inTag {.inject.}: FName): UAnimInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceTransitionTimeElapsedFraction*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32; transitionIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceTransitionTimeElapsed*(obj {.inject.}: UAnimInstancePtr;
                                       machineIndex {.inject.}: int32;
                                       transitionIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceTransitionCrossfadeDuration*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32; transitionIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceStateWeight*(obj {.inject.}: UAnimInstancePtr;
                             machineIndex {.inject.}: int32;
                             stateIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceMachineWeight*(obj {.inject.}: UAnimInstancePtr;
                               machineIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceCurrentStateElapsedTime*(obj {.inject.}: UAnimInstancePtr;
    machineIndex {.inject.}: int32): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getInstanceAssetPlayerTimeFromEndFraction*(obj {.inject.}: UAnimInstancePtr;
    assetPlayerIndex {.inject.}: int32): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getInstanceAssetPlayerTimeFromEnd*(obj {.inject.}: UAnimInstancePtr;
                                        assetPlayerIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceAssetPlayerTimeFraction*(obj {.inject.}: UAnimInstancePtr;
    assetPlayerIndex {.inject.}: int32): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getInstanceAssetPlayerTime*(obj {.inject.}: UAnimInstancePtr;
                                 assetPlayerIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceAssetPlayerLength*(obj {.inject.}: UAnimInstancePtr;
                                   assetPlayerIndex {.inject.}: int32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDeltaSeconds*(obj {.inject.}: UAnimInstancePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurveValue*(obj {.inject.}: UAnimInstancePtr; curveName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentStateName*(obj {.inject.}: UAnimInstancePtr;
                          machineIndex {.inject.}: int32): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentActiveMontage*(obj {.inject.}: UAnimInstancePtr): UAnimMontagePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllCurveNames*(obj {.inject.}: UAnimInstancePtr;
                       outNames {.inject.}: var TArray[FName]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActiveCurveNames*(obj {.inject.}: UAnimInstancePtr;
                          outNames {.inject.}: var TArray[FName]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearMorphTargets*(obj {.inject.}: UAnimInstancePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc calculateDirection*(obj {.inject.}: UAnimInstancePtr;
                         velocity {.inject.}: var FVector;
                         baseRotation {.inject.}: var FRotator): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopAnim*(obj {.inject.}: UAnimSingleNodeInstancePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReverse*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                 bInReverse {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPreviewCurveOverride*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                              poseName {.inject.}: var FName;
                              value {.inject.}: float32;
                              bRemoveIfZero {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPositionWithPreviousTime*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                                  inPosition {.inject.}: float32;
                                  inPreviousTime {.inject.}: float32;
                                  bFireNotifies {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPosition*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                  inPosition {.inject.}: float32; bFireNotifies {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlayRate*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                  inPlayRate {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPlaying*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                 bIsPlaying {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setMirrorDataTable*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                         mirrorDataTable {.inject.}: UMirrorDataTablePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLooping*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                 bIsLooping {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setBlendSpacePosition*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                            inPosition {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAnimationAsset*(obj {.inject.}: UAnimSingleNodeInstancePtr;
                        newAsset {.inject.}: UAnimationAssetPtr;
                        bIsLooping {.inject.}: bool;
                        inPlayRate {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playAnim*(obj {.inject.}: UAnimSingleNodeInstancePtr;
               bIsLooping {.inject.}: bool; inPlayRate {.inject.}: float32;
               inStartPosition {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getMirrorDataTable*(obj {.inject.}: UAnimSingleNodeInstancePtr): UMirrorDataTablePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLength*(obj {.inject.}: UAnimSingleNodeInstancePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAnimationAsset*(obj {.inject.}: UAnimSingleNodeInstancePtr): UAnimationAssetPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `notifyColor`*(obj {.inject.}: UAnimNotifyPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `notifyColor=`*(obj {.inject.}: UAnimNotifyPtr; val {.inject.}: FColor): void {.
    importcpp: "setnotifyColor(@)", header: "UEGenBindings.h".}
proc `bShouldFireInEditor`*(obj {.inject.}: UAnimNotifyPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldFireInEditor=`*(obj {.inject.}: UAnimNotifyPtr; val {.inject.}: bool): void {.
    importcpp: "setbShouldFireInEditor(@)", header: "UEGenBindings.h".}
proc `notifyColor`*(obj {.inject.}: UAnimNotifyStatePtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `notifyColor=`*(obj {.inject.}: UAnimNotifyStatePtr; val {.inject.}: FColor): void {.
    importcpp: "setnotifyColor(@)", header: "UEGenBindings.h".}
proc `bShouldFireInEditor`*(obj {.inject.}: UAnimNotifyStatePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldFireInEditor=`*(obj {.inject.}: UAnimNotifyStatePtr;
                             val {.inject.}: bool): void {.
    importcpp: "setbShouldFireInEditor(@)", header: "UEGenBindings.h".}
proc getTimecode*(obj {.inject.}: UTimecodeProviderPtr): FTimecode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSynchronizationState*(obj {.inject.}: UTimecodeProviderPtr): ETimecodeProviderSynchronizationState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getQualifiedFrameTime*(obj {.inject.}: UTimecodeProviderPtr): FQualifiedFrameTime {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFrameRate*(obj {.inject.}: UTimecodeProviderPtr): FFrameRate {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDelayedTimecode*(obj {.inject.}: UTimecodeProviderPtr): FTimecode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDelayedQualifiedFrameTime*(obj {.inject.}: UTimecodeProviderPtr): FQualifiedFrameTime {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fetchTimecode*(obj {.inject.}: UTimecodeProviderPtr;
                    outFrameTime {.inject.}: var FQualifiedFrameTime): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fetchAndUpdate*(obj {.inject.}: UTimecodeProviderPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `soundClassObject`*(obj {.inject.}: USoundBasePtr): TObjectPtr[USoundClass] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `soundClassObject=`*(obj {.inject.}: USoundBasePtr;
                          val {.inject.}: TObjectPtr[USoundClass]): void {.
    importcpp: "setsoundClassObject(@)", header: "UEGenBindings.h".}
proc `bOverrideConcurrency`*(obj {.inject.}: USoundBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideConcurrency=`*(obj {.inject.}: USoundBasePtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbOverrideConcurrency(@)", header: "UEGenBindings.h".}
proc `bEnableBusSends`*(obj {.inject.}: USoundBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableBusSends=`*(obj {.inject.}: USoundBasePtr; val {.inject.}: uint8): void {.
    importcpp: "setbEnableBusSends(@)", header: "UEGenBindings.h".}
proc `bBypassVolumeScaleForPriority`*(obj {.inject.}: USoundBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bBypassVolumeScaleForPriority=`*(obj {.inject.}: USoundBasePtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbBypassVolumeScaleForPriority(@)", header: "UEGenBindings.h".}
proc `virtualizationMode`*(obj {.inject.}: USoundBasePtr): EVirtualizationMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `virtualizationMode=`*(obj {.inject.}: USoundBasePtr;
                            val {.inject.}: EVirtualizationMode): void {.
    importcpp: "setvirtualizationMode(@)", header: "UEGenBindings.h".}
proc `concurrencySet`*(obj {.inject.}: USoundBasePtr): TSet[
    TObjectPtr[USoundConcurrency]] {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc `concurrencySet=`*(obj {.inject.}: USoundBasePtr;
                        val {.inject.}: TSet[TObjectPtr[USoundConcurrency]]): void {.
    importcpp: "setconcurrencySet(@)", header: "UEGenBindings.h".}
proc `concurrencyOverrides`*(obj {.inject.}: USoundBasePtr): FSoundConcurrencySettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `concurrencyOverrides=`*(obj {.inject.}: USoundBasePtr;
                              val {.inject.}: FSoundConcurrencySettings): void {.
    importcpp: "setconcurrencyOverrides(@)", header: "UEGenBindings.h".}
proc `duration`*(obj {.inject.}: USoundBasePtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `duration=`*(obj {.inject.}: USoundBasePtr; val {.inject.}: float32): void {.
    importcpp: "setduration(@)", header: "UEGenBindings.h".}
proc `maxDistance`*(obj {.inject.}: USoundBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxDistance=`*(obj {.inject.}: USoundBasePtr; val {.inject.}: float32): void {.
    importcpp: "setmaxDistance(@)", header: "UEGenBindings.h".}
proc `totalSamples`*(obj {.inject.}: USoundBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `totalSamples=`*(obj {.inject.}: USoundBasePtr; val {.inject.}: float32): void {.
    importcpp: "settotalSamples(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: USoundBasePtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: USoundBasePtr; val {.inject.}: float32): void {.
    importcpp: "setpriority(@)", header: "UEGenBindings.h".}
proc `soundSubmixObject`*(obj {.inject.}: USoundBasePtr): TObjectPtr[
    USoundSubmixBase] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `soundSubmixObject=`*(obj {.inject.}: USoundBasePtr;
                           val {.inject.}: TObjectPtr[USoundSubmixBase]): void {.
    importcpp: "setsoundSubmixObject(@)", header: "UEGenBindings.h".}
proc `soundSubmixSends`*(obj {.inject.}: USoundBasePtr): var TArray[
    FSoundSubmixSendInfo] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `soundSubmixSends=`*(obj {.inject.}: USoundBasePtr;
                          val {.inject.}: TArray[FSoundSubmixSendInfo]): void {.
    importcpp: "setsoundSubmixSends(@)", header: "UEGenBindings.h".}
proc `sourceEffectChain`*(obj {.inject.}: USoundBasePtr): TObjectPtr[
    USoundEffectSourcePresetChain] {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc `sourceEffectChain=`*(obj {.inject.}: USoundBasePtr; val {.inject.}: TObjectPtr[
    USoundEffectSourcePresetChain]): void {.
    importcpp: "setsourceEffectChain(@)", header: "UEGenBindings.h".}
proc `busSends`*(obj {.inject.}: USoundBasePtr): var TArray[
    FSoundSourceBusSendInfo] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `busSends=`*(obj {.inject.}: USoundBasePtr;
                  val {.inject.}: TArray[FSoundSourceBusSendInfo]): void {.
    importcpp: "setbusSends(@)", header: "UEGenBindings.h".}
proc `preEffectBusSends`*(obj {.inject.}: USoundBasePtr): var TArray[
    FSoundSourceBusSendInfo] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `preEffectBusSends=`*(obj {.inject.}: USoundBasePtr;
                           val {.inject.}: TArray[FSoundSourceBusSendInfo]): void {.
    importcpp: "setpreEffectBusSends(@)", header: "UEGenBindings.h".}
proc `modulationSettings`*(obj {.inject.}: USoundWavePtr): FSoundModulationDefaultRoutingSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `modulationSettings=`*(obj {.inject.}: USoundWavePtr; val {.inject.}: FSoundModulationDefaultRoutingSettings): void {.
    importcpp: "setmodulationSettings(@)", header: "UEGenBindings.h".}
proc `bMature`*(obj {.inject.}: USoundWavePtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bMature=`*(obj {.inject.}: USoundWavePtr; val {.inject.}: uint8): void {.
    importcpp: "setbMature(@)", header: "UEGenBindings.h".}
proc `bManualWordWrap`*(obj {.inject.}: USoundWavePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bManualWordWrap=`*(obj {.inject.}: USoundWavePtr; val {.inject.}: uint8): void {.
    importcpp: "setbManualWordWrap(@)", header: "UEGenBindings.h".}
proc `bSingleLine`*(obj {.inject.}: USoundWavePtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bSingleLine=`*(obj {.inject.}: USoundWavePtr; val {.inject.}: uint8): void {.
    importcpp: "setbSingleLine(@)", header: "UEGenBindings.h".}
proc `subtitlePriority`*(obj {.inject.}: USoundWavePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subtitlePriority=`*(obj {.inject.}: USoundWavePtr; val {.inject.}: float32): void {.
    importcpp: "setsubtitlePriority(@)", header: "UEGenBindings.h".}
proc `subtitles`*(obj {.inject.}: USoundWavePtr): var TArray[FSubtitleCue] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subtitles=`*(obj {.inject.}: USoundWavePtr;
                   val {.inject.}: TArray[FSubtitleCue]): void {.
    importcpp: "setsubtitles(@)", header: "UEGenBindings.h".}
proc setSoundAssetCompressionType*(obj {.inject.}: USoundWavePtr;
    inSoundAssetCompressionType {.inject.}: ESoundAssetCompressionType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSoundAssetCompressionType*(obj {.inject.}: USoundWavePtr): ESoundAssetCompressionType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `supportedClass`*(obj {.inject.}: UExporterPtr): TSubclassOf[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `supportedClass=`*(obj {.inject.}: UExporterPtr;
                        val {.inject.}: TSubclassOf[UObject]): void {.
    importcpp: "setsupportedClass(@)", header: "UEGenBindings.h".}
proc `formatExtension`*(obj {.inject.}: UExporterPtr): var TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `formatExtension=`*(obj {.inject.}: UExporterPtr;
                         val {.inject.}: TArray[FString]): void {.
    importcpp: "setformatExtension(@)", header: "UEGenBindings.h".}
proc `formatDescription`*(obj {.inject.}: UExporterPtr): var TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `formatDescription=`*(obj {.inject.}: UExporterPtr;
                           val {.inject.}: TArray[FString]): void {.
    importcpp: "setformatDescription(@)", header: "UEGenBindings.h".}
proc `bText`*(obj {.inject.}: UExporterPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bText=`*(obj {.inject.}: UExporterPtr; val {.inject.}: uint8): void {.
    importcpp: "setbText(@)", header: "UEGenBindings.h".}
proc `exportTask`*(obj {.inject.}: UExporterPtr): TObjectPtr[UAssetExportTask] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `exportTask=`*(obj {.inject.}: UExporterPtr;
                    val {.inject.}: TObjectPtr[UAssetExportTask]): void {.
    importcpp: "setexportTask(@)", header: "UEGenBindings.h".}
proc runAssetExportTasks*(exportTasks {.inject.}: var TArray[UAssetExportTaskPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc runAssetExportTask*(task {.inject.}: UAssetExportTaskPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subsurfaceProfile`*(obj {.inject.}: UMaterialInterfacePtr): TObjectPtr[
    USubsurfaceProfile] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subsurfaceProfile=`*(obj {.inject.}: UMaterialInterfacePtr;
                           val {.inject.}: TObjectPtr[USubsurfaceProfile]): void {.
    importcpp: "setsubsurfaceProfile(@)", header: "UEGenBindings.h".}
proc setForceMipLevelsToBeResident*(obj {.inject.}: UMaterialInterfacePtr;
    overrideForceMiplevelsToBeResident {.inject.}: bool;
    bForceMiplevelsToBeResidentValue {.inject.}: bool;
                                    forceDuration {.inject.}: float32;
                                    cinematicTextureGroups {.inject.}: int32;
                                    bFastResponse {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicalMaterialMask*(obj {.inject.}: UMaterialInterfacePtr): UPhysicalMaterialMaskPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicalMaterialFromMap*(obj {.inject.}: UMaterialInterfacePtr;
                                 index {.inject.}: int32): UPhysicalMaterialPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicalMaterial*(obj {.inject.}: UMaterialInterfacePtr): UPhysicalMaterialPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getParameterInfo*(obj {.inject.}: UMaterialInterfacePtr;
                       association {.inject.}: EMaterialParameterAssociation;
                       parameterName {.inject.}: FName;
                       layerFunction {.inject.}: UMaterialFunctionInterfacePtr): FMaterialParameterInfo {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBaseMaterial*(obj {.inject.}: UMaterialInterfacePtr): UMaterialPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `materialDomain`*(obj {.inject.}: UMaterialPtr): EMaterialDomain {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `materialDomain=`*(obj {.inject.}: UMaterialPtr;
                        val {.inject.}: EMaterialDomain): void {.
    importcpp: "setmaterialDomain(@)", header: "UEGenBindings.h".}
proc `blendMode`*(obj {.inject.}: UMaterialPtr): EBlendMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendMode=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: EBlendMode): void {.
    importcpp: "setblendMode(@)", header: "UEGenBindings.h".}
proc `materialDecalResponse`*(obj {.inject.}: UMaterialPtr): EMaterialDecalResponse {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `materialDecalResponse=`*(obj {.inject.}: UMaterialPtr;
                               val {.inject.}: EMaterialDecalResponse): void {.
    importcpp: "setmaterialDecalResponse(@)", header: "UEGenBindings.h".}
proc `bUseEmissiveForDynamicAreaLighting`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseEmissiveForDynamicAreaLighting=`*(obj {.inject.}: UMaterialPtr;
    val {.inject.}: uint8): void {.importcpp: "setbUseEmissiveForDynamicAreaLighting(@)",
                                   header: "UEGenBindings.h".}
proc `bUsedWithSkeletalMesh`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithSkeletalMesh=`*(obj {.inject.}: UMaterialPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithSkeletalMesh(@)", header: "UEGenBindings.h".}
proc `bUsedWithEditorCompositing`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithEditorCompositing=`*(obj {.inject.}: UMaterialPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithEditorCompositing(@)", header: "UEGenBindings.h".}
proc `bUsedWithParticleSprites`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithParticleSprites=`*(obj {.inject.}: UMaterialPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithParticleSprites(@)", header: "UEGenBindings.h".}
proc `bUsedWithBeamTrails`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithBeamTrails=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithBeamTrails(@)", header: "UEGenBindings.h".}
proc `bUsedWithMeshParticles`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithMeshParticles=`*(obj {.inject.}: UMaterialPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithMeshParticles(@)", header: "UEGenBindings.h".}
proc `bUsedWithNiagaraSprites`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithNiagaraSprites=`*(obj {.inject.}: UMaterialPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithNiagaraSprites(@)", header: "UEGenBindings.h".}
proc `bUsedWithNiagaraRibbons`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithNiagaraRibbons=`*(obj {.inject.}: UMaterialPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithNiagaraRibbons(@)", header: "UEGenBindings.h".}
proc `bUsedWithNiagaraMeshParticles`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithNiagaraMeshParticles=`*(obj {.inject.}: UMaterialPtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithNiagaraMeshParticles(@)", header: "UEGenBindings.h".}
proc `bUsedWithGeometryCache`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithGeometryCache=`*(obj {.inject.}: UMaterialPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithGeometryCache(@)", header: "UEGenBindings.h".}
proc `bUsedWithStaticLighting`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithStaticLighting=`*(obj {.inject.}: UMaterialPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithStaticLighting(@)", header: "UEGenBindings.h".}
proc `bUsedWithMorphTargets`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithMorphTargets=`*(obj {.inject.}: UMaterialPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithMorphTargets(@)", header: "UEGenBindings.h".}
proc `bUsedWithSplineMeshes`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithSplineMeshes=`*(obj {.inject.}: UMaterialPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithSplineMeshes(@)", header: "UEGenBindings.h".}
proc `bUsedWithInstancedStaticMeshes`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithInstancedStaticMeshes=`*(obj {.inject.}: UMaterialPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithInstancedStaticMeshes(@)", header: "UEGenBindings.h".}
proc `bUsedWithGeometryCollections`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithGeometryCollections=`*(obj {.inject.}: UMaterialPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithGeometryCollections(@)", header: "UEGenBindings.h".}
proc `bUsedWithClothing`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithClothing=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithClothing(@)", header: "UEGenBindings.h".}
proc `bUsedWithWater`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithWater=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithWater(@)", header: "UEGenBindings.h".}
proc `bUsedWithHairStrands`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithHairStrands=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithHairStrands(@)", header: "UEGenBindings.h".}
proc `bUsedWithLidarPointCloud`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithLidarPointCloud=`*(obj {.inject.}: UMaterialPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithLidarPointCloud(@)", header: "UEGenBindings.h".}
proc `bUsedWithVirtualHeightfieldMesh`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithVirtualHeightfieldMesh=`*(obj {.inject.}: UMaterialPtr;
    val {.inject.}: uint8): void {.importcpp: "setbUsedWithVirtualHeightfieldMesh(@)",
                                   header: "UEGenBindings.h".}
proc `bUsedWithNanite`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsedWithNanite=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUsedWithNanite(@)", header: "UEGenBindings.h".}
proc `bAutomaticallySetUsageInEditor`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutomaticallySetUsageInEditor=`*(obj {.inject.}: UMaterialPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbAutomaticallySetUsageInEditor(@)", header: "UEGenBindings.h".}
proc `bFullyRough`*(obj {.inject.}: UMaterialPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bFullyRough=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbFullyRough(@)", header: "UEGenBindings.h".}
proc `floatPrecisionMode`*(obj {.inject.}: UMaterialPtr): EMaterialFloatPrecisionMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `floatPrecisionMode=`*(obj {.inject.}: UMaterialPtr;
                            val {.inject.}: EMaterialFloatPrecisionMode): void {.
    importcpp: "setfloatPrecisionMode(@)", header: "UEGenBindings.h".}
proc `bUseLightmapDirectionality`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseLightmapDirectionality=`*(obj {.inject.}: UMaterialPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbUseLightmapDirectionality(@)", header: "UEGenBindings.h".}
proc `bMobileEnableHighQualityBRDF`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bMobileEnableHighQualityBRDF=`*(obj {.inject.}: UMaterialPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbMobileEnableHighQualityBRDF(@)", header: "UEGenBindings.h".}
proc `bUseAlphaToCoverage`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseAlphaToCoverage=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUseAlphaToCoverage(@)", header: "UEGenBindings.h".}
proc `bForwardRenderUsePreintegratedGFForSimpleIBL`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForwardRenderUsePreintegratedGFForSimpleIBL=`*(
    obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbForwardRenderUsePreintegratedGFForSimpleIBL(@)",
    header: "UEGenBindings.h".}
proc `bUseHQForwardReflections`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseHQForwardReflections=`*(obj {.inject.}: UMaterialPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbUseHQForwardReflections(@)", header: "UEGenBindings.h".}
proc `bForwardBlendsSkyLightCubemaps`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForwardBlendsSkyLightCubemaps=`*(obj {.inject.}: UMaterialPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbForwardBlendsSkyLightCubemaps(@)", header: "UEGenBindings.h".}
proc `bUsePlanarForwardReflections`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsePlanarForwardReflections=`*(obj {.inject.}: UMaterialPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbUsePlanarForwardReflections(@)", header: "UEGenBindings.h".}
proc `bNormalCurvatureToRoughness`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bNormalCurvatureToRoughness=`*(obj {.inject.}: UMaterialPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbNormalCurvatureToRoughness(@)", header: "UEGenBindings.h".}
proc `blendableLocation`*(obj {.inject.}: UMaterialPtr): EBlendableLocation {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendableLocation=`*(obj {.inject.}: UMaterialPtr;
                           val {.inject.}: EBlendableLocation): void {.
    importcpp: "setblendableLocation(@)", header: "UEGenBindings.h".}
proc `blendableOutputAlpha`*(obj {.inject.}: UMaterialPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendableOutputAlpha=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setblendableOutputAlpha(@)", header: "UEGenBindings.h".}
proc `blendablePriority`*(obj {.inject.}: UMaterialPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendablePriority=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: int32): void {.
    importcpp: "setblendablePriority(@)", header: "UEGenBindings.h".}
proc `bIsBlendable`*(obj {.inject.}: UMaterialPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bIsBlendable=`*(obj {.inject.}: UMaterialPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsBlendable(@)", header: "UEGenBindings.h".}
proc `bShouldDoAnimNotifies`*(obj {.inject.}: ASkeletalMeshActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldDoAnimNotifies=`*(obj {.inject.}: ASkeletalMeshActorPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbShouldDoAnimNotifies(@)", header: "UEGenBindings.h".}
proc `skeletalMeshComponent`*(obj {.inject.}: ASkeletalMeshActorPtr): TObjectPtr[
    USkeletalMeshComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skeletalMeshComponent=`*(obj {.inject.}: ASkeletalMeshActorPtr;
    val {.inject.}: TObjectPtr[USkeletalMeshComponent]): void {.
    importcpp: "setskeletalMeshComponent(@)", header: "UEGenBindings.h".}
proc `instancingRandomSeed`*(obj {.inject.}: UInstancedStaticMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `instancingRandomSeed=`*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                              val {.inject.}: int32): void {.
    importcpp: "setinstancingRandomSeed(@)", header: "UEGenBindings.h".}
proc `instanceStartCullDistance`*(obj {.inject.}: UInstancedStaticMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `instanceStartCullDistance=`*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                                   val {.inject.}: int32): void {.
    importcpp: "setinstanceStartCullDistance(@)", header: "UEGenBindings.h".}
proc `instanceEndCullDistance`*(obj {.inject.}: UInstancedStaticMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `instanceEndCullDistance=`*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setinstanceEndCullDistance(@)", header: "UEGenBindings.h".}
proc updateInstanceTransform*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                              instanceIndex {.inject.}: int32;
                              newInstanceTransform {.inject.}: var FTransform;
                              bWorldSpace {.inject.}: bool;
                              bMarkRenderStateDirty {.inject.}: bool;
                              bTeleport {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCustomDataValue*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                         instanceIndex {.inject.}: int32;
                         customDataIndex {.inject.}: int32;
                         customDataValue {.inject.}: float32;
                         bMarkRenderStateDirty {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCullDistances*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                       startCullDistance {.inject.}: int32;
                       endCullDistance {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeInstances*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                      instancesToRemove {.inject.}: var TArray[int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeInstance*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                     instanceIndex {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValidInstance*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                      instanceIndex {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceTransform*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                           instanceIndex {.inject.}: int32;
                           outInstanceTransform {.inject.}: var FTransform;
                           bWorldSpace {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstancesOverlappingSphere*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                                    center {.inject.}: var FVector;
                                    radius {.inject.}: float32;
                                    bSphereInWorldSpace {.inject.}: bool): TArray[int32] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstancesOverlappingBox*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                                 box {.inject.}: var FBox;
                                 bBoxInWorldSpace {.inject.}: bool): TArray[int32] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInstanceCount*(obj {.inject.}: UInstancedStaticMeshComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearInstances*(obj {.inject.}: UInstancedStaticMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc batchUpdateInstancesTransforms*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                                     startInstanceIndex {.inject.}: int32;
    newInstancesTransforms {.inject.}: var TArray[FTransform];
                                     bWorldSpace {.inject.}: bool;
                                     bMarkRenderStateDirty {.inject.}: bool;
                                     bTeleport {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc batchUpdateInstancesTransform*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                                    startInstanceIndex {.inject.}: int32;
                                    numInstances {.inject.}: int32;
    newInstancesTransform {.inject.}: var FTransform;
                                    bWorldSpace {.inject.}: bool;
                                    bMarkRenderStateDirty {.inject.}: bool;
                                    bTeleport {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addInstanceWorldSpace*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                            worldTransform {.inject.}: var FTransform): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addInstances*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                   instanceTransforms {.inject.}: var TArray[FTransform];
                   bShouldReturnIndices {.inject.}: bool;
                   bWorldSpace {.inject.}: bool): TArray[int32] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addInstance*(obj {.inject.}: UInstancedStaticMeshComponentPtr;
                  instanceTransform {.inject.}: var FTransform;
                  bWorldSpace {.inject.}: bool): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `staticMeshComponent`*(obj {.inject.}: AStaticMeshActorPtr): TObjectPtr[
    UStaticMeshComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `staticMeshComponent=`*(obj {.inject.}: AStaticMeshActorPtr;
                             val {.inject.}: TObjectPtr[UStaticMeshComponent]): void {.
    importcpp: "setstaticMeshComponent(@)", header: "UEGenBindings.h".}
proc setMobility*(obj {.inject.}: AStaticMeshActorPtr;
                  inMobility {.inject.}: EComponentMobility::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `physMaterial`*(obj {.inject.}: UMaterialInstancePtr): TObjectPtr[
    UPhysicalMaterial] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `physMaterial=`*(obj {.inject.}: UMaterialInstancePtr;
                      val {.inject.}: TObjectPtr[UPhysicalMaterial]): void {.
    importcpp: "setphysMaterial(@)", header: "UEGenBindings.h".}
proc `parent`*(obj {.inject.}: UMaterialInstancePtr): TObjectPtr[
    UMaterialInterface] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `parent=`*(obj {.inject.}: UMaterialInstancePtr;
                val {.inject.}: TObjectPtr[UMaterialInterface]): void {.
    importcpp: "setparent(@)", header: "UEGenBindings.h".}
proc `bOverrideSubsurfaceProfile`*(obj {.inject.}: UMaterialInstancePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideSubsurfaceProfile=`*(obj {.inject.}: UMaterialInstancePtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbOverrideSubsurfaceProfile(@)", header: "UEGenBindings.h".}
proc `scalarParameterValues`*(obj {.inject.}: UMaterialInstancePtr): var TArray[
    FScalarParameterValue] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `scalarParameterValues=`*(obj {.inject.}: UMaterialInstancePtr;
                               val {.inject.}: TArray[FScalarParameterValue]): void {.
    importcpp: "setscalarParameterValues(@)", header: "UEGenBindings.h".}
proc `vectorParameterValues`*(obj {.inject.}: UMaterialInstancePtr): var TArray[
    FVectorParameterValue] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `vectorParameterValues=`*(obj {.inject.}: UMaterialInstancePtr;
                               val {.inject.}: TArray[FVectorParameterValue]): void {.
    importcpp: "setvectorParameterValues(@)", header: "UEGenBindings.h".}
proc `doubleVectorParameterValues`*(obj {.inject.}: UMaterialInstancePtr): var TArray[
    FDoubleVectorParameterValue] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `doubleVectorParameterValues=`*(obj {.inject.}: UMaterialInstancePtr;
    val {.inject.}: TArray[FDoubleVectorParameterValue]): void {.
    importcpp: "setdoubleVectorParameterValues(@)", header: "UEGenBindings.h".}
proc `textureParameterValues`*(obj {.inject.}: UMaterialInstancePtr): var TArray[
    FTextureParameterValue] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textureParameterValues=`*(obj {.inject.}: UMaterialInstancePtr;
                                val {.inject.}: TArray[FTextureParameterValue]): void {.
    importcpp: "settextureParameterValues(@)", header: "UEGenBindings.h".}
proc `runtimeVirtualTextureParameterValues`*(obj {.inject.}: UMaterialInstancePtr): var TArray[
    FRuntimeVirtualTextureParameterValue] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `runtimeVirtualTextureParameterValues=`*(
    obj {.inject.}: UMaterialInstancePtr;
    val {.inject.}: TArray[FRuntimeVirtualTextureParameterValue]): void {.
    importcpp: "setruntimeVirtualTextureParameterValues(@)",
    header: "UEGenBindings.h".}
proc `fontParameterValues`*(obj {.inject.}: UMaterialInstancePtr): var TArray[
    FFontParameterValue] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fontParameterValues=`*(obj {.inject.}: UMaterialInstancePtr;
                             val {.inject.}: TArray[FFontParameterValue]): void {.
    importcpp: "setfontParameterValues(@)", header: "UEGenBindings.h".}
proc getVectorParameterValue*(obj {.inject.}: UMaterialInstanceConstantPtr;
                              parameterName {.inject.}: FName): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTextureParameterValue*(obj {.inject.}: UMaterialInstanceConstantPtr;
                               parameterName {.inject.}: FName): UTexturePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScalarParameterValue*(obj {.inject.}: UMaterialInstanceConstantPtr;
                              parameterName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPreviewSkeletalMesh*(obj {.inject.}: UAnimationAssetPtr;
                             previewMesh {.inject.}: USkeletalMeshPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayLength*(obj {.inject.}: UAnimationAssetPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `audioComponent`*(obj {.inject.}: AAmbientSoundPtr): TObjectPtr[
    UAudioComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `audioComponent=`*(obj {.inject.}: AAmbientSoundPtr;
                        val {.inject.}: TObjectPtr[UAudioComponent]): void {.
    importcpp: "setaudioComponent(@)", header: "UEGenBindings.h".}
proc stop*(obj {.inject.}: AAmbientSoundPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc play*(obj {.inject.}: AAmbientSoundPtr; startTime {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fadeOut*(obj {.inject.}: AAmbientSoundPtr;
              fadeOutDuration {.inject.}: float32;
              fadeVolumeLevel {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc fadeIn*(obj {.inject.}: AAmbientSoundPtr;
             fadeInDuration {.inject.}: float32;
             fadeVolumeLevel {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc adjustVolume*(obj {.inject.}: AAmbientSoundPtr;
                   adjustVolumeDuration {.inject.}: float32;
                   adjustVolumeLevel {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSkeleton*(inAsset {.inject.}: UAnimationAssetPtr): USkeletonPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneCustomAttributeNamesToImport*(obj {.inject.}: UAnimationSettingsPtr): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sequenceLength`*(obj {.inject.}: UAnimSequenceBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sequenceLength=`*(obj {.inject.}: UAnimSequenceBasePtr;
                        val {.inject.}: float32): void {.
    importcpp: "setsequenceLength(@)", header: "UEGenBindings.h".}
proc `dataModel`*(obj {.inject.}: UAnimSequenceBasePtr): TObjectPtr[
    UAnimDataModel] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `dataModel=`*(obj {.inject.}: UAnimSequenceBasePtr;
                   val {.inject.}: TObjectPtr[UAnimDataModel]): void {.
    importcpp: "setdataModel(@)", header: "UEGenBindings.h".}
proc `controller`*(obj {.inject.}: UAnimSequenceBasePtr): TScriptInterface[
    UAnimationDataController] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `controller=`*(obj {.inject.}: UAnimSequenceBasePtr;
                    val {.inject.}: TScriptInterface[UAnimationDataController]): void {.
    importcpp: "setcontroller(@)", header: "UEGenBindings.h".}
proc `boneAnimationTracks`*(obj {.inject.}: UAnimDataModelPtr): var TArray[
    FBoneAnimationTrack] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `boneAnimationTracks=`*(obj {.inject.}: UAnimDataModelPtr;
                             val {.inject.}: TArray[FBoneAnimationTrack]): void {.
    importcpp: "setboneAnimationTracks(@)", header: "UEGenBindings.h".}
proc `playLength`*(obj {.inject.}: UAnimDataModelPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playLength=`*(obj {.inject.}: UAnimDataModelPtr; val {.inject.}: float32): void {.
    importcpp: "setplayLength(@)", header: "UEGenBindings.h".}
proc `frameRate`*(obj {.inject.}: UAnimDataModelPtr): FFrameRate {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `frameRate=`*(obj {.inject.}: UAnimDataModelPtr; val {.inject.}: FFrameRate): void {.
    importcpp: "setframeRate(@)", header: "UEGenBindings.h".}
proc `numberOfFrames`*(obj {.inject.}: UAnimDataModelPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numberOfFrames=`*(obj {.inject.}: UAnimDataModelPtr; val {.inject.}: int32): void {.
    importcpp: "setnumberOfFrames(@)", header: "UEGenBindings.h".}
proc `numberOfKeys`*(obj {.inject.}: UAnimDataModelPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numberOfKeys=`*(obj {.inject.}: UAnimDataModelPtr; val {.inject.}: int32): void {.
    importcpp: "setnumberOfKeys(@)", header: "UEGenBindings.h".}
proc `curveData`*(obj {.inject.}: UAnimDataModelPtr): FAnimationCurveData {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `curveData=`*(obj {.inject.}: UAnimDataModelPtr;
                   val {.inject.}: FAnimationCurveData): void {.
    importcpp: "setcurveData(@)", header: "UEGenBindings.h".}
proc `animatedBoneAttributes`*(obj {.inject.}: UAnimDataModelPtr): var TArray[
    FAnimatedBoneAttribute] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `animatedBoneAttributes=`*(obj {.inject.}: UAnimDataModelPtr;
                                val {.inject.}: TArray[FAnimatedBoneAttribute]): void {.
    importcpp: "setanimatedBoneAttributes(@)", header: "UEGenBindings.h".}
proc isValidBoneTrackIndex*(obj {.inject.}: UAnimDataModelPtr;
                            trackIndex {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayLength*(obj {.inject.}: UAnimDataModelPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumBoneTracks*(obj {.inject.}: UAnimDataModelPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumberOfTransformCurves*(obj {.inject.}: UAnimDataModelPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumberOfKeys*(obj {.inject.}: UAnimDataModelPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumberOfFrames*(obj {.inject.}: UAnimDataModelPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumberOfFloatCurves*(obj {.inject.}: UAnimDataModelPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFrameRate*(obj {.inject.}: UAnimDataModelPtr): FFrameRate {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneTrackNames*(obj {.inject.}: UAnimDataModelPtr;
                        outNames {.inject.}: var TArray[FName]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneTrackIndexByName*(obj {.inject.}: UAnimDataModelPtr;
                              trackName {.inject.}: FName): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneTrackIndex*(obj {.inject.}: UAnimDataModelPtr;
                        track {.inject.}: var FBoneAnimationTrack): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneTrackByName*(obj {.inject.}: UAnimDataModelPtr;
                         trackName {.inject.}: FName): FBoneAnimationTrack {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneTrackByIndex*(obj {.inject.}: UAnimDataModelPtr;
                          trackIndex {.inject.}: int32): FBoneAnimationTrack {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneAnimationTracks*(obj {.inject.}: UAnimDataModelPtr): TArray[FBoneAnimationTrack] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAnimationSequence*(obj {.inject.}: UAnimDataModelPtr): UAnimSequencePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPayload*(payload {.inject.}: var FAnimDataModelNotifPayload): FEmptyPayload {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc copyPayload*(payload {.inject.}: var FAnimDataModelNotifPayload;
                  expectedStruct {.inject.}: UScriptStructPtr;
                  outPayload {.inject.}: var FEmptyPayload): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendModeIn`*(obj {.inject.}: UAnimMontagePtr): EMontageBlendMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendModeIn=`*(obj {.inject.}: UAnimMontagePtr;
                     val {.inject.}: EMontageBlendMode): void {.
    importcpp: "setblendModeIn(@)", header: "UEGenBindings.h".}
proc `blendModeOut`*(obj {.inject.}: UAnimMontagePtr): EMontageBlendMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendModeOut=`*(obj {.inject.}: UAnimMontagePtr;
                      val {.inject.}: EMontageBlendMode): void {.
    importcpp: "setblendModeOut(@)", header: "UEGenBindings.h".}
proc isValidSectionName*(obj {.inject.}: UAnimMontagePtr;
                         inSectionName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultBlendOutTime*(obj {.inject.}: UAnimMontagePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultBlendInTime*(obj {.inject.}: UAnimMontagePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBlendOutArgs*(obj {.inject.}: UAnimMontagePtr): FAlphaBlendArgs {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBlendInArgs*(obj {.inject.}: UAnimMontagePtr): FAlphaBlendArgs {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createSlotAnimationAsDynamicMontage_WithBlendSettings*(
    asset {.inject.}: UAnimSequenceBasePtr; slotNodeName {.inject.}: FName;
    blendInSettings {.inject.}: var FMontageBlendSettings;
    blendOutSettings {.inject.}: var FMontageBlendSettings;
    inPlayRate {.inject.}: float32; loopCount {.inject.}: int32;
    inBlendOutTriggerTime {.inject.}: float32): UAnimMontagePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTriggeredByMirroredAnimation*(eventReference {.inject.}: var FAnimNotifyEventReference): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMirrorDataTable*(eventReference {.inject.}: var FAnimNotifyEventReference): UMirrorDataTablePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTriggeredByStateMachine*(eventReference {.inject.}: var FAnimNotifyEventReference;
                                animInstance {.inject.}: UAnimInstancePtr;
                                stateMachineName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTriggeredByStateInStateMachine*(eventReference {.inject.}: var FAnimNotifyEventReference;
    animInstance {.inject.}: UAnimInstancePtr;
                                       stateMachineName {.inject.}: FName;
                                       stateName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTriggeredByState*(eventReference {.inject.}: var FAnimNotifyEventReference;
                         animInstance {.inject.}: UAnimInstancePtr;
                         stateName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pSTemplate`*(obj {.inject.}: UAnimNotifyState_TrailPtr): TObjectPtr[
    UParticleSystem] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pSTemplate=`*(obj {.inject.}: UAnimNotifyState_TrailPtr;
                    val {.inject.}: TObjectPtr[UParticleSystem]): void {.
    importcpp: "setpSTemplate(@)", header: "UEGenBindings.h".}
proc `firstSocketName`*(obj {.inject.}: UAnimNotifyState_TrailPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `firstSocketName=`*(obj {.inject.}: UAnimNotifyState_TrailPtr;
                         val {.inject.}: FName): void {.
    importcpp: "setfirstSocketName(@)", header: "UEGenBindings.h".}
proc `secondSocketName`*(obj {.inject.}: UAnimNotifyState_TrailPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `secondSocketName=`*(obj {.inject.}: UAnimNotifyState_TrailPtr;
                          val {.inject.}: FName): void {.
    importcpp: "setsecondSocketName(@)", header: "UEGenBindings.h".}
proc `widthScaleMode`*(obj {.inject.}: UAnimNotifyState_TrailPtr): ETrailWidthMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `widthScaleMode=`*(obj {.inject.}: UAnimNotifyState_TrailPtr;
                        val {.inject.}: ETrailWidthMode): void {.
    importcpp: "setwidthScaleMode(@)", header: "UEGenBindings.h".}
proc `widthScaleCurve`*(obj {.inject.}: UAnimNotifyState_TrailPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `widthScaleCurve=`*(obj {.inject.}: UAnimNotifyState_TrailPtr;
                         val {.inject.}: FName): void {.
    importcpp: "setwidthScaleCurve(@)", header: "UEGenBindings.h".}
proc `bRecycleSpawnedSystems`*(obj {.inject.}: UAnimNotifyState_TrailPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRecycleSpawnedSystems=`*(obj {.inject.}: UAnimNotifyState_TrailPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbRecycleSpawnedSystems(@)", header: "UEGenBindings.h".}
proc removeCustomAttribute*(obj {.inject.}: UAnimSequencePtr;
                            boneName {.inject.}: var FName;
                            attributeName {.inject.}: var FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAllCustomAttributesForBone*(obj {.inject.}: UAnimSequencePtr;
                                       boneName {.inject.}: var FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAllCustomAttributes*(obj {.inject.}: UAnimSequencePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addBoneStringCustomAttribute*(obj {.inject.}: UAnimSequencePtr;
                                   boneName {.inject.}: var FName;
                                   attributeName {.inject.}: var FName;
                                   timeKeys {.inject.}: var TArray[float];
                                   valueKeys {.inject.}: var TArray[FString]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addBoneIntegerCustomAttribute*(obj {.inject.}: UAnimSequencePtr;
                                    boneName {.inject.}: var FName;
                                    attributeName {.inject.}: var FName;
                                    timeKeys {.inject.}: var TArray[float];
                                    valueKeys {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addBoneFloatCustomAttribute*(obj {.inject.}: UAnimSequencePtr;
                                  boneName {.inject.}: var FName;
                                  attributeName {.inject.}: var FName;
                                  timeKeys {.inject.}: var TArray[float];
                                  valueKeys {.inject.}: var TArray[float]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaleKeys*(track {.inject.}: var FRawAnimSequenceTrack): TArray[FVector] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRotationalKeys*(track {.inject.}: var FRawAnimSequenceTrack): TArray[FQuat] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPositionalKeys*(track {.inject.}: var FRawAnimSequenceTrack): TArray[FVector] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `arrowColor`*(obj {.inject.}: UArrowComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `arrowColor=`*(obj {.inject.}: UArrowComponentPtr; val {.inject.}: FColor): void {.
    importcpp: "setarrowColor(@)", header: "UEGenBindings.h".}
proc `arrowSize`*(obj {.inject.}: UArrowComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `arrowSize=`*(obj {.inject.}: UArrowComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setarrowSize(@)", header: "UEGenBindings.h".}
proc `arrowLength`*(obj {.inject.}: UArrowComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `arrowLength=`*(obj {.inject.}: UArrowComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setarrowLength(@)", header: "UEGenBindings.h".}
proc `screenSize`*(obj {.inject.}: UArrowComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `screenSize=`*(obj {.inject.}: UArrowComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setscreenSize(@)", header: "UEGenBindings.h".}
proc `bIsScreenSizeScaled`*(obj {.inject.}: UArrowComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsScreenSizeScaled=`*(obj {.inject.}: UArrowComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbIsScreenSizeScaled(@)", header: "UEGenBindings.h".}
proc `bTreatAsASprite`*(obj {.inject.}: UArrowComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bTreatAsASprite=`*(obj {.inject.}: UArrowComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbTreatAsASprite(@)", header: "UEGenBindings.h".}
proc `bUseInEditorScaling`*(obj {.inject.}: UArrowComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseInEditorScaling=`*(obj {.inject.}: UArrowComponentPtr;
                             val {.inject.}: bool): void {.
    importcpp: "setbUseInEditorScaling(@)", header: "UEGenBindings.h".}
proc setArrowColor*(obj {.inject.}: UArrowComponentPtr;
                    newColor {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncSaveGameToSlot*(worldContextObject {.inject.}: UObjectPtr;
                          saveGameObject {.inject.}: USaveGamePtr;
                          slotName {.inject.}: FString;
                          userIndex {.inject.}: int32): UAsyncActionHandleSaveGamePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncLoadGameFromSlot*(worldContextObject {.inject.}: UObjectPtr;
                            slotName {.inject.}: FString;
                            userIndex {.inject.}: int32): UAsyncActionHandleSaveGamePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncLoadPrimaryAsset*(worldContextObject {.inject.}: UObjectPtr;
                            primaryAsset {.inject.}: FPrimaryAssetId;
                            loadBundles {.inject.}: var TArray[FName]): UAsyncActionLoadPrimaryAssetPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncLoadPrimaryAssetClass*(worldContextObject {.inject.}: UObjectPtr;
                                 primaryAsset {.inject.}: FPrimaryAssetId;
                                 loadBundles {.inject.}: var TArray[FName]): UAsyncActionLoadPrimaryAssetClassPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncLoadPrimaryAssetList*(worldContextObject {.inject.}: UObjectPtr;
    primaryAssetList {.inject.}: var TArray[FPrimaryAssetId];
                                loadBundles {.inject.}: var TArray[FName]): UAsyncActionLoadPrimaryAssetListPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncLoadPrimaryAssetClassList*(worldContextObject {.inject.}: UObjectPtr;
    primaryAssetList {.inject.}: var TArray[FPrimaryAssetId];
                                     loadBundles {.inject.}: var TArray[FName]): UAsyncActionLoadPrimaryAssetClassListPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncChangeBundleStateForPrimaryAssetList*(
    worldContextObject {.inject.}: UObjectPtr;
    primaryAssetList {.inject.}: var TArray[FPrimaryAssetId];
    addBundles {.inject.}: var TArray[FName];
    removeBundles {.inject.}: var TArray[FName]): UAsyncActionChangePrimaryAssetBundlesPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asyncChangeBundleStateForMatchingPrimaryAssets*(
    worldContextObject {.inject.}: UObjectPtr;
    newBundles {.inject.}: var TArray[FName];
    oldBundles {.inject.}: var TArray[FName]): UAsyncActionChangePrimaryAssetBundlesPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `atmosphericFogComponent`*(obj {.inject.}: AAtmosphericFogPtr): TObjectPtr[
    UAtmosphericFogComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `atmosphericFogComponent=`*(obj {.inject.}: AAtmosphericFogPtr;
    val {.inject.}: TObjectPtr[UAtmosphericFogComponent]): void {.
    importcpp: "setatmosphericFogComponent(@)", header: "UEGenBindings.h".}
proc `transformMode`*(obj {.inject.}: USkyAtmosphereComponentPtr): ESkyAtmosphereTransformMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `transformMode=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                       val {.inject.}: ESkyAtmosphereTransformMode): void {.
    importcpp: "settransformMode(@)", header: "UEGenBindings.h".}
proc `bottomRadius`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bottomRadius=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setbottomRadius(@)", header: "UEGenBindings.h".}
proc `groundAlbedo`*(obj {.inject.}: USkyAtmosphereComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `groundAlbedo=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                      val {.inject.}: FColor): void {.
    importcpp: "setgroundAlbedo(@)", header: "UEGenBindings.h".}
proc `atmosphereHeight`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `atmosphereHeight=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setatmosphereHeight(@)", header: "UEGenBindings.h".}
proc `multiScatteringFactor`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `multiScatteringFactor=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setmultiScatteringFactor(@)", header: "UEGenBindings.h".}
proc `traceSampleCountScale`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `traceSampleCountScale=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "settraceSampleCountScale(@)", header: "UEGenBindings.h".}
proc `rayleighScatteringScale`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rayleighScatteringScale=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                                 val {.inject.}: float32): void {.
    importcpp: "setrayleighScatteringScale(@)", header: "UEGenBindings.h".}
proc `rayleighScattering`*(obj {.inject.}: USkyAtmosphereComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rayleighScattering=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            val {.inject.}: FLinearColor): void {.
    importcpp: "setrayleighScattering(@)", header: "UEGenBindings.h".}
proc `rayleighExponentialDistribution`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rayleighExponentialDistribution=`*(
    obj {.inject.}: USkyAtmosphereComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setrayleighExponentialDistribution(@)",
    header: "UEGenBindings.h".}
proc `mieScatteringScale`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mieScatteringScale=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setmieScatteringScale(@)", header: "UEGenBindings.h".}
proc `mieScattering`*(obj {.inject.}: USkyAtmosphereComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mieScattering=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                       val {.inject.}: FLinearColor): void {.
    importcpp: "setmieScattering(@)", header: "UEGenBindings.h".}
proc `mieAbsorptionScale`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mieAbsorptionScale=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setmieAbsorptionScale(@)", header: "UEGenBindings.h".}
proc `mieAbsorption`*(obj {.inject.}: USkyAtmosphereComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mieAbsorption=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                       val {.inject.}: FLinearColor): void {.
    importcpp: "setmieAbsorption(@)", header: "UEGenBindings.h".}
proc `mieAnisotropy`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mieAnisotropy=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setmieAnisotropy(@)", header: "UEGenBindings.h".}
proc `mieExponentialDistribution`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mieExponentialDistribution=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                                    val {.inject.}: float32): void {.
    importcpp: "setmieExponentialDistribution(@)", header: "UEGenBindings.h".}
proc `otherAbsorptionScale`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `otherAbsorptionScale=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setotherAbsorptionScale(@)", header: "UEGenBindings.h".}
proc `otherAbsorption`*(obj {.inject.}: USkyAtmosphereComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `otherAbsorption=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                         val {.inject.}: FLinearColor): void {.
    importcpp: "setotherAbsorption(@)", header: "UEGenBindings.h".}
proc `otherTentDistribution`*(obj {.inject.}: USkyAtmosphereComponentPtr): FTentDistribution {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `otherTentDistribution=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                               val {.inject.}: FTentDistribution): void {.
    importcpp: "setotherTentDistribution(@)", header: "UEGenBindings.h".}
proc `skyLuminanceFactor`*(obj {.inject.}: USkyAtmosphereComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skyLuminanceFactor=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            val {.inject.}: FLinearColor): void {.
    importcpp: "setskyLuminanceFactor(@)", header: "UEGenBindings.h".}
proc `aerialPespectiveViewDistanceScale`*(
    obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `aerialPespectiveViewDistanceScale=`*(
    obj {.inject.}: USkyAtmosphereComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setaerialPespectiveViewDistanceScale(@)",
    header: "UEGenBindings.h".}
proc `heightFogContribution`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `heightFogContribution=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setheightFogContribution(@)", header: "UEGenBindings.h".}
proc `transmittanceMinLightElevationAngle`*(
    obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `transmittanceMinLightElevationAngle=`*(
    obj {.inject.}: USkyAtmosphereComponentPtr; val {.inject.}: float32): void {.
    importcpp: "settransmittanceMinLightElevationAngle(@)",
    header: "UEGenBindings.h".}
proc `aerialPerspectiveStartDepth`*(obj {.inject.}: USkyAtmosphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `aerialPerspectiveStartDepth=`*(obj {.inject.}: USkyAtmosphereComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setaerialPerspectiveStartDepth(@)", header: "UEGenBindings.h".}
proc setSkyLuminanceFactor*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            newValue {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRayleighScatteringScale*(obj {.inject.}: USkyAtmosphereComponentPtr;
                                 newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRayleighScattering*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            newValue {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRayleighExponentialDistribution*(
    obj {.inject.}: USkyAtmosphereComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOtherAbsorptionScale*(obj {.inject.}: USkyAtmosphereComponentPtr;
                              newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOtherAbsorption*(obj {.inject.}: USkyAtmosphereComponentPtr;
                         newValue {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMultiScatteringFactor*(obj {.inject.}: USkyAtmosphereComponentPtr;
                               newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMieScatteringScale*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMieScattering*(obj {.inject.}: USkyAtmosphereComponentPtr;
                       newValue {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMieExponentialDistribution*(obj {.inject.}: USkyAtmosphereComponentPtr;
                                    newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMieAnisotropy*(obj {.inject.}: USkyAtmosphereComponentPtr;
                       newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setMieAbsorptionScale*(obj {.inject.}: USkyAtmosphereComponentPtr;
                            newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMieAbsorption*(obj {.inject.}: USkyAtmosphereComponentPtr;
                       newValue {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setHeightFogContribution*(obj {.inject.}: USkyAtmosphereComponentPtr;
                               newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAtmosphereHeight*(obj {.inject.}: USkyAtmosphereComponentPtr;
                          newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAerialPespectiveViewDistanceScale*(
    obj {.inject.}: USkyAtmosphereComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc overrideAtmosphereLightDirection*(obj {.inject.}: USkyAtmosphereComponentPtr;
                                       atmosphereLightIndex {.inject.}: int32;
                                       lightDirection {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAtmosphereTransmitanceOnGroundAtPlanetTop*(
    obj {.inject.}: USkyAtmosphereComponentPtr;
    directionalLight {.inject.}: UDirectionalLightComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSunMultiplier*(obj {.inject.}: UAtmosphericFogComponentPtr;
                       newSunMultiplier {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStartDistance*(obj {.inject.}: UAtmosphericFogComponentPtr;
                       newStartDistance {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPrecomputeParams*(obj {.inject.}: UAtmosphericFogComponentPtr;
                          densityHeight {.inject.}: float32;
                          maxScatteringOrder {.inject.}: int32;
                          inscatterAltitudeSampleNum {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFogMultiplier*(obj {.inject.}: UAtmosphericFogComponentPtr;
                       newFogMultiplier {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDistanceScale*(obj {.inject.}: UAtmosphericFogComponentPtr;
                       newDistanceScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDistanceOffset*(obj {.inject.}: UAtmosphericFogComponentPtr;
                        newDistanceOffset {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDensityOffset*(obj {.inject.}: UAtmosphericFogComponentPtr;
                       newDensityOffset {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDensityMultiplier*(obj {.inject.}: UAtmosphericFogComponentPtr;
                           newDensityMultiplier {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDefaultLightColor*(obj {.inject.}: UAtmosphericFogComponentPtr;
                           newLightColor {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDefaultBrightness*(obj {.inject.}: UAtmosphericFogComponentPtr;
                           newBrightness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAltitudeScale*(obj {.inject.}: UAtmosphericFogComponentPtr;
                       newAltitudeScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc disableSunDisk*(obj {.inject.}: UAtmosphericFogComponentPtr;
                     newSunDisk {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc disableGroundScattering*(obj {.inject.}: UAtmosphericFogComponentPtr;
                              newGroundScattering {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValid*(identifier {.inject.}: var FAnimationAttributeIdentifier): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createAttributeIdentifier*(animationAsset {.inject.}: UAnimationAssetPtr;
                                attributeName {.inject.}: FName;
                                boneName {.inject.}: FName;
                                attributeType {.inject.}: UScriptStructPtr;
                                bValidateExistsOnAsset {.inject.}: bool): FAnimationAttributeIdentifier {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `audioParams`*(obj {.inject.}: UInitialActiveSoundParamsPtr): var TArray[
    FAudioParameter] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `audioParams=`*(obj {.inject.}: UInitialActiveSoundParamsPtr;
                     val {.inject.}: TArray[FAudioParameter]): void {.
    importcpp: "setaudioParams(@)", header: "UEGenBindings.h".}
proc `sound`*(obj {.inject.}: UAudioComponentPtr): TObjectPtr[USoundBase] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sound=`*(obj {.inject.}: UAudioComponentPtr;
               val {.inject.}: TObjectPtr[USoundBase]): void {.
    importcpp: "setsound(@)", header: "UEGenBindings.h".}
proc `defaultParameters`*(obj {.inject.}: UAudioComponentPtr): var TArray[
    FAudioParameter] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultParameters=`*(obj {.inject.}: UAudioComponentPtr;
                           val {.inject.}: TArray[FAudioParameter]): void {.
    importcpp: "setdefaultParameters(@)", header: "UEGenBindings.h".}
proc `bAllowSpatialization`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAllowSpatialization=`*(obj {.inject.}: UAudioComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbAllowSpatialization(@)", header: "UEGenBindings.h".}
proc `bOverrideAttenuation`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideAttenuation=`*(obj {.inject.}: UAudioComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbOverrideAttenuation(@)", header: "UEGenBindings.h".}
proc `bOverrideSubtitlePriority`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideSubtitlePriority=`*(obj {.inject.}: UAudioComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbOverrideSubtitlePriority(@)", header: "UEGenBindings.h".}
proc `bIsUISound`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsUISound=`*(obj {.inject.}: UAudioComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsUISound(@)", header: "UEGenBindings.h".}
proc `bEnableLowPassFilter`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableLowPassFilter=`*(obj {.inject.}: UAudioComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbEnableLowPassFilter(@)", header: "UEGenBindings.h".}
proc `bOverridePriority`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverridePriority=`*(obj {.inject.}: UAudioComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbOverridePriority(@)", header: "UEGenBindings.h".}
proc `bSuppressSubtitles`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSuppressSubtitles=`*(obj {.inject.}: UAudioComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbSuppressSubtitles(@)", header: "UEGenBindings.h".}
proc `bCanPlayMultipleInstances`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCanPlayMultipleInstances=`*(obj {.inject.}: UAudioComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbCanPlayMultipleInstances(@)", header: "UEGenBindings.h".}
proc `bDisableParameterUpdatesWhilePlaying`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableParameterUpdatesWhilePlaying=`*(obj {.inject.}: UAudioComponentPtr;
    val {.inject.}: uint8): void {.importcpp: "setbDisableParameterUpdatesWhilePlaying(@)",
                                   header: "UEGenBindings.h".}
proc `bAutoManageAttachment`*(obj {.inject.}: UAudioComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoManageAttachment=`*(obj {.inject.}: UAudioComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbAutoManageAttachment(@)", header: "UEGenBindings.h".}
proc `pitchModulationMin`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pitchModulationMin=`*(obj {.inject.}: UAudioComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setpitchModulationMin(@)", header: "UEGenBindings.h".}
proc `pitchModulationMax`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pitchModulationMax=`*(obj {.inject.}: UAudioComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setpitchModulationMax(@)", header: "UEGenBindings.h".}
proc `volumeModulationMin`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumeModulationMin=`*(obj {.inject.}: UAudioComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setvolumeModulationMin(@)", header: "UEGenBindings.h".}
proc `volumeModulationMax`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumeModulationMax=`*(obj {.inject.}: UAudioComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setvolumeModulationMax(@)", header: "UEGenBindings.h".}
proc `volumeMultiplier`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumeMultiplier=`*(obj {.inject.}: UAudioComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setvolumeMultiplier(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerAttackTime`*(obj {.inject.}: UAudioComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerAttackTime=`*(obj {.inject.}: UAudioComponentPtr;
                                    val {.inject.}: int32): void {.
    importcpp: "setenvelopeFollowerAttackTime(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerReleaseTime`*(obj {.inject.}: UAudioComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerReleaseTime=`*(obj {.inject.}: UAudioComponentPtr;
                                     val {.inject.}: int32): void {.
    importcpp: "setenvelopeFollowerReleaseTime(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: UAudioComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setpriority(@)", header: "UEGenBindings.h".}
proc `subtitlePriority`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subtitlePriority=`*(obj {.inject.}: UAudioComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setsubtitlePriority(@)", header: "UEGenBindings.h".}
proc `sourceEffectChain`*(obj {.inject.}: UAudioComponentPtr): TObjectPtr[
    USoundEffectSourcePresetChain] {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc `sourceEffectChain=`*(obj {.inject.}: UAudioComponentPtr; val {.inject.}: TObjectPtr[
    USoundEffectSourcePresetChain]): void {.
    importcpp: "setsourceEffectChain(@)", header: "UEGenBindings.h".}
proc `pitchMultiplier`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pitchMultiplier=`*(obj {.inject.}: UAudioComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setpitchMultiplier(@)", header: "UEGenBindings.h".}
proc `lowPassFilterFrequency`*(obj {.inject.}: UAudioComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lowPassFilterFrequency=`*(obj {.inject.}: UAudioComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setlowPassFilterFrequency(@)", header: "UEGenBindings.h".}
proc `attenuationSettings`*(obj {.inject.}: UAudioComponentPtr): TObjectPtr[
    USoundAttenuation] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuationSettings=`*(obj {.inject.}: UAudioComponentPtr;
                             val {.inject.}: TObjectPtr[USoundAttenuation]): void {.
    importcpp: "setattenuationSettings(@)", header: "UEGenBindings.h".}
proc `attenuationOverrides`*(obj {.inject.}: UAudioComponentPtr): FSoundAttenuationSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuationOverrides=`*(obj {.inject.}: UAudioComponentPtr;
                              val {.inject.}: FSoundAttenuationSettings): void {.
    importcpp: "setattenuationOverrides(@)", header: "UEGenBindings.h".}
proc `concurrencySet`*(obj {.inject.}: UAudioComponentPtr): TSet[
    TObjectPtr[USoundConcurrency]] {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc `concurrencySet=`*(obj {.inject.}: UAudioComponentPtr;
                        val {.inject.}: TSet[TObjectPtr[USoundConcurrency]]): void {.
    importcpp: "setconcurrencySet(@)", header: "UEGenBindings.h".}
proc `autoAttachLocationRule`*(obj {.inject.}: UAudioComponentPtr): EAttachmentRule {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachLocationRule=`*(obj {.inject.}: UAudioComponentPtr;
                                val {.inject.}: EAttachmentRule): void {.
    importcpp: "setautoAttachLocationRule(@)", header: "UEGenBindings.h".}
proc `autoAttachRotationRule`*(obj {.inject.}: UAudioComponentPtr): EAttachmentRule {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachRotationRule=`*(obj {.inject.}: UAudioComponentPtr;
                                val {.inject.}: EAttachmentRule): void {.
    importcpp: "setautoAttachRotationRule(@)", header: "UEGenBindings.h".}
proc `autoAttachScaleRule`*(obj {.inject.}: UAudioComponentPtr): EAttachmentRule {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachScaleRule=`*(obj {.inject.}: UAudioComponentPtr;
                             val {.inject.}: EAttachmentRule): void {.
    importcpp: "setautoAttachScaleRule(@)", header: "UEGenBindings.h".}
proc `modulationRouting`*(obj {.inject.}: UAudioComponentPtr): FSoundModulationDefaultRoutingSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `modulationRouting=`*(obj {.inject.}: UAudioComponentPtr; val {.inject.}: FSoundModulationDefaultRoutingSettings): void {.
    importcpp: "setmodulationRouting(@)", header: "UEGenBindings.h".}
proc `autoAttachParent`*(obj {.inject.}: UAudioComponentPtr): TWeakObjectPtr[
    USceneComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachParent=`*(obj {.inject.}: UAudioComponentPtr;
                          val {.inject.}: TWeakObjectPtr[USceneComponent]): void {.
    importcpp: "setautoAttachParent(@)", header: "UEGenBindings.h".}
proc `autoAttachSocketName`*(obj {.inject.}: UAudioComponentPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachSocketName=`*(obj {.inject.}: UAudioComponentPtr;
                              val {.inject.}: FName): void {.
    importcpp: "setautoAttachSocketName(@)", header: "UEGenBindings.h".}
proc stopDelayed*(obj {.inject.}: UAudioComponentPtr;
                  delayTime {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc stop*(obj {.inject.}: UAudioComponentPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setWaveParameter*(obj {.inject.}: UAudioComponentPtr;
                       inName {.inject.}: FName; inWave {.inject.}: USoundWavePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVolumeMultiplier*(obj {.inject.}: UAudioComponentPtr;
                          newVolumeMultiplier {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUISound*(obj {.inject.}: UAudioComponentPtr; bInUISound {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSubmixSend*(obj {.inject.}: UAudioComponentPtr;
                    submix {.inject.}: USoundSubmixBasePtr;
                    sendLevel {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSourceBusSendPreEffect*(obj {.inject.}: UAudioComponentPtr;
                                soundSourceBus {.inject.}: USoundSourceBusPtr;
                                sourceBusSendLevel {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSourceBusSendPostEffect*(obj {.inject.}: UAudioComponentPtr;
                                 soundSourceBus {.inject.}: USoundSourceBusPtr;
                                 sourceBusSendLevel {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSound*(obj {.inject.}: UAudioComponentPtr;
               newSound {.inject.}: USoundBasePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPitchMultiplier*(obj {.inject.}: UAudioComponentPtr;
                         newPitchMultiplier {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPaused*(obj {.inject.}: UAudioComponentPtr; bPause {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOutputToBusOnly*(obj {.inject.}: UAudioComponentPtr;
                         bInOutputToBusOnly {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLowPassFilterFrequency*(obj {.inject.}: UAudioComponentPtr;
                                inLowPassFilterFrequency {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLowPassFilterEnabled*(obj {.inject.}: UAudioComponentPtr;
                              inLowPassFilterEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIntParameter*(obj {.inject.}: UAudioComponentPtr;
                      inName {.inject.}: FName; inInt {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFloatParameter*(obj {.inject.}: UAudioComponentPtr;
                        inName {.inject.}: FName; inFloat {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoolParameter*(obj {.inject.}: UAudioComponentPtr;
                       inName {.inject.}: FName; inBool {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAudioBusSendPreEffect*(obj {.inject.}: UAudioComponentPtr;
                               audioBus {.inject.}: UAudioBusPtr;
                               audioBusSendLevel {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAudioBusSendPostEffect*(obj {.inject.}: UAudioComponentPtr;
                                audioBus {.inject.}: UAudioBusPtr;
                                audioBusSendLevel {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc play*(obj {.inject.}: UAudioComponentPtr; startTime {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isVirtualized*(obj {.inject.}: UAudioComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPlaying*(obj {.inject.}: UAudioComponentPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc hasCookedFFTData*(obj {.inject.}: UAudioComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasCookedAmplitudeEnvelopeData*(obj {.inject.}: UAudioComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayState*(obj {.inject.}: UAudioComponentPtr): EAudioComponentPlayState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCookedFFTDataForAllPlayingSounds*(obj {.inject.}: UAudioComponentPtr;
    outSoundWaveSpectralData {.inject.}: var TArray[
    FSoundWaveSpectralDataPerSound]): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getCookedFFTData*(obj {.inject.}: UAudioComponentPtr;
                       frequenciesToGet {.inject.}: var TArray[float];
    outSoundWaveSpectralData {.inject.}: var TArray[FSoundWaveSpectralData]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCookedEnvelopeDataForAllPlayingSounds*(
    obj {.inject.}: UAudioComponentPtr;
    outEnvelopeData {.inject.}: var TArray[FSoundWaveEnvelopeDataPerSound]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCookedEnvelopeData*(obj {.inject.}: UAudioComponentPtr;
                            outEnvelopeData {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fadeOut*(obj {.inject.}: UAudioComponentPtr;
              fadeOutDuration {.inject.}: float32;
              fadeVolumeLevel {.inject.}: float32;
              fadeCurve {.inject.}: EAudioFaderCurve): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fadeIn*(obj {.inject.}: UAudioComponentPtr;
             fadeInDuration {.inject.}: float32;
             fadeVolumeLevel {.inject.}: float32; startTime {.inject.}: float32;
             fadeCurve {.inject.}: EAudioFaderCurve): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc bP_GetAttenuationSettingsToApply*(obj {.inject.}: UAudioComponentPtr;
    outAttenuationSettings {.inject.}: var FSoundAttenuationSettings): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc adjustVolume*(obj {.inject.}: UAudioComponentPtr;
                   adjustVolumeDuration {.inject.}: float32;
                   adjustVolumeLevel {.inject.}: float32;
                   fadeCurve {.inject.}: EAudioFaderCurve): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc adjustAttenuation*(obj {.inject.}: UAudioComponentPtr;
    inAttenuationSettings {.inject.}: var FSoundAttenuationSettings): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: AAudioVolumePtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: AAudioVolumePtr; val {.inject.}: float32): void {.
    importcpp: "setpriority(@)", header: "UEGenBindings.h".}
proc `bEnabled`*(obj {.inject.}: AAudioVolumePtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bEnabled=`*(obj {.inject.}: AAudioVolumePtr; val {.inject.}: uint8): void {.
    importcpp: "setbEnabled(@)", header: "UEGenBindings.h".}
proc `settings`*(obj {.inject.}: AAudioVolumePtr): FReverbSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `settings=`*(obj {.inject.}: AAudioVolumePtr;
                  val {.inject.}: FReverbSettings): void {.
    importcpp: "setsettings(@)", header: "UEGenBindings.h".}
proc `ambientZoneSettings`*(obj {.inject.}: AAudioVolumePtr): FInteriorSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `ambientZoneSettings=`*(obj {.inject.}: AAudioVolumePtr;
                             val {.inject.}: FInteriorSettings): void {.
    importcpp: "setambientZoneSettings(@)", header: "UEGenBindings.h".}
proc `submixSendSettings`*(obj {.inject.}: AAudioVolumePtr): var TArray[
    FAudioVolumeSubmixSendSettings] {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc `submixSendSettings=`*(obj {.inject.}: AAudioVolumePtr; val {.inject.}: TArray[
    FAudioVolumeSubmixSendSettings]): void {.
    importcpp: "setsubmixSendSettings(@)", header: "UEGenBindings.h".}
proc `submixOverrideSettings`*(obj {.inject.}: AAudioVolumePtr): var TArray[
    FAudioVolumeSubmixOverrideSettings] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `submixOverrideSettings=`*(obj {.inject.}: AAudioVolumePtr; val {.inject.}: TArray[
    FAudioVolumeSubmixOverrideSettings]): void {.
    importcpp: "setsubmixOverrideSettings(@)", header: "UEGenBindings.h".}
proc setSubmixSendSettings*(obj {.inject.}: AAudioVolumePtr;
    newSubmixSendSettings {.inject.}: var TArray[FAudioVolumeSubmixSendSettings]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSubmixOverrideSettings*(obj {.inject.}: AAudioVolumePtr;
    newSubmixOverrideSettings {.inject.}: var TArray[
    FAudioVolumeSubmixOverrideSettings]): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setReverbSettings*(obj {.inject.}: AAudioVolumePtr;
                        newReverbSettings {.inject.}: var FReverbSettings): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPriority*(obj {.inject.}: AAudioVolumePtr;
                  newPriority {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setInteriorSettings*(obj {.inject.}: AAudioVolumePtr;
                          newInteriorSettings {.inject.}: var FInteriorSettings): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnabled*(obj {.inject.}: AAudioVolumePtr; bNewEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc registerMovementComponent*(obj {.inject.}: UAvoidanceManagerPtr;
                                movementComp {.inject.}: UMovementComponentPtr;
                                avoidanceWeight {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getObjectCount*(obj {.inject.}: UAvoidanceManagerPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNewAvoidanceUID*(obj {.inject.}: UAvoidanceManagerPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAvoidanceVelocityForComponent*(obj {.inject.}: UAvoidanceManagerPtr;
    movementComp {.inject.}: UMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sprite`*(obj {.inject.}: UBillboardComponentPtr): TObjectPtr[UTexture2D] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sprite=`*(obj {.inject.}: UBillboardComponentPtr;
                val {.inject.}: TObjectPtr[UTexture2D]): void {.
    importcpp: "setsprite(@)", header: "UEGenBindings.h".}
proc `bIsScreenSizeScaled`*(obj {.inject.}: UBillboardComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsScreenSizeScaled=`*(obj {.inject.}: UBillboardComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbIsScreenSizeScaled(@)", header: "UEGenBindings.h".}
proc `screenSize`*(obj {.inject.}: UBillboardComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `screenSize=`*(obj {.inject.}: UBillboardComponentPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setscreenSize(@)", header: "UEGenBindings.h".}
proc `u`*(obj {.inject.}: UBillboardComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `u=`*(obj {.inject.}: UBillboardComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setu(@)", header: "UEGenBindings.h".}
proc `uL`*(obj {.inject.}: UBillboardComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `uL=`*(obj {.inject.}: UBillboardComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setuL(@)", header: "UEGenBindings.h".}
proc `v`*(obj {.inject.}: UBillboardComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `v=`*(obj {.inject.}: UBillboardComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setv(@)", header: "UEGenBindings.h".}
proc `vL`*(obj {.inject.}: UBillboardComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `vL=`*(obj {.inject.}: UBillboardComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setvL(@)", header: "UEGenBindings.h".}
proc `opacityMaskRefVal`*(obj {.inject.}: UBillboardComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `opacityMaskRefVal=`*(obj {.inject.}: UBillboardComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setopacityMaskRefVal(@)", header: "UEGenBindings.h".}
proc `bUseInEditorScaling`*(obj {.inject.}: UBillboardComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseInEditorScaling=`*(obj {.inject.}: UBillboardComponentPtr;
                             val {.inject.}: bool): void {.
    importcpp: "setbUseInEditorScaling(@)", header: "UEGenBindings.h".}
proc setUV*(obj {.inject.}: UBillboardComponentPtr; newU {.inject.}: int32;
            newUL {.inject.}: int32; newV {.inject.}: int32;
            newVL {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSpriteAndUV*(obj {.inject.}: UBillboardComponentPtr;
                     newSprite {.inject.}: UTexture2DPtr; newU {.inject.}: int32;
                     newUL {.inject.}: int32; newV {.inject.}: int32;
                     newVL {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSprite*(obj {.inject.}: UBillboardComponentPtr;
                newSprite {.inject.}: UTexture2DPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setOpacityMaskRefVal*(obj {.inject.}: UBillboardComponentPtr;
                           refVal {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compatibleSkeletons`*(obj {.inject.}: USkeletonPtr): var TArray[
    TSoftObjectPtr[USkeleton]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compatibleSkeletons=`*(obj {.inject.}: USkeletonPtr;
                             val {.inject.}: TArray[TSoftObjectPtr[USkeleton]]): void {.
    importcpp: "setcompatibleSkeletons(@)", header: "UEGenBindings.h".}
proc addCompatibleSkeleton*(obj {.inject.}: USkeletonPtr;
                            sourceSkeleton {.inject.}: USkeletonPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMapPropertyByName*(`object` {.inject.}: UObjectPtr;
                           propertyName {.inject.}: FName;
                           value {.inject.}: var TMap[int32, int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc map_Values*(targetMap {.inject.}: var TMap[int32, int32];
                 values {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc map_Remove*(targetMap {.inject.}: var TMap[int32, int32];
                 key {.inject.}: var int32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc map_Length*(targetMap {.inject.}: var TMap[int32, int32]): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc map_Keys*(targetMap {.inject.}: var TMap[int32, int32];
               keys {.inject.}: var TArray[int32]): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc map_IsNotEmpty*(targetMap {.inject.}: var TMap[int32, int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc map_IsEmpty*(targetMap {.inject.}: var TMap[int32, int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc map_Find*(targetMap {.inject.}: var TMap[int32, int32];
               key {.inject.}: var int32; value {.inject.}: var int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc map_Contains*(targetMap {.inject.}: var TMap[int32, int32];
                   key {.inject.}: var int32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc map_Clear*(targetMap {.inject.}: var TMap[int32, int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc map_Add*(targetMap {.inject.}: var TMap[int32, int32];
              key {.inject.}: var int32; value {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc videoCaptureDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc validatePath*(inPath {.inject.}: FString; bDidSucceed {.inject.}: var bool;
                   outReason {.inject.}: var FText): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc split*(inPath {.inject.}: FString; pathPart {.inject.}: var FString;
            filenamePart {.inject.}: var FString;
            extensionPart {.inject.}: var FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc sourceConfigDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc shouldSaveToUserDir*(): bool {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc shaderWorkingDir*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc setProjectFilePath*(newGameProjectFilePath {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setExtension*(inPath {.inject.}: FString; inNewExtension {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc screenShotDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sandboxesDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc rootDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeDuplicateSlashes*(inPath {.inject.}: FString;
                             outPath {.inject.}: var FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectUserDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectSavedDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectPluginsDir*(): FString {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc projectPersistentDownloadDir*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc projectModsDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectLogDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectIntermediateDir*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc projectDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectContentDir*(): FString {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc projectConfigDir*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc profilingDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc normalizeFilename*(inPath {.inject.}: FString;
                        outPath {.inject.}: var FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc normalizeDirectoryName*(inPath {.inject.}: FString;
                             outPath {.inject.}: var FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeValidFileName*(inString {.inject.}: FString;
                        inReplacementChar {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeStandardFilename*(inPath {.inject.}: FString;
                           outPath {.inject.}: var FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makePlatformFilename*(inPath {.inject.}: FString;
                           outPath {.inject.}: var FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makePathRelativeTo*(inPath {.inject.}: FString;
                         inRelativeTo {.inject.}: FString;
                         outPath {.inject.}: var FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc launchDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isSamePath*(pathA {.inject.}: FString; pathB {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isRestrictedPath*(inPath {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isRelative*(inPath {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isProjectFilePathSet*(): bool {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc isDrive*(inPath {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc hasProjectPersistentDownloadDir*(): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getToolTipLocalizationPaths*(): TArray[FString] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getRestrictedFolderNames*(): TArray[FString] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getRelativePathToRoot*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPropertyNameLocalizationPaths*(): TArray[FString] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getProjectFilePath*(): FString {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc getPath*(inPath {.inject.}: FString): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getInvalidFileSystemChars*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getGameLocalizationPaths*(): TArray[FString] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getExtension*(inPath {.inject.}: FString; bIncludeDot {.inject.}: bool): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEngineLocalizationPaths*(): TArray[FString] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getEditorLocalizationPaths*(): TArray[FString] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getCleanFilename*(inPath {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBaseFilename*(inPath {.inject.}: FString; bRemovePath {.inject.}: bool): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc generatedConfigDir*(): FString {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc gameUserDeveloperDir*(): FString {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc gameSourceDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc gameDevelopersDir*(): FString {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc gameAgnosticSavedDir*(): FString {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc fileExists*(inPath {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc featurePackDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enterprisePluginsDir*(): FString {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc enterpriseFeaturePackDir*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc enterpriseDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc engineVersionAgnosticUserDir*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc engineUserDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc engineSourceDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc engineSavedDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enginePluginsDir*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc engineIntermediateDir*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc engineDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc engineContentDir*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc engineConfigDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc directoryExists*(inPath {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc diffDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createTempFilename*(path {.inject.}: FString; prefix {.inject.}: FString;
                         extension {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertToSandboxPath*(inPath {.inject.}: FString;
                           inSandboxName {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertRelativePathToFull*(inPath {.inject.}: FString;
                                inBasePath {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertFromSandboxPath*(inPath {.inject.}: FString;
                             inSandboxName {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc combine*(inPaths {.inject.}: var TArray[FString]): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc collapseRelativeDirectories*(inPath {.inject.}: FString;
                                  outPath {.inject.}: var FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc cloudDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc changeExtension*(inPath {.inject.}: FString;
                      inNewExtension {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc bugItDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc automationTransientDir*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc automationLogDir*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc automationDir*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc scheduleLocalNotificationFromNow*(inSecondsFromNow {.inject.}: int32;
                                       title {.inject.}: var FText;
                                       body {.inject.}: var FText;
                                       action {.inject.}: var FText;
                                       activationEvent {.inject.}: FString): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc scheduleLocalNotificationBadgeFromNow*(inSecondsFromNow {.inject.}: int32;
    activationEvent {.inject.}: FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc scheduleLocalNotificationBadgeAtTime*(
    fireDateTime {.inject.}: var FDateTime; localTime {.inject.}: bool;
    activationEvent {.inject.}: FString): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc scheduleLocalNotificationAtTime*(fireDateTime {.inject.}: var FDateTime;
                                      localTime {.inject.}: bool;
                                      title {.inject.}: var FText;
                                      body {.inject.}: var FText;
                                      action {.inject.}: var FText;
                                      activationEvent {.inject.}: FString): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLaunchNotification*(notificationLaunchedApp {.inject.}: var bool;
                            activationEvent {.inject.}: var FString;
                            fireDate {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDeviceOrientation*(): EScreenOrientation::Type {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc clearAllLocalNotifications*(): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc cancelLocalNotificationById*(notificationId {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc cancelLocalNotification*(activationEvent {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSetPropertyByName*(`object` {.inject.}: UObjectPtr;
                           propertyName {.inject.}: FName;
                           value {.inject.}: var TSet[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_Union*(a {.inject.}: var TSet[int32]; b {.inject.}: var TSet[int32];
                Result {.inject.}: var TSet[int32]): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc set_ToArray*(a {.inject.}: var TSet[int32];
                  Result {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_RemoveItems*(targetSet {.inject.}: var TSet[int32];
                      items {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_Remove*(targetSet {.inject.}: var TSet[int32];
                 item {.inject.}: var int32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc set_Length*(targetSet {.inject.}: var TSet[int32]): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_IsNotEmpty*(targetSet {.inject.}: var TSet[int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_IsEmpty*(targetSet {.inject.}: var TSet[int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_Intersection*(a {.inject.}: var TSet[int32];
                       b {.inject.}: var TSet[int32];
                       Result {.inject.}: var TSet[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_Difference*(a {.inject.}: var TSet[int32];
                     b {.inject.}: var TSet[int32];
                     Result {.inject.}: var TSet[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_Contains*(targetSet {.inject.}: var TSet[int32];
                   itemToFind {.inject.}: var int32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc set_Clear*(targetSet {.inject.}: var TSet[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_AddItems*(targetSet {.inject.}: var TSet[int32];
                   newItems {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc set_Add*(targetSet {.inject.}: var TSet[int32];
              newItem {.inject.}: var int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setTransformToBounds*(obj {.inject.}: UBoundsCopyComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRotation*(obj {.inject.}: UBoundsCopyComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shapeColor`*(obj {.inject.}: UShapeComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shapeColor=`*(obj {.inject.}: UShapeComponentPtr; val {.inject.}: FColor): void {.
    importcpp: "setshapeColor(@)", header: "UEGenBindings.h".}
proc `boxExtent`*(obj {.inject.}: UBoxComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `boxExtent=`*(obj {.inject.}: UBoxComponentPtr; val {.inject.}: FVector): void {.
    importcpp: "setboxExtent(@)", header: "UEGenBindings.h".}
proc `lineThickness`*(obj {.inject.}: UBoxComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lineThickness=`*(obj {.inject.}: UBoxComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setlineThickness(@)", header: "UEGenBindings.h".}
proc setBoxExtent*(obj {.inject.}: UBoxComponentPtr;
                   inBoxExtent {.inject.}: FVector;
                   bUpdateOverlaps {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getUnscaledBoxExtent*(obj {.inject.}: UBoxComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaledBoxExtent*(obj {.inject.}: UBoxComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureComponent`*(obj {.inject.}: AReflectionCapturePtr): TObjectPtr[
    UReflectionCaptureComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureComponent=`*(obj {.inject.}: AReflectionCapturePtr; val {.inject.}: TObjectPtr[
    UReflectionCaptureComponent]): void {.importcpp: "setcaptureComponent(@)",
    header: "UEGenBindings.h".}
proc `reflectionSourceType`*(obj {.inject.}: UReflectionCaptureComponentPtr): EReflectionSourceType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `reflectionSourceType=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
                              val {.inject.}: EReflectionSourceType): void {.
    importcpp: "setreflectionSourceType(@)", header: "UEGenBindings.h".}
proc `mobileReflectionCompression`*(obj {.inject.}: UReflectionCaptureComponentPtr): EMobileReflectionCompression {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mobileReflectionCompression=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
    val {.inject.}: EMobileReflectionCompression): void {.
    importcpp: "setmobileReflectionCompression(@)", header: "UEGenBindings.h".}
proc `cubemap`*(obj {.inject.}: UReflectionCaptureComponentPtr): TObjectPtr[
    UTextureCube] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cubemap=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
                 val {.inject.}: TObjectPtr[UTextureCube]): void {.
    importcpp: "setcubemap(@)", header: "UEGenBindings.h".}
proc `sourceCubemapAngle`*(obj {.inject.}: UReflectionCaptureComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceCubemapAngle=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setsourceCubemapAngle(@)", header: "UEGenBindings.h".}
proc `brightness`*(obj {.inject.}: UReflectionCaptureComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brightness=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setbrightness(@)", header: "UEGenBindings.h".}
proc `bModifyMaxValueRGBM`*(obj {.inject.}: UReflectionCaptureComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bModifyMaxValueRGBM=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
                             val {.inject.}: bool): void {.
    importcpp: "setbModifyMaxValueRGBM(@)", header: "UEGenBindings.h".}
proc `maxValueRGBM`*(obj {.inject.}: UReflectionCaptureComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxValueRGBM=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setmaxValueRGBM(@)", header: "UEGenBindings.h".}
proc `captureOffset`*(obj {.inject.}: UReflectionCaptureComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureOffset=`*(obj {.inject.}: UReflectionCaptureComponentPtr;
                       val {.inject.}: FVector): void {.
    importcpp: "setcaptureOffset(@)", header: "UEGenBindings.h".}
proc `boxTransitionDistance`*(obj {.inject.}: UBoxReflectionCaptureComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `boxTransitionDistance=`*(obj {.inject.}: UBoxReflectionCaptureComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setboxTransitionDistance(@)", header: "UEGenBindings.h".}
proc addTransformAttribute*(animSequenceBase {.inject.}: UAnimSequenceBasePtr;
                            attributeName {.inject.}: var FName;
                            boneName {.inject.}: var FName;
                            keys {.inject.}: var TArray[float];
                            values {.inject.}: var TArray[FTransform]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stateMachine_IsStateRelevant*(inAnimInstance {.inject.}: UAnimInstancePtr;
    cachedAnimStateData {.inject.}: var FCachedAnimStateData): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stateMachine_GetLocalWeight*(inAnimInstance {.inject.}: UAnimInstancePtr;
    cachedAnimStateData {.inject.}: var FCachedAnimStateData): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stateMachine_GetGlobalWeight*(inAnimInstance {.inject.}: UAnimInstancePtr;
    cachedAnimStateData {.inject.}: var FCachedAnimStateData): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playRate`*(obj {.inject.}: UCameraAnimInstPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playRate=`*(obj {.inject.}: UCameraAnimInstPtr; val {.inject.}: float32): void {.
    importcpp: "setplayRate(@)", header: "UEGenBindings.h".}
proc stop*(obj {.inject.}: UCameraAnimInstPtr; bImmediate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setScale*(obj {.inject.}: UCameraAnimInstPtr;
               newDuration {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setDuration*(obj {.inject.}: UCameraAnimInstPtr;
                  newDuration {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPrimaryParticleComponent*(obj {.inject.}: UCameraLensEffectInterfacePtr): UFXSystemComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getParticleComponents*(obj {.inject.}: UCameraLensEffectInterfacePtr): TArray[UFXSystemComponentPtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInterfaceClass*(class {.inject.}: TSubclassOf[AActor];
                        `var` {.inject.}: var FCameraLensInterfaceClassSupport;
                        Result {.inject.}: var EInterfaceValidResult): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isInterfaceValid*(cameraLens {.inject.}: var TScriptInterface[
    UCameraLensEffectInterface]; Result {.inject.}: var EInterfaceValidResult): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isInterfaceClassValid*(cameraLens {.inject.}: var FCameraLensInterfaceClassSupport;
                            Result {.inject.}: var EInterfaceValidResult): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInterfaceClass*(cameraLens {.inject.}: var FCameraLensInterfaceClassSupport): TSubclassOf[AActor]  {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bExclusive`*(obj {.inject.}: UCameraModifierPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bExclusive=`*(obj {.inject.}: UCameraModifierPtr; val {.inject.}: uint8): void {.
    importcpp: "setbExclusive(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: UCameraModifierPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: UCameraModifierPtr; val {.inject.}: uint8): void {.
    importcpp: "setpriority(@)", header: "UEGenBindings.h".}
proc `cameraOwner`*(obj {.inject.}: UCameraModifierPtr): TObjectPtr[
    APlayerCameraManager] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraOwner=`*(obj {.inject.}: UCameraModifierPtr;
                     val {.inject.}: TObjectPtr[APlayerCameraManager]): void {.
    importcpp: "setcameraOwner(@)", header: "UEGenBindings.h".}
proc `alphaInTime`*(obj {.inject.}: UCameraModifierPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `alphaInTime=`*(obj {.inject.}: UCameraModifierPtr; val {.inject.}: float32): void {.
    importcpp: "setalphaInTime(@)", header: "UEGenBindings.h".}
proc `alphaOutTime`*(obj {.inject.}: UCameraModifierPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `alphaOutTime=`*(obj {.inject.}: UCameraModifierPtr; val {.inject.}: float32): void {.
    importcpp: "setalphaOutTime(@)", header: "UEGenBindings.h".}
proc `alpha`*(obj {.inject.}: UCameraModifierPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `alpha=`*(obj {.inject.}: UCameraModifierPtr; val {.inject.}: float32): void {.
    importcpp: "setalpha(@)", header: "UEGenBindings.h".}
proc isDisabled*(obj {.inject.}: UCameraModifierPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getViewTarget*(obj {.inject.}: UCameraModifierPtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enableModifier*(obj {.inject.}: UCameraModifierPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc disableModifier*(obj {.inject.}: UCameraModifierPtr;
                      bImmediate {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `shakeScale`*(obj {.inject.}: UCameraShakeBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shakeScale=`*(obj {.inject.}: UCameraShakeBasePtr; val {.inject.}: float32): void {.
    importcpp: "setshakeScale(@)", header: "UEGenBindings.h".}
proc setRootShakePattern*(obj {.inject.}: UCameraShakeBasePtr;
                          inPattern {.inject.}: UCameraShakePatternPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRootShakePattern*(obj {.inject.}: UCameraShakeBasePtr): UCameraShakePatternPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuation`*(obj {.inject.}: UCameraShakeSourceComponentPtr): ECameraShakeAttenuation {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuation=`*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                     val {.inject.}: ECameraShakeAttenuation): void {.
    importcpp: "setattenuation(@)", header: "UEGenBindings.h".}
proc `innerAttenuationRadius`*(obj {.inject.}: UCameraShakeSourceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `innerAttenuationRadius=`*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setinnerAttenuationRadius(@)", header: "UEGenBindings.h".}
proc `outerAttenuationRadius`*(obj {.inject.}: UCameraShakeSourceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `outerAttenuationRadius=`*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setouterAttenuationRadius(@)", header: "UEGenBindings.h".}
proc `cameraShake`*(obj {.inject.}: UCameraShakeSourceComponentPtr): TSubclassOf[
    UCameraShakeBase] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraShake=`*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                     val {.inject.}: TSubclassOf[UCameraShakeBase]): void {.
    importcpp: "setcameraShake(@)", header: "UEGenBindings.h".}
proc `bAutoStart`*(obj {.inject.}: UCameraShakeSourceComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoStart=`*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                    val {.inject.}: bool): void {.importcpp: "setbAutoStart(@)",
    header: "UEGenBindings.h".}
proc stopAllCameraShakesOfType*(obj {.inject.}: UCameraShakeSourceComponentPtr;
    inCameraShake {.inject.}: TSubclassOf[UCameraShakeBase];
                                bImmediately {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopAllCameraShakes*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                          bImmediately {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startCameraShake*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                       inCameraShake {.inject.}: TSubclassOf[UCameraShakeBase];
                       scale {.inject.}: float32;
                       playSpace {.inject.}: ECameraShakePlaySpace;
                       userPlaySpaceRot {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc start*(obj {.inject.}: UCameraShakeSourceComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAttenuationFactor*(obj {.inject.}: UCameraShakeSourceComponentPtr;
                           location {.inject.}: var FVector): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isActive*(obj {.inject.}: UCancellableAsyncActionPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc textSize*(obj {.inject.}: UCanvasPtr; renderFont {.inject.}: UFontPtr;
               renderText {.inject.}: FString; scale {.inject.}: FVector2D): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc strLen*(obj {.inject.}: UCanvasPtr; renderFont {.inject.}: UFontPtr;
             renderText {.inject.}: FString): FVector2D {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc project*(obj {.inject.}: UCanvasPtr; worldLocation {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawTriangle*(obj {.inject.}: UCanvasPtr;
                   renderTexture {.inject.}: UTexturePtr;
                   triangles {.inject.}: TArray[FCanvasUVTri]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawTexture*(obj {.inject.}: UCanvasPtr;
                  renderTexture {.inject.}: UTexturePtr;
                  screenPosition {.inject.}: FVector2D;
                  screenSize {.inject.}: FVector2D;
                  coordinatePosition {.inject.}: FVector2D;
                  coordinateSize {.inject.}: FVector2D;
                  renderColor {.inject.}: FLinearColor;
                  blendMode {.inject.}: EBlendMode; rotation {.inject.}: float32;
                  pivotPoint {.inject.}: FVector2D): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawText*(obj {.inject.}: UCanvasPtr; renderFont {.inject.}: UFontPtr;
               renderText {.inject.}: FString;
               screenPosition {.inject.}: FVector2D; scale {.inject.}: FVector2D;
               renderColor {.inject.}: FLinearColor; kerning {.inject.}: float32;
               shadowColor {.inject.}: FLinearColor;
               shadowOffset {.inject.}: FVector2D; bCentreX {.inject.}: bool;
               bCentreY {.inject.}: bool; bOutlined {.inject.}: bool;
               outlineColor {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawPolygon*(obj {.inject.}: UCanvasPtr;
                  renderTexture {.inject.}: UTexturePtr;
                  screenPosition {.inject.}: FVector2D;
                  radius {.inject.}: FVector2D; numberOfSides {.inject.}: int32;
                  renderColor {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawMaterialTriangle*(obj {.inject.}: UCanvasPtr;
                           renderMaterial {.inject.}: UMaterialInterfacePtr;
                           triangles {.inject.}: TArray[FCanvasUVTri]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawMaterial*(obj {.inject.}: UCanvasPtr;
                   renderMaterial {.inject.}: UMaterialInterfacePtr;
                   screenPosition {.inject.}: FVector2D;
                   screenSize {.inject.}: FVector2D;
                   coordinatePosition {.inject.}: FVector2D;
                   coordinateSize {.inject.}: FVector2D;
                   rotation {.inject.}: float32; pivotPoint {.inject.}: FVector2D): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawLine*(obj {.inject.}: UCanvasPtr; screenPositionA {.inject.}: FVector2D;
               screenPositionB {.inject.}: FVector2D;
               thickness {.inject.}: float32;
               renderColor {.inject.}: FLinearColor): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawBox*(obj {.inject.}: UCanvasPtr; screenPosition {.inject.}: FVector2D;
              screenSize {.inject.}: FVector2D; thickness {.inject.}: float32;
              renderColor {.inject.}: FLinearColor): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawBorder*(obj {.inject.}: UCanvasPtr;
                 borderTexture {.inject.}: UTexturePtr;
                 backgroundTexture {.inject.}: UTexturePtr;
                 leftBorderTexture {.inject.}: UTexturePtr;
                 rightBorderTexture {.inject.}: UTexturePtr;
                 topBorderTexture {.inject.}: UTexturePtr;
                 bottomBorderTexture {.inject.}: UTexturePtr;
                 screenPosition {.inject.}: FVector2D;
                 screenSize {.inject.}: FVector2D;
                 coordinatePosition {.inject.}: FVector2D;
                 coordinateSize {.inject.}: FVector2D;
                 renderColor {.inject.}: FLinearColor;
                 borderScale {.inject.}: FVector2D;
                 backgroundScale {.inject.}: FVector2D;
                 rotation {.inject.}: float32; pivotPoint {.inject.}: FVector2D;
                 cornerSize {.inject.}: FVector2D): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc deproject*(obj {.inject.}: UCanvasPtr; screenPosition {.inject.}: FVector2D;
                worldOrigin {.inject.}: var FVector;
                worldDirection {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetGamma`*(obj {.inject.}: UTextureRenderTargetPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetGamma=`*(obj {.inject.}: UTextureRenderTargetPtr;
                     val {.inject.}: float32): void {.
    importcpp: "settargetGamma(@)", header: "UEGenBindings.h".}
proc `sizeX`*(obj {.inject.}: UTextureRenderTarget2DPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeX=`*(obj {.inject.}: UTextureRenderTarget2DPtr; val {.inject.}: int32): void {.
    importcpp: "setsizeX(@)", header: "UEGenBindings.h".}
proc `sizeY`*(obj {.inject.}: UTextureRenderTarget2DPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeY=`*(obj {.inject.}: UTextureRenderTarget2DPtr; val {.inject.}: int32): void {.
    importcpp: "setsizeY(@)", header: "UEGenBindings.h".}
proc `clearColor`*(obj {.inject.}: UTextureRenderTarget2DPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `clearColor=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                    val {.inject.}: FLinearColor): void {.
    importcpp: "setclearColor(@)", header: "UEGenBindings.h".}
proc `addressX`*(obj {.inject.}: UTextureRenderTarget2DPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `addressX=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                  val {.inject.}: TextureAddress): void {.
    importcpp: "setaddressX(@)", header: "UEGenBindings.h".}
proc `addressY`*(obj {.inject.}: UTextureRenderTarget2DPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `addressY=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                  val {.inject.}: TextureAddress): void {.
    importcpp: "setaddressY(@)", header: "UEGenBindings.h".}
proc `bGPUSharedFlag`*(obj {.inject.}: UTextureRenderTarget2DPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bGPUSharedFlag=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbGPUSharedFlag(@)", header: "UEGenBindings.h".}
proc `renderTargetFormat`*(obj {.inject.}: UTextureRenderTarget2DPtr): ETextureRenderTargetFormat {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `renderTargetFormat=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                            val {.inject.}: ETextureRenderTargetFormat): void {.
    importcpp: "setrenderTargetFormat(@)", header: "UEGenBindings.h".}
proc `bAutoGenerateMips`*(obj {.inject.}: UTextureRenderTarget2DPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoGenerateMips=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbAutoGenerateMips(@)", header: "UEGenBindings.h".}
proc `mipsSamplerFilter`*(obj {.inject.}: UTextureRenderTarget2DPtr): TextureFilter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mipsSamplerFilter=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                           val {.inject.}: TextureFilter): void {.
    importcpp: "setmipsSamplerFilter(@)", header: "UEGenBindings.h".}
proc `mipsAddressU`*(obj {.inject.}: UTextureRenderTarget2DPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mipsAddressU=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                      val {.inject.}: TextureAddress): void {.
    importcpp: "setmipsAddressU(@)", header: "UEGenBindings.h".}
proc `mipsAddressV`*(obj {.inject.}: UTextureRenderTarget2DPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mipsAddressV=`*(obj {.inject.}: UTextureRenderTarget2DPtr;
                      val {.inject.}: TextureAddress): void {.
    importcpp: "setmipsAddressV(@)", header: "UEGenBindings.h".}
proc updateResource*(obj {.inject.}: UCanvasRenderTarget2DPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSize*(obj {.inject.}: UCanvasRenderTarget2DPtr;
              width {.inject.}: var int32; height {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createCanvasRenderTarget2D*(worldContextObject {.inject.}: UObjectPtr;
    canvasRenderTarget2DClass {.inject.}: TSubclassOf[UCanvasRenderTarget2D];
                                 width {.inject.}: int32;
                                 height {.inject.}: int32): UCanvasRenderTarget2DPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `capsuleHalfHeight`*(obj {.inject.}: UCapsuleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `capsuleHalfHeight=`*(obj {.inject.}: UCapsuleComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setcapsuleHalfHeight(@)", header: "UEGenBindings.h".}
proc `capsuleRadius`*(obj {.inject.}: UCapsuleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `capsuleRadius=`*(obj {.inject.}: UCapsuleComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setcapsuleRadius(@)", header: "UEGenBindings.h".}
proc setCapsuleSize*(obj {.inject.}: UCapsuleComponentPtr;
                     inRadius {.inject.}: float32;
                     inHalfHeight {.inject.}: float32;
                     bUpdateOverlaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCapsuleRadius*(obj {.inject.}: UCapsuleComponentPtr;
                       radius {.inject.}: float32;
                       bUpdateOverlaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCapsuleHalfHeight*(obj {.inject.}: UCapsuleComponentPtr;
                           halfHeight {.inject.}: float32;
                           bUpdateOverlaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnscaledCapsuleSize_WithoutHemisphere*(
    obj {.inject.}: UCapsuleComponentPtr; outRadius {.inject.}: var float32;
    outHalfHeightWithoutHemisphere {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnscaledCapsuleSize*(obj {.inject.}: UCapsuleComponentPtr;
                             outRadius {.inject.}: var float32;
                             outHalfHeight {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnscaledCapsuleRadius*(obj {.inject.}: UCapsuleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnscaledCapsuleHalfHeight_WithoutHemisphere*(
    obj {.inject.}: UCapsuleComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getUnscaledCapsuleHalfHeight*(obj {.inject.}: UCapsuleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getShapeScale*(obj {.inject.}: UCapsuleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaledCapsuleSize_WithoutHemisphere*(
    obj {.inject.}: UCapsuleComponentPtr; outRadius {.inject.}: var float32;
    outHalfHeightWithoutHemisphere {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaledCapsuleSize*(obj {.inject.}: UCapsuleComponentPtr;
                           outRadius {.inject.}: var float32;
                           outHalfHeight {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaledCapsuleRadius*(obj {.inject.}: UCapsuleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaledCapsuleHalfHeight_WithoutHemisphere*(
    obj {.inject.}: UCapsuleComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getScaledCapsuleHalfHeight*(obj {.inject.}: UCapsuleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `updatedComponent`*(obj {.inject.}: UMovementComponentPtr): TObjectPtr[
    USceneComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `updatedComponent=`*(obj {.inject.}: UMovementComponentPtr;
                          val {.inject.}: TObjectPtr[USceneComponent]): void {.
    importcpp: "setupdatedComponent(@)", header: "UEGenBindings.h".}
proc `updatedPrimitive`*(obj {.inject.}: UMovementComponentPtr): TObjectPtr[
    UPrimitiveComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `updatedPrimitive=`*(obj {.inject.}: UMovementComponentPtr;
                          val {.inject.}: TObjectPtr[UPrimitiveComponent]): void {.
    importcpp: "setupdatedPrimitive(@)", header: "UEGenBindings.h".}
proc `velocity`*(obj {.inject.}: UMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `velocity=`*(obj {.inject.}: UMovementComponentPtr; val {.inject.}: FVector): void {.
    importcpp: "setvelocity(@)", header: "UEGenBindings.h".}
proc `planeConstraintNormal`*(obj {.inject.}: UMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `planeConstraintNormal=`*(obj {.inject.}: UMovementComponentPtr;
                               val {.inject.}: FVector): void {.
    importcpp: "setplaneConstraintNormal(@)", header: "UEGenBindings.h".}
proc `planeConstraintOrigin`*(obj {.inject.}: UMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `planeConstraintOrigin=`*(obj {.inject.}: UMovementComponentPtr;
                               val {.inject.}: FVector): void {.
    importcpp: "setplaneConstraintOrigin(@)", header: "UEGenBindings.h".}
proc `bUpdateOnlyIfRendered`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUpdateOnlyIfRendered=`*(obj {.inject.}: UMovementComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbUpdateOnlyIfRendered(@)", header: "UEGenBindings.h".}
proc `bAutoUpdateTickRegistration`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoUpdateTickRegistration=`*(obj {.inject.}: UMovementComponentPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbAutoUpdateTickRegistration(@)", header: "UEGenBindings.h".}
proc `bTickBeforeOwner`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bTickBeforeOwner=`*(obj {.inject.}: UMovementComponentPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbTickBeforeOwner(@)", header: "UEGenBindings.h".}
proc `bAutoRegisterUpdatedComponent`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoRegisterUpdatedComponent=`*(obj {.inject.}: UMovementComponentPtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbAutoRegisterUpdatedComponent(@)", header: "UEGenBindings.h".}
proc `bConstrainToPlane`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bConstrainToPlane=`*(obj {.inject.}: UMovementComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbConstrainToPlane(@)", header: "UEGenBindings.h".}
proc `bSnapToPlaneAtStart`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSnapToPlaneAtStart=`*(obj {.inject.}: UMovementComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbSnapToPlaneAtStart(@)", header: "UEGenBindings.h".}
proc `bAutoRegisterPhysicsVolumeUpdates`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoRegisterPhysicsVolumeUpdates=`*(obj {.inject.}: UMovementComponentPtr;
    val {.inject.}: uint8): void {.importcpp: "setbAutoRegisterPhysicsVolumeUpdates(@)",
                                   header: "UEGenBindings.h".}
proc `bComponentShouldUpdatePhysicsVolume`*(obj {.inject.}: UMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bComponentShouldUpdatePhysicsVolume=`*(
    obj {.inject.}: UMovementComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbComponentShouldUpdatePhysicsVolume(@)",
    header: "UEGenBindings.h".}
proc stopMovementImmediately*(obj {.inject.}: UMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc snapUpdatedComponentToPlane*(obj {.inject.}: UMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUpdatedComponent*(obj {.inject.}: UMovementComponentPtr;
                          newUpdatedComponent {.inject.}: USceneComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlaneConstraintOrigin*(obj {.inject.}: UMovementComponentPtr;
                               planeOrigin {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlaneConstraintNormal*(obj {.inject.}: UMovementComponentPtr;
                               planeNormal {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlaneConstraintFromVectors*(obj {.inject.}: UMovementComponentPtr;
                                    forward {.inject.}: FVector;
                                    up {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlaneConstraintEnabled*(obj {.inject.}: UMovementComponentPtr;
                                bEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlaneConstraintAxisSetting*(obj {.inject.}: UMovementComponentPtr;
    newAxisSetting {.inject.}: EPlaneConstraintAxisSetting): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc moveUpdatedComponent*(obj {.inject.}: UMovementComponentPtr;
                           delta {.inject.}: FVector;
                           newRotation {.inject.}: FRotator;
                           outHit {.inject.}: var FHitResult;
                           bSweep {.inject.}: bool; bTeleport {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isExceedingMaxSpeed*(obj {.inject.}: UMovementComponentPtr;
                          maxSpeed {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlaneConstraintOrigin*(obj {.inject.}: UMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlaneConstraintNormal*(obj {.inject.}: UMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlaneConstraintAxisSetting*(obj {.inject.}: UMovementComponentPtr): EPlaneConstraintAxisSetting {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicsVolume*(obj {.inject.}: UMovementComponentPtr): APhysicsVolumePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaxSpeed*(obj {.inject.}: UMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGravityZ*(obj {.inject.}: UMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc constrainNormalToPlane*(obj {.inject.}: UMovementComponentPtr;
                             normal {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc constrainLocationToPlane*(obj {.inject.}: UMovementComponentPtr;
                               location {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc constrainDirectionToPlane*(obj {.inject.}: UMovementComponentPtr;
                                direction {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `navAgentProps`*(obj {.inject.}: UNavMovementComponentPtr): FNavAgentProperties {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `navAgentProps=`*(obj {.inject.}: UNavMovementComponentPtr;
                       val {.inject.}: FNavAgentProperties): void {.
    importcpp: "setnavAgentProps(@)", header: "UEGenBindings.h".}
proc stopMovementKeepPathing*(obj {.inject.}: UNavMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopActiveMovement*(obj {.inject.}: UNavMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isSwimming*(obj {.inject.}: UNavMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isMovingOnGround*(obj {.inject.}: UNavMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isFlying*(obj {.inject.}: UNavMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isFalling*(obj {.inject.}: UNavMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isCrouching*(obj {.inject.}: UNavMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isMoveInputIgnored*(obj {.inject.}: UPawnMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPendingInputVector*(obj {.inject.}: UPawnMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPawnOwner*(obj {.inject.}: UPawnMovementComponentPtr): APawnPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLastInputVector*(obj {.inject.}: UPawnMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc consumeInputVector*(obj {.inject.}: UPawnMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addInputVector*(obj {.inject.}: UPawnMovementComponentPtr;
                     worldVector {.inject.}: FVector; bForce {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `gravityScale`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `gravityScale=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setgravityScale(@)", header: "UEGenBindings.h".}
proc `maxStepHeight`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxStepHeight=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setmaxStepHeight(@)", header: "UEGenBindings.h".}
proc `jumpZVelocity`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpZVelocity=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setjumpZVelocity(@)", header: "UEGenBindings.h".}
proc `jumpOffJumpZFactor`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpOffJumpZFactor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setjumpOffJumpZFactor(@)", header: "UEGenBindings.h".}
proc `movementMode`*(obj {.inject.}: UCharacterMovementComponentPtr): EMovementMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `movementMode=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                      val {.inject.}: EMovementMode): void {.
    importcpp: "setmovementMode(@)", header: "UEGenBindings.h".}
proc `customMovementMode`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customMovementMode=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setcustomMovementMode(@)", header: "UEGenBindings.h".}
proc `networkSmoothingMode`*(obj {.inject.}: UCharacterMovementComponentPtr): ENetworkSmoothingMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `networkSmoothingMode=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                              val {.inject.}: ENetworkSmoothingMode): void {.
    importcpp: "setnetworkSmoothingMode(@)", header: "UEGenBindings.h".}
proc `groundFriction`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `groundFriction=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setgroundFriction(@)", header: "UEGenBindings.h".}
proc `maxWalkSpeed`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxWalkSpeed=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setmaxWalkSpeed(@)", header: "UEGenBindings.h".}
proc `maxWalkSpeedCrouched`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxWalkSpeedCrouched=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setmaxWalkSpeedCrouched(@)", header: "UEGenBindings.h".}
proc `maxSwimSpeed`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSwimSpeed=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setmaxSwimSpeed(@)", header: "UEGenBindings.h".}
proc `maxFlySpeed`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxFlySpeed=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setmaxFlySpeed(@)", header: "UEGenBindings.h".}
proc `maxCustomMovementSpeed`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxCustomMovementSpeed=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setmaxCustomMovementSpeed(@)", header: "UEGenBindings.h".}
proc `maxAcceleration`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxAcceleration=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setmaxAcceleration(@)", header: "UEGenBindings.h".}
proc `minAnalogWalkSpeed`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minAnalogWalkSpeed=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setminAnalogWalkSpeed(@)", header: "UEGenBindings.h".}
proc `brakingFrictionFactor`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brakingFrictionFactor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setbrakingFrictionFactor(@)", header: "UEGenBindings.h".}
proc `brakingFriction`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brakingFriction=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setbrakingFriction(@)", header: "UEGenBindings.h".}
proc `brakingSubStepTime`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brakingSubStepTime=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setbrakingSubStepTime(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationWalking`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationWalking=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                    val {.inject.}: float32): void {.
    importcpp: "setbrakingDecelerationWalking(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationFalling`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationFalling=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                    val {.inject.}: float32): void {.
    importcpp: "setbrakingDecelerationFalling(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationSwimming`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationSwimming=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setbrakingDecelerationSwimming(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationFlying`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `brakingDecelerationFlying=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setbrakingDecelerationFlying(@)", header: "UEGenBindings.h".}
proc `airControl`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `airControl=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setairControl(@)", header: "UEGenBindings.h".}
proc `airControlBoostMultiplier`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `airControlBoostMultiplier=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setairControlBoostMultiplier(@)", header: "UEGenBindings.h".}
proc `airControlBoostVelocityThreshold`*(
    obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `airControlBoostVelocityThreshold=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setairControlBoostVelocityThreshold(@)",
    header: "UEGenBindings.h".}
proc `fallingLateralFriction`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fallingLateralFriction=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setfallingLateralFriction(@)", header: "UEGenBindings.h".}
proc `crouchedHalfHeight`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `crouchedHalfHeight=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setcrouchedHalfHeight(@)", header: "UEGenBindings.h".}
proc `buoyancy`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `buoyancy=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                  val {.inject.}: float32): void {.importcpp: "setbuoyancy(@)",
    header: "UEGenBindings.h".}
proc `perchRadiusThreshold`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `perchRadiusThreshold=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setperchRadiusThreshold(@)", header: "UEGenBindings.h".}
proc `perchAdditionalHeight`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `perchAdditionalHeight=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setperchAdditionalHeight(@)", header: "UEGenBindings.h".}
proc `rotationRate`*(obj {.inject.}: UCharacterMovementComponentPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rotationRate=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                      val {.inject.}: FRotator): void {.
    importcpp: "setrotationRate(@)", header: "UEGenBindings.h".}
proc `bUseSeparateBrakingFriction`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseSeparateBrakingFriction=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbUseSeparateBrakingFriction(@)", header: "UEGenBindings.h".}
proc `bApplyGravityWhileJumping`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bApplyGravityWhileJumping=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbApplyGravityWhileJumping(@)", header: "UEGenBindings.h".}
proc `bUseControllerDesiredRotation`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseControllerDesiredRotation=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbUseControllerDesiredRotation(@)", header: "UEGenBindings.h".}
proc `bOrientRotationToMovement`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOrientRotationToMovement=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbOrientRotationToMovement(@)", header: "UEGenBindings.h".}
proc `bSweepWhileNavWalking`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSweepWhileNavWalking=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbSweepWhileNavWalking(@)", header: "UEGenBindings.h".}
proc `bRunPhysicsWithNoController`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRunPhysicsWithNoController=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbRunPhysicsWithNoController(@)", header: "UEGenBindings.h".}
proc `bForceNextFloorCheck`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceNextFloorCheck=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbForceNextFloorCheck(@)", header: "UEGenBindings.h".}
proc `bCanWalkOffLedges`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCanWalkOffLedges=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbCanWalkOffLedges(@)", header: "UEGenBindings.h".}
proc `bCanWalkOffLedgesWhenCrouching`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCanWalkOffLedgesWhenCrouching=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbCanWalkOffLedgesWhenCrouching(@)", header: "UEGenBindings.h".}
proc `bEnablePhysicsInteraction`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnablePhysicsInteraction=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbEnablePhysicsInteraction(@)", header: "UEGenBindings.h".}
proc `bTouchForceScaledToMass`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bTouchForceScaledToMass=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbTouchForceScaledToMass(@)", header: "UEGenBindings.h".}
proc `bPushForceScaledToMass`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPushForceScaledToMass=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbPushForceScaledToMass(@)", header: "UEGenBindings.h".}
proc `bPushForceUsingZOffset`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPushForceUsingZOffset=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbPushForceUsingZOffset(@)", header: "UEGenBindings.h".}
proc `bScalePushForceToVelocity`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bScalePushForceToVelocity=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbScalePushForceToVelocity(@)", header: "UEGenBindings.h".}
proc `maxOutOfWaterStepHeight`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxOutOfWaterStepHeight=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                 val {.inject.}: float32): void {.
    importcpp: "setmaxOutOfWaterStepHeight(@)", header: "UEGenBindings.h".}
proc `outofWaterZ`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `outofWaterZ=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setoutofWaterZ(@)", header: "UEGenBindings.h".}
proc `mass`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `mass=`*(obj {.inject.}: UCharacterMovementComponentPtr;
              val {.inject.}: float32): void {.importcpp: "setmass(@)",
    header: "UEGenBindings.h".}
proc `standingDownwardForceScale`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `standingDownwardForceScale=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                    val {.inject.}: float32): void {.
    importcpp: "setstandingDownwardForceScale(@)", header: "UEGenBindings.h".}
proc `initialPushForceFactor`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `initialPushForceFactor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setinitialPushForceFactor(@)", header: "UEGenBindings.h".}
proc `pushForceFactor`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pushForceFactor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setpushForceFactor(@)", header: "UEGenBindings.h".}
proc `pushForcePointZOffsetFactor`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pushForcePointZOffsetFactor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setpushForcePointZOffsetFactor(@)", header: "UEGenBindings.h".}
proc `touchForceFactor`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `touchForceFactor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "settouchForceFactor(@)", header: "UEGenBindings.h".}
proc `minTouchForce`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minTouchForce=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setminTouchForce(@)", header: "UEGenBindings.h".}
proc `maxTouchForce`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxTouchForce=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setmaxTouchForce(@)", header: "UEGenBindings.h".}
proc `repulsionForce`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `repulsionForce=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setrepulsionForce(@)", header: "UEGenBindings.h".}
proc `maxSimulationTimeStep`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSimulationTimeStep=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setmaxSimulationTimeStep(@)", header: "UEGenBindings.h".}
proc `maxSimulationIterations`*(obj {.inject.}: UCharacterMovementComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSimulationIterations=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setmaxSimulationIterations(@)", header: "UEGenBindings.h".}
proc `maxJumpApexAttemptsPerSimulation`*(
    obj {.inject.}: UCharacterMovementComponentPtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `maxJumpApexAttemptsPerSimulation=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: int32): void {.
    importcpp: "setmaxJumpApexAttemptsPerSimulation(@)",
    header: "UEGenBindings.h".}
proc `maxDepenetrationWithGeometry`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxDepenetrationWithGeometry=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setmaxDepenetrationWithGeometry(@)", header: "UEGenBindings.h".}
proc `maxDepenetrationWithGeometryAsProxy`*(
    obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxDepenetrationWithGeometryAsProxy=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setmaxDepenetrationWithGeometryAsProxy(@)",
    header: "UEGenBindings.h".}
proc `maxDepenetrationWithPawn`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxDepenetrationWithPawn=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                  val {.inject.}: float32): void {.
    importcpp: "setmaxDepenetrationWithPawn(@)", header: "UEGenBindings.h".}
proc `maxDepenetrationWithPawnAsProxy`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxDepenetrationWithPawnAsProxy=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setmaxDepenetrationWithPawnAsProxy(@)",
    header: "UEGenBindings.h".}
proc `ledgeCheckThreshold`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `ledgeCheckThreshold=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setledgeCheckThreshold(@)", header: "UEGenBindings.h".}
proc `jumpOutOfWaterPitch`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `jumpOutOfWaterPitch=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setjumpOutOfWaterPitch(@)", header: "UEGenBindings.h".}
proc `currentFloor`*(obj {.inject.}: UCharacterMovementComponentPtr): FFindFloorResult {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `currentFloor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                      val {.inject.}: FFindFloorResult): void {.
    importcpp: "setcurrentFloor(@)", header: "UEGenBindings.h".}
proc `defaultLandMovementMode`*(obj {.inject.}: UCharacterMovementComponentPtr): EMovementMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultLandMovementMode=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                 val {.inject.}: EMovementMode): void {.
    importcpp: "setdefaultLandMovementMode(@)", header: "UEGenBindings.h".}
proc `defaultWaterMovementMode`*(obj {.inject.}: UCharacterMovementComponentPtr): EMovementMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultWaterMovementMode=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                  val {.inject.}: EMovementMode): void {.
    importcpp: "setdefaultWaterMovementMode(@)", header: "UEGenBindings.h".}
proc `bMaintainHorizontalGroundVelocity`*(
    obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bMaintainHorizontalGroundVelocity=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbMaintainHorizontalGroundVelocity(@)",
    header: "UEGenBindings.h".}
proc `bImpartBaseVelocityX`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bImpartBaseVelocityX=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbImpartBaseVelocityX(@)", header: "UEGenBindings.h".}
proc `bImpartBaseVelocityY`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bImpartBaseVelocityY=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbImpartBaseVelocityY(@)", header: "UEGenBindings.h".}
proc `bImpartBaseVelocityZ`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bImpartBaseVelocityZ=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbImpartBaseVelocityZ(@)", header: "UEGenBindings.h".}
proc `bImpartBaseAngularVelocity`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bImpartBaseAngularVelocity=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbImpartBaseAngularVelocity(@)", header: "UEGenBindings.h".}
proc `bJustTeleported`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bJustTeleported=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbJustTeleported(@)", header: "UEGenBindings.h".}
proc `bIgnoreClientMovementErrorChecksAndCorrection`*(
    obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bIgnoreClientMovementErrorChecksAndCorrection=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreClientMovementErrorChecksAndCorrection(@)",
    header: "UEGenBindings.h".}
proc `bServerAcceptClientAuthoritativePosition`*(
    obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bServerAcceptClientAuthoritativePosition=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbServerAcceptClientAuthoritativePosition(@)",
    header: "UEGenBindings.h".}
proc `bNotifyApex`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bNotifyApex=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                     val {.inject.}: uint8): void {.
    importcpp: "setbNotifyApex(@)", header: "UEGenBindings.h".}
proc `bWantsToCrouch`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bWantsToCrouch=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbWantsToCrouch(@)", header: "UEGenBindings.h".}
proc `bCrouchMaintainsBaseLocation`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCrouchMaintainsBaseLocation=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbCrouchMaintainsBaseLocation(@)", header: "UEGenBindings.h".}
proc `bIgnoreBaseRotation`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIgnoreBaseRotation=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreBaseRotation(@)", header: "UEGenBindings.h".}
proc `bAlwaysCheckFloor`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAlwaysCheckFloor=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbAlwaysCheckFloor(@)", header: "UEGenBindings.h".}
proc `bUseFlatBaseForFloorChecks`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseFlatBaseForFloorChecks=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbUseFlatBaseForFloorChecks(@)", header: "UEGenBindings.h".}
proc `bUseRVOAvoidance`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseRVOAvoidance=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbUseRVOAvoidance(@)", header: "UEGenBindings.h".}
proc `bRequestedMoveUseAcceleration`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRequestedMoveUseAcceleration=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                       val {.inject.}: uint8): void {.
    importcpp: "setbRequestedMoveUseAcceleration(@)", header: "UEGenBindings.h".}
proc `bAllowPhysicsRotationDuringAnimRootMotion`*(
    obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bAllowPhysicsRotationDuringAnimRootMotion=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbAllowPhysicsRotationDuringAnimRootMotion(@)",
    header: "UEGenBindings.h".}
proc `formerBaseVelocityDecayHalfLife`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `formerBaseVelocityDecayHalfLife=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setformerBaseVelocityDecayHalfLife(@)",
    header: "UEGenBindings.h".}
proc `bProjectNavMeshWalking`*(obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bProjectNavMeshWalking=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbProjectNavMeshWalking(@)", header: "UEGenBindings.h".}
proc `bProjectNavMeshOnBothWorldChannels`*(
    obj {.inject.}: UCharacterMovementComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bProjectNavMeshOnBothWorldChannels=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbProjectNavMeshOnBothWorldChannels(@)",
    header: "UEGenBindings.h".}
proc `avoidanceConsiderationRadius`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `avoidanceConsiderationRadius=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setavoidanceConsiderationRadius(@)", header: "UEGenBindings.h".}
proc `avoidanceUID`*(obj {.inject.}: UCharacterMovementComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `avoidanceUID=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                      val {.inject.}: int32): void {.
    importcpp: "setavoidanceUID(@)", header: "UEGenBindings.h".}
proc `avoidanceGroup`*(obj {.inject.}: UCharacterMovementComponentPtr): FNavAvoidanceMask {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `avoidanceGroup=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                        val {.inject.}: FNavAvoidanceMask): void {.
    importcpp: "setavoidanceGroup(@)", header: "UEGenBindings.h".}
proc `groupsToAvoid`*(obj {.inject.}: UCharacterMovementComponentPtr): FNavAvoidanceMask {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `groupsToAvoid=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                       val {.inject.}: FNavAvoidanceMask): void {.
    importcpp: "setgroupsToAvoid(@)", header: "UEGenBindings.h".}
proc `groupsToIgnore`*(obj {.inject.}: UCharacterMovementComponentPtr): FNavAvoidanceMask {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `groupsToIgnore=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                        val {.inject.}: FNavAvoidanceMask): void {.
    importcpp: "setgroupsToIgnore(@)", header: "UEGenBindings.h".}
proc `avoidanceWeight`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `avoidanceWeight=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setavoidanceWeight(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionInterval`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionInterval=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setnavMeshProjectionInterval(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionInterpSpeed`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionInterpSpeed=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setnavMeshProjectionInterpSpeed(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionHeightScaleUp`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionHeightScaleUp=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                        val {.inject.}: float32): void {.
    importcpp: "setnavMeshProjectionHeightScaleUp(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionHeightScaleDown`*(
    obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `navMeshProjectionHeightScaleDown=`*(
    obj {.inject.}: UCharacterMovementComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setnavMeshProjectionHeightScaleDown(@)",
    header: "UEGenBindings.h".}
proc `navWalkingFloorDistTolerance`*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `navWalkingFloorDistTolerance=`*(obj {.inject.}: UCharacterMovementComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setnavWalkingFloorDistTolerance(@)", header: "UEGenBindings.h".}
proc setWalkableFloorZ*(obj {.inject.}: UCharacterMovementComponentPtr;
                        inWalkableFloorZ {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWalkableFloorAngle*(obj {.inject.}: UCharacterMovementComponentPtr;
                            inWalkableFloorAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMovementMode*(obj {.inject.}: UCharacterMovementComponentPtr;
                      newMovementMode {.inject.}: EMovementMode;
                      newCustomMode {.inject.}: uint8): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGroupsToIgnoreMask*(obj {.inject.}: UCharacterMovementComponentPtr;
                            groupMask {.inject.}: var FNavAvoidanceMask): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGroupsToIgnore*(obj {.inject.}: UCharacterMovementComponentPtr;
                        groupFlags {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGroupsToAvoidMask*(obj {.inject.}: UCharacterMovementComponentPtr;
                           groupMask {.inject.}: var FNavAvoidanceMask): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGroupsToAvoid*(obj {.inject.}: UCharacterMovementComponentPtr;
                       groupFlags {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCrouchedHalfHeight*(obj {.inject.}: UCharacterMovementComponentPtr;
                            newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAvoidanceGroupMask*(obj {.inject.}: UCharacterMovementComponentPtr;
                            groupMask {.inject.}: var FNavAvoidanceMask): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAvoidanceGroup*(obj {.inject.}: UCharacterMovementComponentPtr;
                        groupFlags {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAvoidanceEnabled*(obj {.inject.}: UCharacterMovementComponentPtr;
                          bEnable {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getWalkableFloorZ*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWalkableFloorAngle*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findFloor*(obj {.inject.}: UCharacterMovementComponentPtr;
                capsuleLocation {.inject.}: FVector;
                floorResult {.inject.}: var FFindFloorResult): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc computeFloorDist*(obj {.inject.}: UCharacterMovementComponentPtr;
                       capsuleLocation {.inject.}: FVector;
                       lineDistance {.inject.}: float32;
                       sweepDistance {.inject.}: float32;
                       sweepRadius {.inject.}: float32;
                       floorResult {.inject.}: var FFindFloorResult): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isWalking*(obj {.inject.}: UCharacterMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isWalkable*(obj {.inject.}: UCharacterMovementComponentPtr;
                 hit {.inject.}: var FHitResult): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getValidPerchRadius*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPerchRadiusThreshold*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMovementBase*(obj {.inject.}: UCharacterMovementComponentPtr): UPrimitiveComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMinAnalogSpeed*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaxJumpHeightWithJumpTime*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaxJumpHeight*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaxBrakingDeceleration*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaxAcceleration*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLastUpdateVelocity*(obj {.inject.}: UCharacterMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLastUpdateRotation*(obj {.inject.}: UCharacterMovementComponentPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLastUpdateLocation*(obj {.inject.}: UCharacterMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getImpartedMovementBaseVelocity*(obj {.inject.}: UCharacterMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentAcceleration*(obj {.inject.}: UCharacterMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCrouchedHalfHeight*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCharacterOwner*(obj {.inject.}: UCharacterMovementComponentPtr): ACharacterPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAnalogInputModifier*(obj {.inject.}: UCharacterMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc disableMovement*(obj {.inject.}: UCharacterMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearAccumulatedForces*(obj {.inject.}: UCharacterMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc calcVelocity*(obj {.inject.}: UCharacterMovementComponentPtr;
                   deltaTime {.inject.}: float32; friction {.inject.}: float32;
                   bFluid {.inject.}: bool;
                   brakingDeceleration {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addImpulse*(obj {.inject.}: UCharacterMovementComponentPtr;
                 impulse {.inject.}: FVector; bVelocityChange {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addForce*(obj {.inject.}: UCharacterMovementComponentPtr;
               force {.inject.}: FVector): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `debugCameraControllerClass`*(obj {.inject.}: UCheatManagerPtr): TSubclassOf[
    ADebugCameraController] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `debugCameraControllerClass=`*(obj {.inject.}: UCheatManagerPtr;
    val {.inject.}: TSubclassOf[ADebugCameraController]): void {.
    importcpp: "setdebugCameraControllerClass(@)", header: "UEGenBindings.h".}
proc walk*(obj {.inject.}: UCheatManagerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc teleport*(obj {.inject.}: UCheatManagerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc slomo*(obj {.inject.}: UCheatManagerPtr; newTimeDilation {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playersOnly*(obj {.inject.}: UCheatManagerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc god*(obj {.inject.}: UCheatManagerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc ghost*(obj {.inject.}: UCheatManagerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPlayerController*(obj {.inject.}: UCheatManagerPtr): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc freezeFrame*(obj {.inject.}: UCheatManagerPtr; delay {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fly*(obj {.inject.}: UCheatManagerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc enableDebugCamera*(obj {.inject.}: UCheatManagerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc disableDebugCamera*(obj {.inject.}: UCheatManagerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc destroyTarget*(obj {.inject.}: UCheatManagerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc damageTarget*(obj {.inject.}: UCheatManagerPtr;
                   damageAmount {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc changeSize*(obj {.inject.}: UCheatManagerPtr; f {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerController*(obj {.inject.}: UCheatManagerExtensionPtr): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `childActorClass`*(obj {.inject.}: UChildActorComponentPtr): TSubclassOf[
    AActor] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `childActorClass=`*(obj {.inject.}: UChildActorComponentPtr;
                         val {.inject.}: TSubclassOf[AActor]): void {.
    importcpp: "setchildActorClass(@)", header: "UEGenBindings.h".}
proc `childActor`*(obj {.inject.}: UChildActorComponentPtr): TObjectPtr[AActor] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `childActor=`*(obj {.inject.}: UChildActorComponentPtr;
                    val {.inject.}: TObjectPtr[AActor]): void {.
    importcpp: "setchildActor(@)", header: "UEGenBindings.h".}
proc setChildActorClass*(obj {.inject.}: UChildActorComponentPtr;
                         inClass {.inject.}: TSubclassOf[AActor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `parentTables`*(obj {.inject.}: UCompositeCurveTablePtr): var TArray[
    TObjectPtr[UCurveTable]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `parentTables=`*(obj {.inject.}: UCompositeCurveTablePtr;
                      val {.inject.}: TArray[TObjectPtr[UCurveTable]]): void {.
    importcpp: "setparentTables(@)", header: "UEGenBindings.h".}
proc `parentTables`*(obj {.inject.}: UCompositeDataTablePtr): var TArray[
    TObjectPtr[UDataTable]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `parentTables=`*(obj {.inject.}: UCompositeDataTablePtr;
                      val {.inject.}: TArray[TObjectPtr[UDataTable]]): void {.
    importcpp: "setparentTables(@)", header: "UEGenBindings.h".}
proc setProjectionParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          bEnableProjection {.inject.}: bool;
                          projectionLinearAlpha {.inject.}: float32;
                          projectionAngularAlpha {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setParentDominates*(accessor {.inject.}: var FConstraintInstanceAccessor;
                         bParentDominates {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOrientationDriveTwistAndSwing*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                       bEnableTwistDrive {.inject.}: bool;
                                       bEnableSwingDrive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOrientationDriveSLERP*(accessor {.inject.}: var FConstraintInstanceAccessor;
                               bEnableSLERP {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearVelocityTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                              inVelTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearVelocityDrive*(accessor {.inject.}: var FConstraintInstanceAccessor;
                             bEnableDriveX {.inject.}: bool;
                             bEnableDriveY {.inject.}: bool;
                             bEnableDriveZ {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearSoftLimitParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                               bSoftLinearLimit {.inject.}: bool;
                               linearLimitStiffness {.inject.}: float32;
                               linearLimitDamping {.inject.}: float32;
                               linearLimitRestitution {.inject.}: float32;
                               linearLimitContactDistance {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearPositionTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                              inPosTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearPositionDrive*(accessor {.inject.}: var FConstraintInstanceAccessor;
                             bEnableDriveX {.inject.}: bool;
                             bEnableDriveY {.inject.}: bool;
                             bEnableDriveZ {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearPlasticity*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          bLinearPlasticity {.inject.}: bool;
                          linearPlasticityThreshold {.inject.}: float32;
                          plasticityType {.inject.}: EConstraintPlasticityType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearLimits*(accessor {.inject.}: var FConstraintInstanceAccessor;
                      xMotion {.inject.}: ELinearConstraintMotion;
                      yMotion {.inject.}: ELinearConstraintMotion;
                      zMotion {.inject.}: ELinearConstraintMotion;
                      limit {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLinearDriveParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                           positionStrength {.inject.}: float32;
                           velocityStrength {.inject.}: float32;
                           inForceLimit {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearBreakable*(accessor {.inject.}: var FConstraintInstanceAccessor;
                         bLinearBreakable {.inject.}: bool;
                         linearBreakThreshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDisableCollision*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          bDisableCollision {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setContactTransferScale*(accessor {.inject.}: var FConstraintInstanceAccessor;
                              contactTransferScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularVelocityTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                               inVelTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularVelocityDriveTwistAndSwing*(
    accessor {.inject.}: var FConstraintInstanceAccessor;
    bEnableTwistDrive {.inject.}: bool; bEnableSwingDrive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularVelocityDriveSLERP*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                   bEnableSLERP {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularSoftTwistLimitParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                     bSoftTwistLimit {.inject.}: bool;
                                     twistLimitStiffness {.inject.}: float32;
                                     twistLimitDamping {.inject.}: float32;
                                     twistLimitRestitution {.inject.}: float32;
    twistLimitContactDistance {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAngularSoftSwingLimitParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                     bSoftSwingLimit {.inject.}: bool;
                                     swingLimitStiffness {.inject.}: float32;
                                     swingLimitDamping {.inject.}: float32;
                                     swingLimitRestitution {.inject.}: float32;
    swingLimitContactDistance {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAngularPlasticity*(accessor {.inject.}: var FConstraintInstanceAccessor;
                           bAngularPlasticity {.inject.}: bool;
                           angularPlasticityThreshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularOrientationTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                  inPosTarget {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularLimits*(accessor {.inject.}: var FConstraintInstanceAccessor;
                       swing1MotionType {.inject.}: EAngularConstraintMotion;
                       swing1LimitAngle {.inject.}: float32;
                       swing2MotionType {.inject.}: EAngularConstraintMotion;
                       swing2LimitAngle {.inject.}: float32;
                       twistMotionType {.inject.}: EAngularConstraintMotion;
                       twistLimitAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularDriveParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                            positionStrength {.inject.}: float32;
                            velocityStrength {.inject.}: float32;
                            inForceLimit {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularDriveMode*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          driveMode {.inject.}: EAngularDriveMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularBreakable*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          bAngularBreakable {.inject.}: bool;
                          angularBreakThreshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getProjectionParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          bEnableProjection {.inject.}: var bool;
                          projectionLinearAlpha {.inject.}: var float32;
                          projectionAngularAlpha {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getParentDominates*(accessor {.inject.}: var FConstraintInstanceAccessor): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOrientationDriveTwistAndSwing*(accessor {.inject.}: var FConstraintInstanceAccessor;
    bOutEnableTwistDrive {.inject.}: var bool;
                                       bOutEnableSwingDrive {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOrientationDriveSLERP*(accessor {.inject.}: var FConstraintInstanceAccessor;
                               bOutEnableSLERP {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearVelocityTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                              outVelTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearVelocityDrive*(accessor {.inject.}: var FConstraintInstanceAccessor;
                             bOutEnableDriveX {.inject.}: var bool;
                             bOutEnableDriveY {.inject.}: var bool;
                             bOutEnableDriveZ {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearSoftLimitParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                               bSoftLinearLimit {.inject.}: var bool;
                               linearLimitStiffness {.inject.}: var float32;
                               linearLimitDamping {.inject.}: var float32;
                               linearLimitRestitution {.inject.}: var float32;
    linearLimitContactDistance {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearPositionTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                              outPosTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearPositionDrive*(accessor {.inject.}: var FConstraintInstanceAccessor;
                             bOutEnableDriveX {.inject.}: var bool;
                             bOutEnableDriveY {.inject.}: var bool;
                             bOutEnableDriveZ {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearPlasticity*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          bLinearPlasticity {.inject.}: var bool;
                          linearPlasticityThreshold {.inject.}: var float32;
    plasticityType {.inject.}: var EConstraintPlasticityType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearLimits*(accessor {.inject.}: var FConstraintInstanceAccessor;
                      xMotion {.inject.}: var ELinearConstraintMotion;
                      yMotion {.inject.}: var ELinearConstraintMotion;
                      zMotion {.inject.}: var ELinearConstraintMotion;
                      limit {.inject.}: var float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getLinearDriveParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                           outPositionStrength {.inject.}: var float32;
                           outVelocityStrength {.inject.}: var float32;
                           outForceLimit {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearBreakable*(accessor {.inject.}: var FConstraintInstanceAccessor;
                         bLinearBreakable {.inject.}: var bool;
                         linearBreakThreshold {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDisableCollsion*(accessor {.inject.}: var FConstraintInstanceAccessor): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getContactTransferScale*(accessor {.inject.}: var FConstraintInstanceAccessor;
                              contactTransferScale {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAttachedBodyNames*(accessor {.inject.}: var FConstraintInstanceAccessor;
                           parentBody {.inject.}: var FName;
                           childBody {.inject.}: var FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularVelocityTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                               outVelTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularVelocityDriveTwistAndSwing*(
    accessor {.inject.}: var FConstraintInstanceAccessor;
    bOutEnableTwistDrive {.inject.}: var bool;
    bOutEnableSwingDrive {.inject.}: var bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getAngularVelocityDriveSLERP*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                   bOutEnableSLERP {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularSoftTwistLimitParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                     bSoftTwistLimit {.inject.}: var bool;
    twistLimitStiffness {.inject.}: var float32;
                                     twistLimitDamping {.inject.}: var float32;
    twistLimitRestitution {.inject.}: var float32;
    twistLimitContactDistance {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularSoftSwingLimitParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                     bSoftSwingLimit {.inject.}: var bool;
    swingLimitStiffness {.inject.}: var float32;
                                     swingLimitDamping {.inject.}: var float32;
    swingLimitRestitution {.inject.}: var float32;
    swingLimitContactDistance {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularPlasticity*(accessor {.inject.}: var FConstraintInstanceAccessor;
                           bAngularPlasticity {.inject.}: var bool;
                           angularPlasticityThreshold {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularOrientationTarget*(accessor {.inject.}: var FConstraintInstanceAccessor;
                                  outPosTarget {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularLimits*(accessor {.inject.}: var FConstraintInstanceAccessor;
    swing1MotionType {.inject.}: var EAngularConstraintMotion;
                       swing1LimitAngle {.inject.}: var float32;
    swing2MotionType {.inject.}: var EAngularConstraintMotion;
                       swing2LimitAngle {.inject.}: var float32;
                       twistMotionType {.inject.}: var EAngularConstraintMotion;
                       twistLimitAngle {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularDriveParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                            outPositionStrength {.inject.}: var float32;
                            outVelocityStrength {.inject.}: var float32;
                            outForceLimit {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularDriveMode*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          outDriveMode {.inject.}: var EAngularDriveMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAngularBreakable*(accessor {.inject.}: var FConstraintInstanceAccessor;
                          bAngularBreakable {.inject.}: var bool;
                          angularBreakThreshold {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc copyParams*(accessor {.inject.}: var FConstraintInstanceAccessor;
                 sourceAccessor {.inject.}: var FConstraintInstanceAccessor;
                 bKeepPosition {.inject.}: bool; bKeepRotation {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cullDistances`*(obj {.inject.}: ACullDistanceVolumePtr): var TArray[
    FCullDistanceSizePair] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cullDistances=`*(obj {.inject.}: ACullDistanceVolumePtr;
                       val {.inject.}: TArray[FCullDistanceSizePair]): void {.
    importcpp: "setcullDistances(@)", header: "UEGenBindings.h".}
proc `bEnabled`*(obj {.inject.}: ACullDistanceVolumePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnabled=`*(obj {.inject.}: ACullDistanceVolumePtr; val {.inject.}: uint8): void {.
    importcpp: "setbEnabled(@)", header: "UEGenBindings.h".}
proc getValueRange*(obj {.inject.}: UCurveBasePtr;
                    minValue {.inject.}: var float32;
                    maxValue {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimeRange*(obj {.inject.}: UCurveBasePtr;
                   minTime {.inject.}: var float32;
                   maxTime {.inject.}: var float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getFloatValue*(obj {.inject.}: UCurveFloatPtr; inTime {.inject.}: float32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValid*(identifier {.inject.}: var FAnimationCurveIdentifier): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getType*(identifier {.inject.}: var FAnimationCurveIdentifier): ERawCurveTrackTypes {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTransformChildCurveIdentifier*(inOutIdentifier {.inject.}: var FAnimationCurveIdentifier;
    channel {.inject.}: ETransformCurveChannel;
                                       axis {.inject.}: EVectorCurveChannel): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getName*(identifier {.inject.}: var FAnimationCurveIdentifier): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurveIdentifiers*(inSkeleton {.inject.}: USkeletonPtr;
                          curveType {.inject.}: ERawCurveTrackTypes): TArray[FAnimationCurveIdentifier] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurveIdentifier*(inSkeleton {.inject.}: USkeletonPtr;
                         name {.inject.}: FName;
                         curveType {.inject.}: ERawCurveTrackTypes): FAnimationCurveIdentifier {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findCurveIdentifier*(inSkeleton {.inject.}: USkeletonPtr;
                          name {.inject.}: FName;
                          curveType {.inject.}: ERawCurveTrackTypes): FAnimationCurveIdentifier {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnadjustedLinearColorValue*(obj {.inject.}: UCurveLinearColorPtr;
                                    inTime {.inject.}: float32): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLinearColorValue*(obj {.inject.}: UCurveLinearColorPtr;
                          inTime {.inject.}: float32): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClampedLinearColorValue*(obj {.inject.}: UCurveLinearColorPtr;
                                 inTime {.inject.}: float32): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `addressX`*(obj {.inject.}: UTexture2DPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `addressX=`*(obj {.inject.}: UTexture2DPtr; val {.inject.}: TextureAddress): void {.
    importcpp: "setaddressX(@)", header: "UEGenBindings.h".}
proc `addressY`*(obj {.inject.}: UTexture2DPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `addressY=`*(obj {.inject.}: UTexture2DPtr; val {.inject.}: TextureAddress): void {.
    importcpp: "setaddressY(@)", header: "UEGenBindings.h".}
proc blueprint_GetSizeY*(obj {.inject.}: UTexture2DPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc blueprint_GetSizeX*(obj {.inject.}: UTexture2DPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurvePosition*(obj {.inject.}: UCurveLinearColorAtlasPtr;
                       inCurve {.inject.}: UCurveLinearColorPtr;
                       position {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVectorValue*(obj {.inject.}: UCurveVectorPtr; inTime {.inject.}: float32): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCausedByWorld`*(obj {.inject.}: UDamageTypePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCausedByWorld=`*(obj {.inject.}: UDamageTypePtr; val {.inject.}: uint8): void {.
    importcpp: "setbCausedByWorld(@)", header: "UEGenBindings.h".}
proc `bScaleMomentumByMass`*(obj {.inject.}: UDamageTypePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bScaleMomentumByMass=`*(obj {.inject.}: UDamageTypePtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbScaleMomentumByMass(@)", header: "UEGenBindings.h".}
proc `bRadialDamageVelChange`*(obj {.inject.}: UDamageTypePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRadialDamageVelChange=`*(obj {.inject.}: UDamageTypePtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbRadialDamageVelChange(@)", header: "UEGenBindings.h".}
proc `damageImpulse`*(obj {.inject.}: UDamageTypePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `damageImpulse=`*(obj {.inject.}: UDamageTypePtr; val {.inject.}: float32): void {.
    importcpp: "setdamageImpulse(@)", header: "UEGenBindings.h".}
proc `destructibleImpulse`*(obj {.inject.}: UDamageTypePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `destructibleImpulse=`*(obj {.inject.}: UDamageTypePtr;
                             val {.inject.}: float32): void {.
    importcpp: "setdestructibleImpulse(@)", header: "UEGenBindings.h".}
proc `destructibleDamageSpreadScale`*(obj {.inject.}: UDamageTypePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `destructibleDamageSpreadScale=`*(obj {.inject.}: UDamageTypePtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setdestructibleDamageSpreadScale(@)", header: "UEGenBindings.h".}
proc `damageFalloff`*(obj {.inject.}: UDamageTypePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `damageFalloff=`*(obj {.inject.}: UDamageTypePtr; val {.inject.}: float32): void {.
    importcpp: "setdamageFalloff(@)", header: "UEGenBindings.h".}
proc isVisible*(obj {.inject.}: UDataLayerPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isRuntime*(obj {.inject.}: UDataLayerPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isInitiallyVisible*(obj {.inject.}: UDataLayerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isInitiallyActive*(obj {.inject.}: UDataLayerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isEffectiveVisible*(obj {.inject.}: UDataLayerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isDynamicallyLoaded*(obj {.inject.}: UDataLayerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInitialState*(obj {.inject.}: UDataLayerPtr): EDataLayerState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInitialRuntimeState*(obj {.inject.}: UDataLayerPtr): EDataLayerRuntimeState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDebugColor*(obj {.inject.}: UDataLayerPtr): FColor {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getDataLayerLabel*(obj {.inject.}: UDataLayerPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equals*(obj {.inject.}: UDataLayerPtr;
             actorDataLayer {.inject.}: var FActorDataLayer): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDataLayerStateByLabel*(obj {.inject.}: UDataLayerSubsystemPtr;
                               inDataLayerLabel {.inject.}: var FName;
                               inState {.inject.}: EDataLayerState): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDataLayerState*(obj {.inject.}: UDataLayerSubsystemPtr;
                        inDataLayer {.inject.}: var FActorDataLayer;
                        inState {.inject.}: EDataLayerState): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDataLayerRuntimeStateByLabel*(obj {.inject.}: UDataLayerSubsystemPtr;
                                      inDataLayerLabel {.inject.}: var FName;
    inState {.inject.}: EDataLayerRuntimeState; bInIsRecursive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDataLayerRuntimeState*(obj {.inject.}: UDataLayerSubsystemPtr;
                               inDataLayer {.inject.}: var FActorDataLayer;
                               inState {.inject.}: EDataLayerRuntimeState;
                               bInIsRecursive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLoadedDataLayerNames*(obj {.inject.}: UDataLayerSubsystemPtr): TSet[FName] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerStateByLabel*(obj {.inject.}: UDataLayerSubsystemPtr;
                               inDataLayerLabel {.inject.}: var FName): EDataLayerState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerState*(obj {.inject.}: UDataLayerSubsystemPtr;
                        inDataLayer {.inject.}: var FActorDataLayer): EDataLayerState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerRuntimeStateByLabel*(obj {.inject.}: UDataLayerSubsystemPtr;
                                      inDataLayerLabel {.inject.}: var FName): EDataLayerRuntimeState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerRuntimeState*(obj {.inject.}: UDataLayerSubsystemPtr;
                               inDataLayer {.inject.}: var FActorDataLayer): EDataLayerRuntimeState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerFromName*(obj {.inject.}: UDataLayerSubsystemPtr;
                           inDataLayerName {.inject.}: FName): UDataLayerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerFromLabel*(obj {.inject.}: UDataLayerSubsystemPtr;
                            inDataLayerLabel {.inject.}: FName): UDataLayerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerEffectiveRuntimeStateByLabel*(
    obj {.inject.}: UDataLayerSubsystemPtr;
    inDataLayerLabel {.inject.}: var FName): EDataLayerRuntimeState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayerEffectiveRuntimeState*(obj {.inject.}: UDataLayerSubsystemPtr;
    inDataLayer {.inject.}: var FActorDataLayer): EDataLayerRuntimeState {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataLayer*(obj {.inject.}: UDataLayerSubsystemPtr;
                   inDataLayer {.inject.}: var FActorDataLayer): UDataLayerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActiveDataLayerNames*(obj {.inject.}: UDataLayerSubsystemPtr): TSet[FName] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataTableRowNames*(table {.inject.}: UDataTablePtr;
                           outRowNames {.inject.}: var TArray[FName]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataTableRowFromName*(table {.inject.}: UDataTablePtr;
                              rowName {.inject.}: FName;
                              outRow {.inject.}: var FTableRowBase): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDataTableColumnAsString*(dataTable {.inject.}: UDataTablePtr;
                                 propertyName {.inject.}: FName): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fillDataTableFromJSONString*(dataTable {.inject.}: UDataTablePtr;
                                  jSONString {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fillDataTableFromJSONFile*(dataTable {.inject.}: UDataTablePtr;
                                jSONFilePath {.inject.}: FString;
                                importRowStruct {.inject.}: UScriptStructPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fillDataTableFromCSVString*(dataTable {.inject.}: UDataTablePtr;
                                 cSVString {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fillDataTableFromCSVFile*(dataTable {.inject.}: UDataTablePtr;
                               cSVFilePath {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc evaluateCurveTableRow*(curveTable {.inject.}: UCurveTablePtr;
                            rowName {.inject.}: FName; inXY {.inject.}: float32;
    outResult {.inject.}: var EEvaluateCurveTableResult::Type;
                            outXY {.inject.}: var float32;
                            contextString {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc doesDataTableRowExist*(table {.inject.}: UDataTablePtr;
                            rowName {.inject.}: FName): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `speedScale`*(obj {.inject.}: ADebugCameraControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `speedScale=`*(obj {.inject.}: ADebugCameraControllerPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setspeedScale(@)", header: "UEGenBindings.h".}
proc `initialMaxSpeed`*(obj {.inject.}: ADebugCameraControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `initialMaxSpeed=`*(obj {.inject.}: ADebugCameraControllerPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setinitialMaxSpeed(@)", header: "UEGenBindings.h".}
proc `initialAccel`*(obj {.inject.}: ADebugCameraControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `initialAccel=`*(obj {.inject.}: ADebugCameraControllerPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setinitialAccel(@)", header: "UEGenBindings.h".}
proc `initialDecel`*(obj {.inject.}: ADebugCameraControllerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `initialDecel=`*(obj {.inject.}: ADebugCameraControllerPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setinitialDecel(@)", header: "UEGenBindings.h".}
proc toggleDisplay*(obj {.inject.}: ADebugCameraControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPawnMovementSpeedScale*(obj {.inject.}: ADebugCameraControllerPtr;
                                newSpeedScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSelectedActor*(obj {.inject.}: ADebugCameraControllerPtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerOwner`*(obj {.inject.}: AHUDPtr): TObjectPtr[APlayerController] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerOwner=`*(obj {.inject.}: AHUDPtr;
                     val {.inject.}: TObjectPtr[APlayerController]): void {.
    importcpp: "setplayerOwner(@)", header: "UEGenBindings.h".}
proc `bLostFocusPaused`*(obj {.inject.}: AHUDPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bLostFocusPaused=`*(obj {.inject.}: AHUDPtr; val {.inject.}: uint8): void {.
    importcpp: "setbLostFocusPaused(@)", header: "UEGenBindings.h".}
proc `bShowHUD`*(obj {.inject.}: AHUDPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bShowHUD=`*(obj {.inject.}: AHUDPtr; val {.inject.}: uint8): void {.
    importcpp: "setbShowHUD(@)", header: "UEGenBindings.h".}
proc `bShowDebugInfo`*(obj {.inject.}: AHUDPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bShowDebugInfo=`*(obj {.inject.}: AHUDPtr; val {.inject.}: uint8): void {.
    importcpp: "setbShowDebugInfo(@)", header: "UEGenBindings.h".}
proc `bShowHitBoxDebugInfo`*(obj {.inject.}: AHUDPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShowHitBoxDebugInfo=`*(obj {.inject.}: AHUDPtr; val {.inject.}: uint8): void {.
    importcpp: "setbShowHitBoxDebugInfo(@)", header: "UEGenBindings.h".}
proc `bShowOverlays`*(obj {.inject.}: AHUDPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bShowOverlays=`*(obj {.inject.}: AHUDPtr; val {.inject.}: uint8): void {.
    importcpp: "setbShowOverlays(@)", header: "UEGenBindings.h".}
proc `bEnableDebugTextShadow`*(obj {.inject.}: AHUDPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableDebugTextShadow=`*(obj {.inject.}: AHUDPtr; val {.inject.}: uint8): void {.
    importcpp: "setbEnableDebugTextShadow(@)", header: "UEGenBindings.h".}
proc project*(obj {.inject.}: AHUDPtr; location {.inject.}: FVector;
              bClampToZeroPlane {.inject.}: bool): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getTextSize*(obj {.inject.}: AHUDPtr; text {.inject.}: FString;
                  outWidth {.inject.}: var float32;
                  outHeight {.inject.}: var float32; font {.inject.}: UFontPtr;
                  scale {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getOwningPlayerController*(obj {.inject.}: AHUDPtr): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOwningPawn*(obj {.inject.}: AHUDPtr): APawnPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getActorsInSelectionRectangle*(obj {.inject.}: AHUDPtr;
                                    classFilter {.inject.}: TSubclassOf[AActor];
                                    firstPoint {.inject.}: var FVector2D;
                                    secondPoint {.inject.}: var FVector2D;
                                    outActors {.inject.}: var TArray[AActorPtr];
    bIncludeNonCollidingComponents {.inject.}: bool;
                                    bActorMustBeFullyEnclosed {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawTextureSimple*(obj {.inject.}: AHUDPtr; texture {.inject.}: UTexturePtr;
                        screenX {.inject.}: float32; screenY {.inject.}: float32;
                        scale {.inject.}: float32;
                        bScalePosition {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawTexture*(obj {.inject.}: AHUDPtr; texture {.inject.}: UTexturePtr;
                  screenX {.inject.}: float32; screenY {.inject.}: float32;
                  screenW {.inject.}: float32; screenH {.inject.}: float32;
                  textureU {.inject.}: float32; textureV {.inject.}: float32;
                  textureUWidth {.inject.}: float32;
                  textureVHeight {.inject.}: float32;
                  tintColor {.inject.}: FLinearColor;
                  blendMode {.inject.}: EBlendMode; scale {.inject.}: float32;
                  bScalePosition {.inject.}: bool; rotation {.inject.}: float32;
                  rotPivot {.inject.}: FVector2D): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawText*(obj {.inject.}: AHUDPtr; text {.inject.}: FString;
               textColor {.inject.}: FLinearColor; screenX {.inject.}: float32;
               screenY {.inject.}: float32; font {.inject.}: UFontPtr;
               scale {.inject.}: float32; bScalePosition {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawRect*(obj {.inject.}: AHUDPtr; rectColor {.inject.}: FLinearColor;
               screenX {.inject.}: float32; screenY {.inject.}: float32;
               screenW {.inject.}: float32; screenH {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawMaterialTriangle*(obj {.inject.}: AHUDPtr;
                           material {.inject.}: UMaterialInterfacePtr;
                           v0_Pos {.inject.}: FVector2D;
                           v1_Pos {.inject.}: FVector2D;
                           v2_Pos {.inject.}: FVector2D;
                           v0_UV {.inject.}: FVector2D;
                           v1_UV {.inject.}: FVector2D;
                           v2_UV {.inject.}: FVector2D;
                           v0_Color {.inject.}: FLinearColor;
                           v1_Color {.inject.}: FLinearColor;
                           v2_Color {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawMaterialSimple*(obj {.inject.}: AHUDPtr;
                         material {.inject.}: UMaterialInterfacePtr;
                         screenX {.inject.}: float32;
                         screenY {.inject.}: float32;
                         screenW {.inject.}: float32;
                         screenH {.inject.}: float32; scale {.inject.}: float32;
                         bScalePosition {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawMaterial*(obj {.inject.}: AHUDPtr;
                   material {.inject.}: UMaterialInterfacePtr;
                   screenX {.inject.}: float32; screenY {.inject.}: float32;
                   screenW {.inject.}: float32; screenH {.inject.}: float32;
                   materialU {.inject.}: float32; materialV {.inject.}: float32;
                   materialUWidth {.inject.}: float32;
                   materialVHeight {.inject.}: float32;
                   scale {.inject.}: float32; bScalePosition {.inject.}: bool;
                   rotation {.inject.}: float32; rotPivot {.inject.}: FVector2D): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawLine*(obj {.inject.}: AHUDPtr; startScreenX {.inject.}: float32;
               startScreenY {.inject.}: float32; endScreenX {.inject.}: float32;
               endScreenY {.inject.}: float32;
               lineColor {.inject.}: FLinearColor;
               lineThickness {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc deproject*(obj {.inject.}: AHUDPtr; screenX {.inject.}: float32;
                screenY {.inject.}: float32;
                worldPosition {.inject.}: var FVector;
                worldDirection {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addHitBox*(obj {.inject.}: AHUDPtr; position {.inject.}: FVector2D;
                size {.inject.}: FVector2D; inName {.inject.}: FName;
                bConsumesInput {.inject.}: bool; priority {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `decal`*(obj {.inject.}: ADecalActorPtr): TObjectPtr[UDecalComponent] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `decal=`*(obj {.inject.}: ADecalActorPtr;
               val {.inject.}: TObjectPtr[UDecalComponent]): void {.
    importcpp: "setdecal(@)", header: "UEGenBindings.h".}
proc setDecalMaterial*(obj {.inject.}: ADecalActorPtr;
                       newDecalMaterial {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDecalMaterial*(obj {.inject.}: ADecalActorPtr): UMaterialInterfacePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createDynamicMaterialInstance*(obj {.inject.}: ADecalActorPtr): UMaterialInstanceDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `decalMaterial`*(obj {.inject.}: UDecalComponentPtr): TObjectPtr[
    UMaterialInterface] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `decalMaterial=`*(obj {.inject.}: UDecalComponentPtr;
                       val {.inject.}: TObjectPtr[UMaterialInterface]): void {.
    importcpp: "setdecalMaterial(@)", header: "UEGenBindings.h".}
proc `sortOrder`*(obj {.inject.}: UDecalComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sortOrder=`*(obj {.inject.}: UDecalComponentPtr; val {.inject.}: int32): void {.
    importcpp: "setsortOrder(@)", header: "UEGenBindings.h".}
proc `fadeScreenSize`*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fadeScreenSize=`*(obj {.inject.}: UDecalComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setfadeScreenSize(@)", header: "UEGenBindings.h".}
proc `fadeStartDelay`*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fadeStartDelay=`*(obj {.inject.}: UDecalComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setfadeStartDelay(@)", header: "UEGenBindings.h".}
proc `fadeDuration`*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fadeDuration=`*(obj {.inject.}: UDecalComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setfadeDuration(@)", header: "UEGenBindings.h".}
proc `fadeInDuration`*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fadeInDuration=`*(obj {.inject.}: UDecalComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setfadeInDuration(@)", header: "UEGenBindings.h".}
proc `fadeInStartDelay`*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fadeInStartDelay=`*(obj {.inject.}: UDecalComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setfadeInStartDelay(@)", header: "UEGenBindings.h".}
proc `bDestroyOwnerAfterFade`*(obj {.inject.}: UDecalComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDestroyOwnerAfterFade=`*(obj {.inject.}: UDecalComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbDestroyOwnerAfterFade(@)", header: "UEGenBindings.h".}
proc `decalSize`*(obj {.inject.}: UDecalComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `decalSize=`*(obj {.inject.}: UDecalComponentPtr; val {.inject.}: FVector): void {.
    importcpp: "setdecalSize(@)", header: "UEGenBindings.h".}
proc setSortOrder*(obj {.inject.}: UDecalComponentPtr; value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFadeScreenSize*(obj {.inject.}: UDecalComponentPtr;
                        newFadeScreenSize {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFadeOut*(obj {.inject.}: UDecalComponentPtr;
                 startDelay {.inject.}: float32; duration {.inject.}: float32;
                 destroyOwnerAfterFade {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFadeIn*(obj {.inject.}: UDecalComponentPtr;
                startDelay {.inject.}: float32; duaration {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDecalMaterial*(obj {.inject.}: UDecalComponentPtr;
                       newDecalMaterial {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFadeStartDelay*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFadeInStartDelay*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFadeInDuration*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFadeDuration*(obj {.inject.}: UDecalComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDecalMaterial*(obj {.inject.}: UDecalComponentPtr): UMaterialInterfacePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createDynamicMaterialInstance*(obj {.inject.}: UDecalComponentPtr): UMaterialInstanceDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `baseTurnRate`*(obj {.inject.}: ADefaultPawnPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `baseTurnRate=`*(obj {.inject.}: ADefaultPawnPtr; val {.inject.}: float32): void {.
    importcpp: "setbaseTurnRate(@)", header: "UEGenBindings.h".}
proc `baseLookUpRate`*(obj {.inject.}: ADefaultPawnPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `baseLookUpRate=`*(obj {.inject.}: ADefaultPawnPtr; val {.inject.}: float32): void {.
    importcpp: "setbaseLookUpRate(@)", header: "UEGenBindings.h".}
proc `movementComponent`*(obj {.inject.}: ADefaultPawnPtr): TObjectPtr[
    UPawnMovementComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `movementComponent=`*(obj {.inject.}: ADefaultPawnPtr;
                           val {.inject.}: TObjectPtr[UPawnMovementComponent]): void {.
    importcpp: "setmovementComponent(@)", header: "UEGenBindings.h".}
proc `collisionComponent`*(obj {.inject.}: ADefaultPawnPtr): TObjectPtr[
    USphereComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `collisionComponent=`*(obj {.inject.}: ADefaultPawnPtr;
                            val {.inject.}: TObjectPtr[USphereComponent]): void {.
    importcpp: "setcollisionComponent(@)", header: "UEGenBindings.h".}
proc `meshComponent`*(obj {.inject.}: ADefaultPawnPtr): TObjectPtr[
    UStaticMeshComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `meshComponent=`*(obj {.inject.}: ADefaultPawnPtr;
                       val {.inject.}: TObjectPtr[UStaticMeshComponent]): void {.
    importcpp: "setmeshComponent(@)", header: "UEGenBindings.h".}
proc `bAddDefaultMovementBindings`*(obj {.inject.}: ADefaultPawnPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAddDefaultMovementBindings=`*(obj {.inject.}: ADefaultPawnPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbAddDefaultMovementBindings(@)", header: "UEGenBindings.h".}
proc turnAtRate*(obj {.inject.}: ADefaultPawnPtr; rate {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc moveUp_World*(obj {.inject.}: ADefaultPawnPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc moveRight*(obj {.inject.}: ADefaultPawnPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc moveForward*(obj {.inject.}: ADefaultPawnPtr; val {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lookUpAtRate*(obj {.inject.}: ADefaultPawnPtr; rate {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bMature`*(obj {.inject.}: UDialogueWavePtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bMature=`*(obj {.inject.}: UDialogueWavePtr; val {.inject.}: uint8): void {.
    importcpp: "setbMature(@)", header: "UEGenBindings.h".}
proc `bOverride_SubtitleOverride`*(obj {.inject.}: UDialogueWavePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverride_SubtitleOverride=`*(obj {.inject.}: UDialogueWavePtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbOverride_SubtitleOverride(@)", header: "UEGenBindings.h".}
proc `spokenText`*(obj {.inject.}: UDialogueWavePtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spokenText=`*(obj {.inject.}: UDialogueWavePtr; val {.inject.}: FString): void {.
    importcpp: "setspokenText(@)", header: "UEGenBindings.h".}
proc `subtitleOverride`*(obj {.inject.}: UDialogueWavePtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subtitleOverride=`*(obj {.inject.}: UDialogueWavePtr;
                          val {.inject.}: FString): void {.
    importcpp: "setsubtitleOverride(@)", header: "UEGenBindings.h".}
proc `lightComponent`*(obj {.inject.}: ALightPtr): TObjectPtr[ULightComponent] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightComponent=`*(obj {.inject.}: ALightPtr;
                        val {.inject.}: TObjectPtr[ULightComponent]): void {.
    importcpp: "setlightComponent(@)", header: "UEGenBindings.h".}
proc toggleEnabled*(obj {.inject.}: ALightPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLightFunctionScale*(obj {.inject.}: ALightPtr;
                            newLightFunctionScale {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFunctionMaterial*(obj {.inject.}: ALightPtr;
    newLightFunctionMaterial {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFunctionFadeDistance*(obj {.inject.}: ALightPtr;
    newLightFunctionFadeDistance {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightColor*(obj {.inject.}: ALightPtr;
                    newLightColor {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnabled*(obj {.inject.}: ALightPtr; bSetEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastShadows*(obj {.inject.}: ALightPtr; bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBrightness*(obj {.inject.}: ALightPtr; newBrightness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAffectTranslucentLighting*(obj {.inject.}: ALightPtr;
                                   bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isEnabled*(obj {.inject.}: ALightPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getLightColor*(obj {.inject.}: ALightPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBrightness*(obj {.inject.}: ALightPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `intensity`*(obj {.inject.}: ULightComponentBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `intensity=`*(obj {.inject.}: ULightComponentBasePtr;
                   val {.inject.}: float32): void {.
    importcpp: "setintensity(@)", header: "UEGenBindings.h".}
proc `lightColor`*(obj {.inject.}: ULightComponentBasePtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightColor=`*(obj {.inject.}: ULightComponentBasePtr;
                    val {.inject.}: FColor): void {.
    importcpp: "setlightColor(@)", header: "UEGenBindings.h".}
proc `bAffectsWorld`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAffectsWorld=`*(obj {.inject.}: ULightComponentBasePtr;
                       val {.inject.}: uint8): void {.
    importcpp: "setbAffectsWorld(@)", header: "UEGenBindings.h".}
proc `castShadows`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `castShadows=`*(obj {.inject.}: ULightComponentBasePtr;
                     val {.inject.}: uint8): void {.
    importcpp: "setcastShadows(@)", header: "UEGenBindings.h".}
proc `castStaticShadows`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `castStaticShadows=`*(obj {.inject.}: ULightComponentBasePtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setcastStaticShadows(@)", header: "UEGenBindings.h".}
proc `castDynamicShadows`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `castDynamicShadows=`*(obj {.inject.}: ULightComponentBasePtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setcastDynamicShadows(@)", header: "UEGenBindings.h".}
proc `bAffectTranslucentLighting`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAffectTranslucentLighting=`*(obj {.inject.}: ULightComponentBasePtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbAffectTranslucentLighting(@)", header: "UEGenBindings.h".}
proc `bTransmission`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bTransmission=`*(obj {.inject.}: ULightComponentBasePtr;
                       val {.inject.}: uint8): void {.
    importcpp: "setbTransmission(@)", header: "UEGenBindings.h".}
proc `bCastVolumetricShadow`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastVolumetricShadow=`*(obj {.inject.}: ULightComponentBasePtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbCastVolumetricShadow(@)", header: "UEGenBindings.h".}
proc `bCastDeepShadow`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastDeepShadow=`*(obj {.inject.}: ULightComponentBasePtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbCastDeepShadow(@)", header: "UEGenBindings.h".}
proc `castRaytracedShadow`*(obj {.inject.}: ULightComponentBasePtr): ECastRayTracedShadow::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `castRaytracedShadow=`*(obj {.inject.}: ULightComponentBasePtr;
                             val {.inject.}: ECastRayTracedShadow::Type): void {.
    importcpp: "setcastRaytracedShadow(@)", header: "UEGenBindings.h".}
proc `bAffectReflection`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAffectReflection=`*(obj {.inject.}: ULightComponentBasePtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbAffectReflection(@)", header: "UEGenBindings.h".}
proc `bAffectGlobalIllumination`*(obj {.inject.}: ULightComponentBasePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAffectGlobalIllumination=`*(obj {.inject.}: ULightComponentBasePtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbAffectGlobalIllumination(@)", header: "UEGenBindings.h".}
proc `deepShadowLayerDistribution`*(obj {.inject.}: ULightComponentBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `deepShadowLayerDistribution=`*(obj {.inject.}: ULightComponentBasePtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setdeepShadowLayerDistribution(@)", header: "UEGenBindings.h".}
proc `indirectLightingIntensity`*(obj {.inject.}: ULightComponentBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `indirectLightingIntensity=`*(obj {.inject.}: ULightComponentBasePtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setindirectLightingIntensity(@)", header: "UEGenBindings.h".}
proc `volumetricScatteringIntensity`*(obj {.inject.}: ULightComponentBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricScatteringIntensity=`*(obj {.inject.}: ULightComponentBasePtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setvolumetricScatteringIntensity(@)", header: "UEGenBindings.h".}
proc `samplesPerPixel`*(obj {.inject.}: ULightComponentBasePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `samplesPerPixel=`*(obj {.inject.}: ULightComponentBasePtr;
                         val {.inject.}: int32): void {.
    importcpp: "setsamplesPerPixel(@)", header: "UEGenBindings.h".}
proc setSamplesPerPixel*(obj {.inject.}: ULightComponentBasePtr;
                         newValue {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCastVolumetricShadow*(obj {.inject.}: ULightComponentBasePtr;
                              bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastShadows*(obj {.inject.}: ULightComponentBasePtr;
                     bNewValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCastRaytracedShadows*(obj {.inject.}: ULightComponentBasePtr;
                              bNewValue {.inject.}: ECastRayTracedShadow::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastRaytracedShadow*(obj {.inject.}: ULightComponentBasePtr;
                             bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastDeepShadow*(obj {.inject.}: ULightComponentBasePtr;
                        bNewValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setAffectReflection*(obj {.inject.}: ULightComponentBasePtr;
                          bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAffectGlobalIllumination*(obj {.inject.}: ULightComponentBasePtr;
                                  bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLightColor*(obj {.inject.}: ULightComponentBasePtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `temperature`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `temperature=`*(obj {.inject.}: ULightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "settemperature(@)", header: "UEGenBindings.h".}
proc `bUseTemperature`*(obj {.inject.}: ULightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseTemperature=`*(obj {.inject.}: ULightComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbUseTemperature(@)", header: "UEGenBindings.h".}
proc `specularScale`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `specularScale=`*(obj {.inject.}: ULightComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setspecularScale(@)", header: "UEGenBindings.h".}
proc `shadowResolutionScale`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowResolutionScale=`*(obj {.inject.}: ULightComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setshadowResolutionScale(@)", header: "UEGenBindings.h".}
proc `shadowBias`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowBias=`*(obj {.inject.}: ULightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setshadowBias(@)", header: "UEGenBindings.h".}
proc `shadowSlopeBias`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowSlopeBias=`*(obj {.inject.}: ULightComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setshadowSlopeBias(@)", header: "UEGenBindings.h".}
proc `shadowSharpen`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowSharpen=`*(obj {.inject.}: ULightComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setshadowSharpen(@)", header: "UEGenBindings.h".}
proc `contactShadowLength`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `contactShadowLength=`*(obj {.inject.}: ULightComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setcontactShadowLength(@)", header: "UEGenBindings.h".}
proc `contactShadowLengthInWS`*(obj {.inject.}: ULightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `contactShadowLengthInWS=`*(obj {.inject.}: ULightComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setcontactShadowLengthInWS(@)", header: "UEGenBindings.h".}
proc `castTranslucentShadows`*(obj {.inject.}: ULightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `castTranslucentShadows=`*(obj {.inject.}: ULightComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setcastTranslucentShadows(@)", header: "UEGenBindings.h".}
proc `bCastShadowsFromCinematicObjectsOnly`*(obj {.inject.}: ULightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastShadowsFromCinematicObjectsOnly=`*(obj {.inject.}: ULightComponentPtr;
    val {.inject.}: uint8): void {.importcpp: "setbCastShadowsFromCinematicObjectsOnly(@)",
                                   header: "UEGenBindings.h".}
proc `bAffectDynamicIndirectLighting`*(obj {.inject.}: ULightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAffectDynamicIndirectLighting=`*(obj {.inject.}: ULightComponentPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbAffectDynamicIndirectLighting(@)", header: "UEGenBindings.h".}
proc `bForceCachedShadowsForMovablePrimitives`*(
    obj {.inject.}: ULightComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bForceCachedShadowsForMovablePrimitives=`*(
    obj {.inject.}: ULightComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbForceCachedShadowsForMovablePrimitives(@)",
    header: "UEGenBindings.h".}
proc `lightingChannels`*(obj {.inject.}: ULightComponentPtr): FLightingChannels {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightingChannels=`*(obj {.inject.}: ULightComponentPtr;
                          val {.inject.}: FLightingChannels): void {.
    importcpp: "setlightingChannels(@)", header: "UEGenBindings.h".}
proc `lightFunctionMaterial`*(obj {.inject.}: ULightComponentPtr): TObjectPtr[
    UMaterialInterface] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightFunctionMaterial=`*(obj {.inject.}: ULightComponentPtr;
                               val {.inject.}: TObjectPtr[UMaterialInterface]): void {.
    importcpp: "setlightFunctionMaterial(@)", header: "UEGenBindings.h".}
proc `lightFunctionScale`*(obj {.inject.}: ULightComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightFunctionScale=`*(obj {.inject.}: ULightComponentPtr;
                            val {.inject.}: FVector): void {.
    importcpp: "setlightFunctionScale(@)", header: "UEGenBindings.h".}
proc `iESTexture`*(obj {.inject.}: ULightComponentPtr): TObjectPtr[
    UTextureLightProfile] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `iESTexture=`*(obj {.inject.}: ULightComponentPtr;
                    val {.inject.}: TObjectPtr[UTextureLightProfile]): void {.
    importcpp: "setiESTexture(@)", header: "UEGenBindings.h".}
proc `bUseIESBrightness`*(obj {.inject.}: ULightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseIESBrightness=`*(obj {.inject.}: ULightComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbUseIESBrightness(@)", header: "UEGenBindings.h".}
proc `iESBrightnessScale`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `iESBrightnessScale=`*(obj {.inject.}: ULightComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setiESBrightnessScale(@)", header: "UEGenBindings.h".}
proc `lightFunctionFadeDistance`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightFunctionFadeDistance=`*(obj {.inject.}: ULightComponentPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setlightFunctionFadeDistance(@)", header: "UEGenBindings.h".}
proc `disabledBrightness`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `disabledBrightness=`*(obj {.inject.}: ULightComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setdisabledBrightness(@)", header: "UEGenBindings.h".}
proc `bEnableLightShaftBloom`*(obj {.inject.}: ULightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableLightShaftBloom=`*(obj {.inject.}: ULightComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbEnableLightShaftBloom(@)", header: "UEGenBindings.h".}
proc `bloomScale`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bloomScale=`*(obj {.inject.}: ULightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setbloomScale(@)", header: "UEGenBindings.h".}
proc `bloomThreshold`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bloomThreshold=`*(obj {.inject.}: ULightComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setbloomThreshold(@)", header: "UEGenBindings.h".}
proc `bloomMaxBrightness`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bloomMaxBrightness=`*(obj {.inject.}: ULightComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setbloomMaxBrightness(@)", header: "UEGenBindings.h".}
proc `bloomTint`*(obj {.inject.}: ULightComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bloomTint=`*(obj {.inject.}: ULightComponentPtr; val {.inject.}: FColor): void {.
    importcpp: "setbloomTint(@)", header: "UEGenBindings.h".}
proc `bUseRayTracedDistanceFieldShadows`*(obj {.inject.}: ULightComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseRayTracedDistanceFieldShadows=`*(obj {.inject.}: ULightComponentPtr;
    val {.inject.}: bool): void {.importcpp: "setbUseRayTracedDistanceFieldShadows(@)",
                                  header: "UEGenBindings.h".}
proc `rayStartOffsetDepthScale`*(obj {.inject.}: ULightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rayStartOffsetDepthScale=`*(obj {.inject.}: ULightComponentPtr;
                                  val {.inject.}: float32): void {.
    importcpp: "setrayStartOffsetDepthScale(@)", header: "UEGenBindings.h".}
proc setVolumetricScatteringIntensity*(obj {.inject.}: ULightComponentPtr;
                                       newIntensity {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUseTemperature*(obj {.inject.}: ULightComponentPtr;
                        bNewValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setUseIESBrightness*(obj {.inject.}: ULightComponentPtr;
                          bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTransmission*(obj {.inject.}: ULightComponentPtr;
                      bNewValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setTemperature*(obj {.inject.}: ULightComponentPtr;
                     newTemperature {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSpecularScale*(obj {.inject.}: ULightComponentPtr;
                       newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setShadowSlopeBias*(obj {.inject.}: ULightComponentPtr;
                         newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowBias*(obj {.inject.}: ULightComponentPtr;
                    newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLightingChannels*(obj {.inject.}: ULightComponentPtr;
                          bChannel0 {.inject.}: bool; bChannel1 {.inject.}: bool;
                          bChannel2 {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFunctionScale*(obj {.inject.}: ULightComponentPtr;
                            newLightFunctionScale {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFunctionMaterial*(obj {.inject.}: ULightComponentPtr;
    newLightFunctionMaterial {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFunctionFadeDistance*(obj {.inject.}: ULightComponentPtr;
    newLightFunctionFadeDistance {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFunctionDisabledBrightness*(obj {.inject.}: ULightComponentPtr;
    newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLightColor*(obj {.inject.}: ULightComponentPtr;
                    newLightColor {.inject.}: FLinearColor;
                    bSRGB {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setIntensity*(obj {.inject.}: ULightComponentPtr;
                   newIntensity {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setIndirectLightingIntensity*(obj {.inject.}: ULightComponentPtr;
                                   newIntensity {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIESTexture*(obj {.inject.}: ULightComponentPtr;
                    newValue {.inject.}: UTextureLightProfilePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIESBrightnessScale*(obj {.inject.}: ULightComponentPtr;
                            newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setForceCachedShadowsForMovablePrimitives*(
    obj {.inject.}: ULightComponentPtr; bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnableLightShaftBloom*(obj {.inject.}: ULightComponentPtr;
                               bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBloomTint*(obj {.inject.}: ULightComponentPtr;
                   newValue {.inject.}: FColor): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setBloomThreshold*(obj {.inject.}: ULightComponentPtr;
                        newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBloomScale*(obj {.inject.}: ULightComponentPtr;
                    newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setBloomMaxBrightness*(obj {.inject.}: ULightComponentPtr;
                            newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAffectTranslucentLighting*(obj {.inject.}: ULightComponentPtr;
                                   bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAffectDynamicIndirectLighting*(obj {.inject.}: ULightComponentPtr;
                                       bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowCascadeBiasDistribution`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowCascadeBiasDistribution=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setshadowCascadeBiasDistribution(@)", header: "UEGenBindings.h".}
proc `bEnableLightShaftOcclusion`*(obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableLightShaftOcclusion=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                    val {.inject.}: uint8): void {.
    importcpp: "setbEnableLightShaftOcclusion(@)", header: "UEGenBindings.h".}
proc `occlusionMaskDarkness`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `occlusionMaskDarkness=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setocclusionMaskDarkness(@)", header: "UEGenBindings.h".}
proc `occlusionDepthRange`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `occlusionDepthRange=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setocclusionDepthRange(@)", header: "UEGenBindings.h".}
proc `lightShaftOverrideDirection`*(obj {.inject.}: UDirectionalLightComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightShaftOverrideDirection=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                     val {.inject.}: FVector): void {.
    importcpp: "setlightShaftOverrideDirection(@)", header: "UEGenBindings.h".}
proc `dynamicShadowDistanceMovableLight`*(
    obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `dynamicShadowDistanceMovableLight=`*(
    obj {.inject.}: UDirectionalLightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setdynamicShadowDistanceMovableLight(@)",
    header: "UEGenBindings.h".}
proc `dynamicShadowDistanceStationaryLight`*(
    obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `dynamicShadowDistanceStationaryLight=`*(
    obj {.inject.}: UDirectionalLightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setdynamicShadowDistanceStationaryLight(@)",
    header: "UEGenBindings.h".}
proc `dynamicShadowCascades`*(obj {.inject.}: UDirectionalLightComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `dynamicShadowCascades=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                               val {.inject.}: int32): void {.
    importcpp: "setdynamicShadowCascades(@)", header: "UEGenBindings.h".}
proc `cascadeDistributionExponent`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cascadeDistributionExponent=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setcascadeDistributionExponent(@)", header: "UEGenBindings.h".}
proc `cascadeTransitionFraction`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cascadeTransitionFraction=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                   val {.inject.}: float32): void {.
    importcpp: "setcascadeTransitionFraction(@)", header: "UEGenBindings.h".}
proc `shadowDistanceFadeoutFraction`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowDistanceFadeoutFraction=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setshadowDistanceFadeoutFraction(@)", header: "UEGenBindings.h".}
proc `bUseInsetShadowsForMovableObjects`*(
    obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bUseInsetShadowsForMovableObjects=`*(
    obj {.inject.}: UDirectionalLightComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUseInsetShadowsForMovableObjects(@)",
    header: "UEGenBindings.h".}
proc `farShadowCascadeCount`*(obj {.inject.}: UDirectionalLightComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `farShadowCascadeCount=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                               val {.inject.}: int32): void {.
    importcpp: "setfarShadowCascadeCount(@)", header: "UEGenBindings.h".}
proc `farShadowDistance`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `farShadowDistance=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setfarShadowDistance(@)", header: "UEGenBindings.h".}
proc `distanceFieldShadowDistance`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `distanceFieldShadowDistance=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setdistanceFieldShadowDistance(@)", header: "UEGenBindings.h".}
proc `lightSourceAngle`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightSourceAngle=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setlightSourceAngle(@)", header: "UEGenBindings.h".}
proc `lightSourceSoftAngle`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightSourceSoftAngle=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setlightSourceSoftAngle(@)", header: "UEGenBindings.h".}
proc `shadowSourceAngleFactor`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowSourceAngleFactor=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                 val {.inject.}: float32): void {.
    importcpp: "setshadowSourceAngleFactor(@)", header: "UEGenBindings.h".}
proc `traceDistance`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `traceDistance=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "settraceDistance(@)", header: "UEGenBindings.h".}
proc `bAtmosphereSunLight`*(obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAtmosphereSunLight=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbAtmosphereSunLight(@)", header: "UEGenBindings.h".}
proc `atmosphereSunLightIndex`*(obj {.inject.}: UDirectionalLightComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `atmosphereSunLightIndex=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setatmosphereSunLightIndex(@)", header: "UEGenBindings.h".}
proc `atmosphereSunDiskColorScale`*(obj {.inject.}: UDirectionalLightComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `atmosphereSunDiskColorScale=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                     val {.inject.}: FLinearColor): void {.
    importcpp: "setatmosphereSunDiskColorScale(@)", header: "UEGenBindings.h".}
proc `bPerPixelAtmosphereTransmittance`*(
    obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bPerPixelAtmosphereTransmittance=`*(
    obj {.inject.}: UDirectionalLightComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbPerPixelAtmosphereTransmittance(@)",
    header: "UEGenBindings.h".}
proc `bCastShadowsOnClouds`*(obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastShadowsOnClouds=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbCastShadowsOnClouds(@)", header: "UEGenBindings.h".}
proc `bCastShadowsOnAtmosphere`*(obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastShadowsOnAtmosphere=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbCastShadowsOnAtmosphere(@)", header: "UEGenBindings.h".}
proc `bCastCloudShadows`*(obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastCloudShadows=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbCastCloudShadows(@)", header: "UEGenBindings.h".}
proc `cloudShadowStrength`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudShadowStrength=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setcloudShadowStrength(@)", header: "UEGenBindings.h".}
proc `cloudShadowOnAtmosphereStrength`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudShadowOnAtmosphereStrength=`*(
    obj {.inject.}: UDirectionalLightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setcloudShadowOnAtmosphereStrength(@)",
    header: "UEGenBindings.h".}
proc `cloudShadowOnSurfaceStrength`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudShadowOnSurfaceStrength=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setcloudShadowOnSurfaceStrength(@)", header: "UEGenBindings.h".}
proc `cloudShadowDepthBias`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudShadowDepthBias=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setcloudShadowDepthBias(@)", header: "UEGenBindings.h".}
proc `cloudShadowExtent`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudShadowExtent=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setcloudShadowExtent(@)", header: "UEGenBindings.h".}
proc `cloudShadowMapResolutionScale`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudShadowMapResolutionScale=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setcloudShadowMapResolutionScale(@)", header: "UEGenBindings.h".}
proc `cloudShadowRaySampleCountScale`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudShadowRaySampleCountScale=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                        val {.inject.}: float32): void {.
    importcpp: "setcloudShadowRaySampleCountScale(@)", header: "UEGenBindings.h".}
proc `cloudScatteredLuminanceScale`*(obj {.inject.}: UDirectionalLightComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudScatteredLuminanceScale=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                                      val {.inject.}: FLinearColor): void {.
    importcpp: "setcloudScatteredLuminanceScale(@)", header: "UEGenBindings.h".}
proc `bCastModulatedShadows`*(obj {.inject.}: UDirectionalLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCastModulatedShadows=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbCastModulatedShadows(@)", header: "UEGenBindings.h".}
proc `modulatedShadowColor`*(obj {.inject.}: UDirectionalLightComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `modulatedShadowColor=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                              val {.inject.}: FColor): void {.
    importcpp: "setmodulatedShadowColor(@)", header: "UEGenBindings.h".}
proc `shadowAmount`*(obj {.inject.}: UDirectionalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowAmount=`*(obj {.inject.}: UDirectionalLightComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setshadowAmount(@)", header: "UEGenBindings.h".}
proc setShadowSourceAngleFactor*(obj {.inject.}: UDirectionalLightComponentPtr;
                                 newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowDistanceFadeoutFraction*(obj {.inject.}: UDirectionalLightComponentPtr;
                                       newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowCascadeBiasDistribution*(obj {.inject.}: UDirectionalLightComponentPtr;
                                       newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowAmount*(obj {.inject.}: UDirectionalLightComponentPtr;
                      newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setOcclusionMaskDarkness*(obj {.inject.}: UDirectionalLightComponentPtr;
                               newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOcclusionDepthRange*(obj {.inject.}: UDirectionalLightComponentPtr;
                             newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightSourceSoftAngle*(obj {.inject.}: UDirectionalLightComponentPtr;
                              newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightSourceAngle*(obj {.inject.}: UDirectionalLightComponentPtr;
                          newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightShaftOverrideDirection*(obj {.inject.}: UDirectionalLightComponentPtr;
                                     newValue {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnableLightShaftOcclusion*(obj {.inject.}: UDirectionalLightComponentPtr;
                                   bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDynamicShadowDistanceStationaryLight*(
    obj {.inject.}: UDirectionalLightComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDynamicShadowDistanceMovableLight*(
    obj {.inject.}: UDirectionalLightComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDynamicShadowCascades*(obj {.inject.}: UDirectionalLightComponentPtr;
                               newValue {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCascadeTransitionFraction*(obj {.inject.}: UDirectionalLightComponentPtr;
                                   newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCascadeDistributionExponent*(obj {.inject.}: UDirectionalLightComponentPtr;
                                     newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAtmosphereSunLightIndex*(obj {.inject.}: UDirectionalLightComponentPtr;
                                 newValue {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAtmosphereSunLight*(obj {.inject.}: UDirectionalLightComponentPtr;
                            bNewValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bFrustumEnabled`*(obj {.inject.}: UDrawFrustumComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bFrustumEnabled=`*(obj {.inject.}: UDrawFrustumComponentPtr;
                         val {.inject.}: bool): void {.
    importcpp: "setbFrustumEnabled(@)", header: "UEGenBindings.h".}
proc `frustumColor`*(obj {.inject.}: UDrawFrustumComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `frustumColor=`*(obj {.inject.}: UDrawFrustumComponentPtr;
                      val {.inject.}: FColor): void {.
    importcpp: "setfrustumColor(@)", header: "UEGenBindings.h".}
proc `frustumAngle`*(obj {.inject.}: UDrawFrustumComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `frustumAngle=`*(obj {.inject.}: UDrawFrustumComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setfrustumAngle(@)", header: "UEGenBindings.h".}
proc `frustumAspectRatio`*(obj {.inject.}: UDrawFrustumComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `frustumAspectRatio=`*(obj {.inject.}: UDrawFrustumComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setfrustumAspectRatio(@)", header: "UEGenBindings.h".}
proc `frustumStartDist`*(obj {.inject.}: UDrawFrustumComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `frustumStartDist=`*(obj {.inject.}: UDrawFrustumComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setfrustumStartDist(@)", header: "UEGenBindings.h".}
proc `frustumEndDist`*(obj {.inject.}: UDrawFrustumComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `frustumEndDist=`*(obj {.inject.}: UDrawFrustumComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setfrustumEndDist(@)", header: "UEGenBindings.h".}
proc `texture`*(obj {.inject.}: UDrawFrustumComponentPtr): TObjectPtr[UTexture] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `texture=`*(obj {.inject.}: UDrawFrustumComponentPtr;
                 val {.inject.}: TObjectPtr[UTexture]): void {.
    importcpp: "settexture(@)", header: "UEGenBindings.h".}
proc `sphereRadius`*(obj {.inject.}: USphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sphereRadius=`*(obj {.inject.}: USphereComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setsphereRadius(@)", header: "UEGenBindings.h".}
proc setSphereRadius*(obj {.inject.}: USphereComponentPtr;
                      inSphereRadius {.inject.}: float32;
                      bUpdateOverlaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnscaledSphereRadius*(obj {.inject.}: USphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getShapeScale*(obj {.inject.}: USphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaledSphereRadius*(obj {.inject.}: USphereComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `particleSystemComponent`*(obj {.inject.}: AEmitterPtr): TObjectPtr[
    UParticleSystemComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `particleSystemComponent=`*(obj {.inject.}: AEmitterPtr; val {.inject.}: TObjectPtr[
    UParticleSystemComponent]): void {.importcpp: "setparticleSystemComponent(@)",
                                       header: "UEGenBindings.h".}
proc `bPostUpdateTickGroup`*(obj {.inject.}: AEmitterPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPostUpdateTickGroup=`*(obj {.inject.}: AEmitterPtr; val {.inject.}: uint8): void {.
    importcpp: "setbPostUpdateTickGroup(@)", header: "UEGenBindings.h".}
proc toggleActive*(obj {.inject.}: AEmitterPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setVectorParameter*(obj {.inject.}: AEmitterPtr;
                         parameterName {.inject.}: FName;
                         param {.inject.}: FVector): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setTemplate*(obj {.inject.}: AEmitterPtr;
                  newTemplate {.inject.}: UParticleSystemPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaterialParameter*(obj {.inject.}: AEmitterPtr;
                           parameterName {.inject.}: FName;
                           param {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFloatParameter*(obj {.inject.}: AEmitterPtr;
                        parameterName {.inject.}: FName;
                        param {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setColorParameter*(obj {.inject.}: AEmitterPtr;
                        parameterName {.inject.}: FName;
                        param {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorParameter*(obj {.inject.}: AEmitterPtr;
                        parameterName {.inject.}: FName;
                        param {.inject.}: AActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isActive*(obj {.inject.}: AEmitterPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc deactivate*(obj {.inject.}: AEmitterPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc activate*(obj {.inject.}: AEmitterPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc acquireEditorSMInstanceElementHandle*(
    iSMComponent {.inject.}: UInstancedStaticMeshComponentPtr;
    instanceIndex {.inject.}: int32; bAllowCreate {.inject.}: bool): FScriptTypedElementHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc acquireEditorObjectElementHandle*(`object` {.inject.}: UObjectPtr;
                                       bAllowCreate {.inject.}: bool): FScriptTypedElementHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc acquireEditorComponentElementHandle*(
    component {.inject.}: UActorComponentPtr; bAllowCreate {.inject.}: bool): FScriptTypedElementHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc acquireEditorActorElementHandle*(actor {.inject.}: AActorPtr;
                                      bAllowCreate {.inject.}: bool): FScriptTypedElementHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `component`*(obj {.inject.}: AExponentialHeightFogPtr): TObjectPtr[
    UExponentialHeightFogComponent] {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc `component=`*(obj {.inject.}: AExponentialHeightFogPtr;
                   val {.inject.}: TObjectPtr[UExponentialHeightFogComponent]): void {.
    importcpp: "setcomponent(@)", header: "UEGenBindings.h".}
proc `fogDensity`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fogDensity=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setfogDensity(@)", header: "UEGenBindings.h".}
proc `fogHeightFalloff`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fogHeightFalloff=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setfogHeightFalloff(@)", header: "UEGenBindings.h".}
proc `secondFogData`*(obj {.inject.}: UExponentialHeightFogComponentPtr): FExponentialHeightFogData {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `secondFogData=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                       val {.inject.}: FExponentialHeightFogData): void {.
    importcpp: "setsecondFogData(@)", header: "UEGenBindings.h".}
proc `fogInscatteringLuminance`*(obj {.inject.}: UExponentialHeightFogComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fogInscatteringLuminance=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                  val {.inject.}: FLinearColor): void {.
    importcpp: "setfogInscatteringLuminance(@)", header: "UEGenBindings.h".}
proc `inscatteringColorCubemap`*(obj {.inject.}: UExponentialHeightFogComponentPtr): TObjectPtr[
    UTextureCube] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `inscatteringColorCubemap=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                  val {.inject.}: TObjectPtr[UTextureCube]): void {.
    importcpp: "setinscatteringColorCubemap(@)", header: "UEGenBindings.h".}
proc `inscatteringColorCubemapAngle`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `inscatteringColorCubemapAngle=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setinscatteringColorCubemapAngle(@)", header: "UEGenBindings.h".}
proc `inscatteringTextureTint`*(obj {.inject.}: UExponentialHeightFogComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `inscatteringTextureTint=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                 val {.inject.}: FLinearColor): void {.
    importcpp: "setinscatteringTextureTint(@)", header: "UEGenBindings.h".}
proc `fullyDirectionalInscatteringColorDistance`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fullyDirectionalInscatteringColorDistance=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setfullyDirectionalInscatteringColorDistance(@)",
    header: "UEGenBindings.h".}
proc `nonDirectionalInscatteringColorDistance`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `nonDirectionalInscatteringColorDistance=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setnonDirectionalInscatteringColorDistance(@)",
    header: "UEGenBindings.h".}
proc `directionalInscatteringExponent`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `directionalInscatteringExponent=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setdirectionalInscatteringExponent(@)",
    header: "UEGenBindings.h".}
proc `directionalInscatteringStartDistance`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `directionalInscatteringStartDistance=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setdirectionalInscatteringStartDistance(@)",
    header: "UEGenBindings.h".}
proc `directionalInscatteringLuminance`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `directionalInscatteringLuminance=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr;
    val {.inject.}: FLinearColor): void {.
    importcpp: "setdirectionalInscatteringLuminance(@)",
    header: "UEGenBindings.h".}
proc `fogMaxOpacity`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fogMaxOpacity=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setfogMaxOpacity(@)", header: "UEGenBindings.h".}
proc `startDistance`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `startDistance=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setstartDistance(@)", header: "UEGenBindings.h".}
proc `fogCutoffDistance`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fogCutoffDistance=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setfogCutoffDistance(@)", header: "UEGenBindings.h".}
proc `bEnableVolumetricFog`*(obj {.inject.}: UExponentialHeightFogComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableVolumetricFog=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                              val {.inject.}: bool): void {.
    importcpp: "setbEnableVolumetricFog(@)", header: "UEGenBindings.h".}
proc `volumetricFogScatteringDistribution`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricFogScatteringDistribution=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setvolumetricFogScatteringDistribution(@)",
    header: "UEGenBindings.h".}
proc `volumetricFogAlbedo`*(obj {.inject.}: UExponentialHeightFogComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricFogAlbedo=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                             val {.inject.}: FColor): void {.
    importcpp: "setvolumetricFogAlbedo(@)", header: "UEGenBindings.h".}
proc `volumetricFogEmissive`*(obj {.inject.}: UExponentialHeightFogComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricFogEmissive=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                               val {.inject.}: FLinearColor): void {.
    importcpp: "setvolumetricFogEmissive(@)", header: "UEGenBindings.h".}
proc `volumetricFogExtinctionScale`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricFogExtinctionScale=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setvolumetricFogExtinctionScale(@)", header: "UEGenBindings.h".}
proc `volumetricFogDistance`*(obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricFogDistance=`*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setvolumetricFogDistance(@)", header: "UEGenBindings.h".}
proc `volumetricFogStaticLightingScatteringIntensity`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricFogStaticLightingScatteringIntensity=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setvolumetricFogStaticLightingScatteringIntensity(@)",
    header: "UEGenBindings.h".}
proc `bOverrideLightColorsWithFogInscatteringColors`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideLightColorsWithFogInscatteringColors=`*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; val {.inject.}: bool): void {.
    importcpp: "setbOverrideLightColorsWithFogInscatteringColors(@)",
    header: "UEGenBindings.h".}
proc setVolumetricFogScatteringDistribution*(
    obj {.inject.}: UExponentialHeightFogComponentPtr;
    newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setVolumetricFogExtinctionScale*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                      newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVolumetricFogEmissive*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                               newValue {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVolumetricFogDistance*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                               newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVolumetricFogAlbedo*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                             newValue {.inject.}: FColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVolumetricFog*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                       bNewValue {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setStartDistance*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                       value {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setNonDirectionalInscatteringColorDistance*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInscatteringTextureTint*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                 value {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInscatteringColorCubemapAngle*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                       value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInscatteringColorCubemap*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                  value {.inject.}: UTextureCubePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFullyDirectionalInscatteringColorDistance*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFogMaxOpacity*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                       value {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setFogInscatteringColor*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                              value {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFogHeightFalloff*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                          value {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setFogDensity*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                    value {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setFogCutoffDistance*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                           value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDirectionalInscatteringStartDistance*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDirectionalInscatteringExponent*(
    obj {.inject.}: UExponentialHeightFogComponentPtr; value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDirectionalInscatteringColor*(obj {.inject.}: UExponentialHeightFogComponentPtr;
                                      value {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSpeed`*(obj {.inject.}: UFloatingPawnMovementPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSpeed=`*(obj {.inject.}: UFloatingPawnMovementPtr;
                  val {.inject.}: float32): void {.importcpp: "setmaxSpeed(@)",
    header: "UEGenBindings.h".}
proc `acceleration`*(obj {.inject.}: UFloatingPawnMovementPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `acceleration=`*(obj {.inject.}: UFloatingPawnMovementPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setacceleration(@)", header: "UEGenBindings.h".}
proc `deceleration`*(obj {.inject.}: UFloatingPawnMovementPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `deceleration=`*(obj {.inject.}: UFloatingPawnMovementPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setdeceleration(@)", header: "UEGenBindings.h".}
proc `turningBoost`*(obj {.inject.}: UFloatingPawnMovementPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `turningBoost=`*(obj {.inject.}: UFloatingPawnMovementPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setturningBoost(@)", header: "UEGenBindings.h".}
proc `sourceFilename`*(obj {.inject.}: UFontFacePtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceFilename=`*(obj {.inject.}: UFontFacePtr; val {.inject.}: FString): void {.
    importcpp: "setsourceFilename(@)", header: "UEGenBindings.h".}
proc `hinting`*(obj {.inject.}: UFontFacePtr): EFontHinting {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `hinting=`*(obj {.inject.}: UFontFacePtr; val {.inject.}: EFontHinting): void {.
    importcpp: "sethinting(@)", header: "UEGenBindings.h".}
proc `loadingPolicy`*(obj {.inject.}: UFontFacePtr): EFontLoadingPolicy {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `loadingPolicy=`*(obj {.inject.}: UFontFacePtr;
                       val {.inject.}: EFontLoadingPolicy): void {.
    importcpp: "setloadingPolicy(@)", header: "UEGenBindings.h".}
proc `layoutMethod`*(obj {.inject.}: UFontFacePtr): EFontLayoutMethod {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `layoutMethod=`*(obj {.inject.}: UFontFacePtr;
                      val {.inject.}: EFontLayoutMethod): void {.
    importcpp: "setlayoutMethod(@)", header: "UEGenBindings.h".}
proc `attenuation`*(obj {.inject.}: UForceFeedbackAttenuationPtr): FForceFeedbackAttenuationSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuation=`*(obj {.inject.}: UForceFeedbackAttenuationPtr;
                     val {.inject.}: FForceFeedbackAttenuationSettings): void {.
    importcpp: "setattenuation(@)", header: "UEGenBindings.h".}
proc `forceFeedbackEffect`*(obj {.inject.}: UForceFeedbackComponentPtr): TObjectPtr[
    UForceFeedbackEffect] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forceFeedbackEffect=`*(obj {.inject.}: UForceFeedbackComponentPtr;
                             val {.inject.}: TObjectPtr[UForceFeedbackEffect]): void {.
    importcpp: "setforceFeedbackEffect(@)", header: "UEGenBindings.h".}
proc `bLooping`*(obj {.inject.}: UForceFeedbackComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bLooping=`*(obj {.inject.}: UForceFeedbackComponentPtr;
                  val {.inject.}: uint8): void {.importcpp: "setbLooping(@)",
    header: "UEGenBindings.h".}
proc `bIgnoreTimeDilation`*(obj {.inject.}: UForceFeedbackComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIgnoreTimeDilation=`*(obj {.inject.}: UForceFeedbackComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreTimeDilation(@)", header: "UEGenBindings.h".}
proc `bOverrideAttenuation`*(obj {.inject.}: UForceFeedbackComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideAttenuation=`*(obj {.inject.}: UForceFeedbackComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbOverrideAttenuation(@)", header: "UEGenBindings.h".}
proc `intensityMultiplier`*(obj {.inject.}: UForceFeedbackComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `intensityMultiplier=`*(obj {.inject.}: UForceFeedbackComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setintensityMultiplier(@)", header: "UEGenBindings.h".}
proc `attenuationSettings`*(obj {.inject.}: UForceFeedbackComponentPtr): TObjectPtr[
    UForceFeedbackAttenuation] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuationSettings=`*(obj {.inject.}: UForceFeedbackComponentPtr;
    val {.inject.}: TObjectPtr[UForceFeedbackAttenuation]): void {.
    importcpp: "setattenuationSettings(@)", header: "UEGenBindings.h".}
proc `attenuationOverrides`*(obj {.inject.}: UForceFeedbackComponentPtr): FForceFeedbackAttenuationSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuationOverrides=`*(obj {.inject.}: UForceFeedbackComponentPtr;
                              val {.inject.}: FForceFeedbackAttenuationSettings): void {.
    importcpp: "setattenuationOverrides(@)", header: "UEGenBindings.h".}
proc stop*(obj {.inject.}: UForceFeedbackComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIntensityMultiplier*(obj {.inject.}: UForceFeedbackComponentPtr;
                             newIntensityMultiplier {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setForceFeedbackEffect*(obj {.inject.}: UForceFeedbackComponentPtr;
    newForceFeedbackEffect {.inject.}: UForceFeedbackEffectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc play*(obj {.inject.}: UForceFeedbackComponentPtr;
           startTime {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc bP_GetAttenuationSettingsToApply*(obj {.inject.}: UForceFeedbackComponentPtr;
    outAttenuationSettings {.inject.}: var FForceFeedbackAttenuationSettings): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc adjustAttenuation*(obj {.inject.}: UForceFeedbackComponentPtr;
    inAttenuationSettings {.inject.}: var FForceFeedbackAttenuationSettings): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `duration`*(obj {.inject.}: UForceFeedbackEffectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `duration=`*(obj {.inject.}: UForceFeedbackEffectPtr;
                  val {.inject.}: float32): void {.importcpp: "setduration(@)",
    header: "UEGenBindings.h".}
proc unRetainAllSoundsInSoundClass*(inSoundClass {.inject.}: USoundClassPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unloadStreamLevelBySoftObjectPtr*(worldContextObject {.inject.}: UObjectPtr;
                                       level {.inject.}: TSoftObjectPtr[UWorld];
                                       latentInfo {.inject.}: FLatentActionInfo;
                                       bShouldBlockOnUnload {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unloadStreamLevel*(worldContextObject {.inject.}: UObjectPtr;
                        levelName {.inject.}: FName;
                        latentInfo {.inject.}: FLatentActionInfo;
                        bShouldBlockOnUnload {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc suggestProjectileVelocity_CustomArc*(
    worldContextObject {.inject.}: UObjectPtr;
    outLaunchVelocity {.inject.}: var FVector; startPos {.inject.}: FVector;
    endPos {.inject.}: FVector; overrideGravityZ {.inject.}: float32;
    arcParam {.inject.}: float32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc spawnSoundAttached*(sound {.inject.}: USoundBasePtr;
                         attachToComponent {.inject.}: USceneComponentPtr;
                         attachPointName {.inject.}: FName;
                         location {.inject.}: FVector;
                         rotation {.inject.}: FRotator;
                         locationType {.inject.}: EAttachLocation::Type;
                         bStopWhenAttachedToDestroyed {.inject.}: bool;
                         volumeMultiplier {.inject.}: float32;
                         pitchMultiplier {.inject.}: float32;
                         startTime {.inject.}: float32;
                         attenuationSettings {.inject.}: USoundAttenuationPtr;
                         concurrencySettings {.inject.}: USoundConcurrencyPtr;
                         bAutoDestroy {.inject.}: bool): UAudioComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnSoundAtLocation*(worldContextObject {.inject.}: UObjectPtr;
                           sound {.inject.}: USoundBasePtr;
                           location {.inject.}: FVector;
                           rotation {.inject.}: FRotator;
                           volumeMultiplier {.inject.}: float32;
                           pitchMultiplier {.inject.}: float32;
                           startTime {.inject.}: float32;
                           attenuationSettings {.inject.}: USoundAttenuationPtr;
                           concurrencySettings {.inject.}: USoundConcurrencyPtr;
                           bAutoDestroy {.inject.}: bool): UAudioComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnSound2D*(worldContextObject {.inject.}: UObjectPtr;
                   sound {.inject.}: USoundBasePtr;
                   volumeMultiplier {.inject.}: float32;
                   pitchMultiplier {.inject.}: float32;
                   startTime {.inject.}: float32;
                   concurrencySettings {.inject.}: USoundConcurrencyPtr;
                   bPersistAcrossLevelTransition {.inject.}: bool;
                   bAutoDestroy {.inject.}: bool): UAudioComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnObject*(objectClass {.inject.}: TSubclassOf[UObject];
                  outer {.inject.}: UObjectPtr): UObjectPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnForceFeedbackAttached*(forceFeedbackEffect {.inject.}: UForceFeedbackEffectPtr;
    attachToComponent {.inject.}: USceneComponentPtr;
                                 attachPointName {.inject.}: FName;
                                 location {.inject.}: FVector;
                                 rotation {.inject.}: FRotator;
                                 locationType {.inject.}: EAttachLocation::Type;
                                 bStopWhenAttachedToDestroyed {.inject.}: bool;
                                 bLooping {.inject.}: bool;
                                 intensityMultiplier {.inject.}: float32;
                                 startTime {.inject.}: float32;
    attenuationSettings {.inject.}: UForceFeedbackAttenuationPtr;
                                 bAutoDestroy {.inject.}: bool): UForceFeedbackComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnForceFeedbackAtLocation*(worldContextObject {.inject.}: UObjectPtr;
    forceFeedbackEffect {.inject.}: UForceFeedbackEffectPtr;
                                   location {.inject.}: FVector;
                                   rotation {.inject.}: FRotator;
                                   bLooping {.inject.}: bool;
                                   intensityMultiplier {.inject.}: float32;
                                   startTime {.inject.}: float32;
    attenuationSettings {.inject.}: UForceFeedbackAttenuationPtr;
                                   bAutoDestroy {.inject.}: bool): UForceFeedbackComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnEmitterAttached*(emitterTemplate {.inject.}: UParticleSystemPtr;
                           attachToComponent {.inject.}: USceneComponentPtr;
                           attachPointName {.inject.}: FName;
                           location {.inject.}: FVector;
                           rotation {.inject.}: FRotator;
                           scale {.inject.}: FVector;
                           locationType {.inject.}: EAttachLocation::Type;
                           bAutoDestroy {.inject.}: bool;
                           poolingMethod {.inject.}: EPSCPoolMethod;
                           bAutoActivate {.inject.}: bool): UParticleSystemComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnEmitterAtLocation*(worldContextObject {.inject.}: UObjectPtr;
                             emitterTemplate {.inject.}: UParticleSystemPtr;
                             location {.inject.}: FVector;
                             rotation {.inject.}: FRotator;
                             scale {.inject.}: FVector;
                             bAutoDestroy {.inject.}: bool;
                             poolingMethod {.inject.}: EPSCPoolMethod;
                             bAutoActivateSystem {.inject.}: bool): UParticleSystemComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnDialogueAttached*(dialogue {.inject.}: UDialogueWavePtr;
                            context {.inject.}: var FDialogueContext;
                            attachToComponent {.inject.}: USceneComponentPtr;
                            attachPointName {.inject.}: FName;
                            location {.inject.}: FVector;
                            rotation {.inject.}: FRotator;
                            locationType {.inject.}: EAttachLocation::Type;
                            bStopWhenAttachedToDestroyed {.inject.}: bool;
                            volumeMultiplier {.inject.}: float32;
                            pitchMultiplier {.inject.}: float32;
                            startTime {.inject.}: float32;
    attenuationSettings {.inject.}: USoundAttenuationPtr;
                            bAutoDestroy {.inject.}: bool): UAudioComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnDialogueAtLocation*(worldContextObject {.inject.}: UObjectPtr;
                              dialogue {.inject.}: UDialogueWavePtr;
                              context {.inject.}: var FDialogueContext;
                              location {.inject.}: FVector;
                              rotation {.inject.}: FRotator;
                              volumeMultiplier {.inject.}: float32;
                              pitchMultiplier {.inject.}: float32;
                              startTime {.inject.}: float32;
    attenuationSettings {.inject.}: USoundAttenuationPtr;
                              bAutoDestroy {.inject.}: bool): UAudioComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnDialogue2D*(worldContextObject {.inject.}: UObjectPtr;
                      dialogue {.inject.}: UDialogueWavePtr;
                      context {.inject.}: var FDialogueContext;
                      volumeMultiplier {.inject.}: float32;
                      pitchMultiplier {.inject.}: float32;
                      startTime {.inject.}: float32;
                      bAutoDestroy {.inject.}: bool): UAudioComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnDecalAttached*(decalMaterial {.inject.}: UMaterialInterfacePtr;
                         decalSize {.inject.}: FVector;
                         attachToComponent {.inject.}: USceneComponentPtr;
                         attachPointName {.inject.}: FName;
                         location {.inject.}: FVector;
                         rotation {.inject.}: FRotator;
                         locationType {.inject.}: EAttachLocation::Type;
                         lifeSpan {.inject.}: float32): UDecalComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc spawnDecalAtLocation*(worldContextObject {.inject.}: UObjectPtr;
                           decalMaterial {.inject.}: UMaterialInterfacePtr;
                           decalSize {.inject.}: FVector;
                           location {.inject.}: FVector;
                           rotation {.inject.}: FRotator;
                           lifeSpan {.inject.}: float32): UDecalComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWorldOriginLocation*(worldContextObject {.inject.}: UObjectPtr;
                             newLocation {.inject.}: FIntVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setViewportMouseCaptureMode*(worldContextObject {.inject.}: UObjectPtr;
                                  mouseCaptureMode {.inject.}: EMouseCaptureMode): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSubtitlesEnabled*(bEnabled {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSoundMixClassOverride*(worldContextObject {.inject.}: UObjectPtr;
                               inSoundMixModifier {.inject.}: USoundMixPtr;
                               inSoundClass {.inject.}: USoundClassPtr;
                               volume {.inject.}: float32;
                               pitch {.inject.}: float32;
                               fadeInTime {.inject.}: float32;
                               bApplyToChildren {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSoundClassDistanceScale*(worldContextObject {.inject.}: UObjectPtr;
                                 soundClass {.inject.}: USoundClassPtr;
                                 distanceAttenuationScale {.inject.}: float32;
                                 timeSec {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlayerControllerID*(player {.inject.}: APlayerControllerPtr;
                            controllerId {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaxAudioChannelsScaled*(worldContextObject {.inject.}: UObjectPtr;
                                maxChannelCountScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGlobalTimeDilation*(worldContextObject {.inject.}: UObjectPtr;
                            timeDilation {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGlobalPitchModulation*(worldContextObject {.inject.}: UObjectPtr;
                               pitchModulation {.inject.}: float32;
                               timeSec {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGlobalListenerFocusParameters*(worldContextObject {.inject.}: UObjectPtr;
                                       focusAzimuthScale {.inject.}: float32;
                                       nonFocusAzimuthScale {.inject.}: float32;
                                       focusDistanceScale {.inject.}: float32;
    nonFocusDistanceScale {.inject.}: float32;
                                       focusVolumeScale {.inject.}: float32;
                                       nonFocusVolumeScale {.inject.}: float32;
                                       focusPriorityScale {.inject.}: float32;
                                       nonFocusPriorityScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGamePaused*(worldContextObject {.inject.}: UObjectPtr;
                    bPaused {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setForceDisableSplitscreen*(worldContextObject {.inject.}: UObjectPtr;
                                 bDisable {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEnableWorldRendering*(worldContextObject {.inject.}: UObjectPtr;
                              bEnable {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBaseSoundMix*(worldContextObject {.inject.}: UObjectPtr;
                      inSoundMix {.inject.}: USoundMixPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc saveGameToSlot*(saveGameObject {.inject.}: USaveGamePtr;
                     slotName {.inject.}: FString; userIndex {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removePlayer*(player {.inject.}: APlayerControllerPtr;
                   bDestroyPawn {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc rebaseZeroOriginOntoLocal*(worldContextObject {.inject.}: UObjectPtr;
                                worldLocation {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc rebaseLocalOriginOntoZero*(worldContextObject {.inject.}: UObjectPtr;
                                worldLocation {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pushSoundMixModifier*(worldContextObject {.inject.}: UObjectPtr;
                           inSoundMixModifier {.inject.}: USoundMixPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc projectWorldToScreen*(player {.inject.}: APlayerControllerPtr;
                           worldPosition {.inject.}: var FVector;
                           screenPosition {.inject.}: var FVector2D;
                           bPlayerViewportRelative {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc primeSound*(inSound {.inject.}: USoundBasePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc primeAllSoundsInSoundClass*(inSoundClass {.inject.}: USoundClassPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc popSoundMixModifier*(worldContextObject {.inject.}: UObjectPtr;
                          inSoundMixModifier {.inject.}: USoundMixPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playWorldCameraShake*(worldContextObject {.inject.}: UObjectPtr;
                           shake {.inject.}: TSubclassOf[UCameraShakeBase];
                           epicenter {.inject.}: FVector;
                           innerRadius {.inject.}: float32;
                           outerRadius {.inject.}: float32;
                           falloff {.inject.}: float32;
                           bOrientShakeTowardsEpicenter {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playSoundAtLocation*(worldContextObject {.inject.}: UObjectPtr;
                          sound {.inject.}: USoundBasePtr;
                          location {.inject.}: FVector;
                          rotation {.inject.}: FRotator;
                          volumeMultiplier {.inject.}: float32;
                          pitchMultiplier {.inject.}: float32;
                          startTime {.inject.}: float32;
                          attenuationSettings {.inject.}: USoundAttenuationPtr;
                          concurrencySettings {.inject.}: USoundConcurrencyPtr;
                          owningActor {.inject.}: AActorPtr;
                          initialParams {.inject.}: UInitialActiveSoundParamsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playSound2D*(worldContextObject {.inject.}: UObjectPtr;
                  sound {.inject.}: USoundBasePtr;
                  volumeMultiplier {.inject.}: float32;
                  pitchMultiplier {.inject.}: float32;
                  startTime {.inject.}: float32;
                  concurrencySettings {.inject.}: USoundConcurrencyPtr;
                  owningActor {.inject.}: AActorPtr; bIsUISound {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playDialogueAtLocation*(worldContextObject {.inject.}: UObjectPtr;
                             dialogue {.inject.}: UDialogueWavePtr;
                             context {.inject.}: var FDialogueContext;
                             location {.inject.}: FVector;
                             rotation {.inject.}: FRotator;
                             volumeMultiplier {.inject.}: float32;
                             pitchMultiplier {.inject.}: float32;
                             startTime {.inject.}: float32;
    attenuationSettings {.inject.}: USoundAttenuationPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playDialogue2D*(worldContextObject {.inject.}: UObjectPtr;
                     dialogue {.inject.}: UDialogueWavePtr;
                     context {.inject.}: var FDialogueContext;
                     volumeMultiplier {.inject.}: float32;
                     pitchMultiplier {.inject.}: float32;
                     startTime {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc parseOption*(options {.inject.}: FString; key {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc openLevelBySoftObjectPtr*(worldContextObject {.inject.}: UObjectPtr;
                               level {.inject.}: TSoftObjectPtr[UWorld];
                               bAbsolute {.inject.}: bool;
                               options {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc openLevel*(worldContextObject {.inject.}: UObjectPtr;
                levelName {.inject.}: FName; bAbsolute {.inject.}: bool;
                options {.inject.}: FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeHitResult*(bBlockingHit {.inject.}: bool;
                    bInitialOverlap {.inject.}: bool; time {.inject.}: float32;
                    distance {.inject.}: float32; location {.inject.}: FVector;
                    impactPoint {.inject.}: FVector; normal {.inject.}: FVector;
                    impactNormal {.inject.}: FVector;
                    physMat {.inject.}: UPhysicalMaterialPtr;
                    hitActor {.inject.}: AActorPtr;
                    hitComponent {.inject.}: UPrimitiveComponentPtr;
                    hitBoneName {.inject.}: FName; boneName {.inject.}: FName;
                    hitItem {.inject.}: int32; elementIndex {.inject.}: int32;
                    faceIndex {.inject.}: int32; traceStart {.inject.}: FVector;
                    traceEnd {.inject.}: FVector): FHitResult {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadStreamLevelBySoftObjectPtr*(worldContextObject {.inject.}: UObjectPtr;
                                     level {.inject.}: TSoftObjectPtr[UWorld];
                                     bMakeVisibleAfterLoad {.inject.}: bool;
                                     bShouldBlockOnLoad {.inject.}: bool;
                                     latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadStreamLevel*(worldContextObject {.inject.}: UObjectPtr;
                      levelName {.inject.}: FName;
                      bMakeVisibleAfterLoad {.inject.}: bool;
                      bShouldBlockOnLoad {.inject.}: bool;
                      latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadGameFromSlot*(slotName {.inject.}: FString; userIndex {.inject.}: int32): USaveGamePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isSplitscreenForceDisabled*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isGamePaused*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasOption*(options {.inject.}: FString; inKey {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasLaunchOption*(optionToCheck {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc grassOverlappingSphereCount*(worldContextObject {.inject.}: UObjectPtr;
                                  staticMesh {.inject.}: UStaticMeshPtr;
                                  centerPosition {.inject.}: FVector;
                                  radius {.inject.}: float32): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldOriginLocation*(worldContextObject {.inject.}: UObjectPtr): FIntVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldDeltaSeconds*(worldContextObject {.inject.}: UObjectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getViewProjectionMatrix*(desiredView {.inject.}: FMinimalViewInfo;
                              viewMatrix {.inject.}: var FMatrix;
                              projectionMatrix {.inject.}: var FMatrix;
                              viewProjectionMatrix {.inject.}: var FMatrix): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getViewportMouseCaptureMode*(worldContextObject {.inject.}: UObjectPtr): EMouseCaptureMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnpausedTimeSeconds*(worldContextObject {.inject.}: UObjectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimeSeconds*(worldContextObject {.inject.}: UObjectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSurfaceType*(hit {.inject.}: var FHitResult): EPhysicalSurface {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStreamingLevel*(worldContextObject {.inject.}: UObjectPtr;
                        packageName {.inject.}: FName): ULevelStreamingPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRealTimeSeconds*(worldContextObject {.inject.}: UObjectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerStateFromUniqueNetId*(worldContextObject {.inject.}: UObjectPtr;
                                    uniqueId {.inject.}: var FUniqueNetIdRepl): APlayerStatePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerState*(worldContextObject {.inject.}: UObjectPtr;
                     playerStateIndex {.inject.}: int32): APlayerStatePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerPawn*(worldContextObject {.inject.}: UObjectPtr;
                    playerIndex {.inject.}: int32): APawnPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerControllerID*(player {.inject.}: APlayerControllerPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerControllerFromID*(worldContextObject {.inject.}: UObjectPtr;
                                controllerID {.inject.}: int32): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerController*(worldContextObject {.inject.}: UObjectPtr;
                          playerIndex {.inject.}: int32): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerCharacter*(worldContextObject {.inject.}: UObjectPtr;
                         playerIndex {.inject.}: int32): ACharacterPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerCameraManager*(worldContextObject {.inject.}: UObjectPtr;
                             playerIndex {.inject.}: int32): APlayerCameraManagerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlatformName*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getObjectClass*(`object` {.inject.}: UObjectPtr): UClassPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumPlayerStates*(worldContextObject {.inject.}: UObjectPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumPlayerControllers*(worldContextObject {.inject.}: UObjectPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumLocalPlayerControllers*(worldContextObject {.inject.}: UObjectPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaxAudioChannelCount*(worldContextObject {.inject.}: UObjectPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getKeyValue*(pair {.inject.}: FString; key {.inject.}: var FString;
                  value {.inject.}: var FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getIntOption*(options {.inject.}: FString; key {.inject.}: FString;
                   defaultValue {.inject.}: int32): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getGlobalTimeDilation*(worldContextObject {.inject.}: UObjectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameState*(worldContextObject {.inject.}: UObjectPtr): AGameStateBasePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameMode*(worldContextObject {.inject.}: UObjectPtr): AGameModeBasePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameInstance*(worldContextObject {.inject.}: UObjectPtr): UGameInstancePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEnableWorldRendering*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentReverbEffect*(worldContextObject {.inject.}: UObjectPtr): UReverbEffectPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentLevelName*(worldContextObject {.inject.}: UObjectPtr;
                          bRemovePrefixString {.inject.}: bool): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClosestListenerLocation*(worldContextObject {.inject.}: UObjectPtr;
                                 location {.inject.}: var FVector;
                                 maximumRange {.inject.}: float32;
                                 bAllowAttenuationOverride {.inject.}: bool;
                                 listenerPosition {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAudioTimeSeconds*(worldContextObject {.inject.}: UObjectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllActorsWithTag*(worldContextObject {.inject.}: UObjectPtr;
                          tag {.inject.}: FName;
                          outActors {.inject.}: var TArray[AActorPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllActorsWithInterface*(worldContextObject {.inject.}: UObjectPtr;
                                `interface` {.inject.}: TSubclassOf[UInterface];
                                outActors {.inject.}: var TArray[AActorPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllActorsOfClassWithTag*(worldContextObject {.inject.}: UObjectPtr;
                                 actorClass {.inject.}: TSubclassOf[AActor];
                                 tag {.inject.}: FName;
                                 outActors {.inject.}: var TArray[AActorPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAllActorsOfClass*(worldContextObject {.inject.}: UObjectPtr;
                          actorClass {.inject.}: TSubclassOf[AActor];
                          outActors {.inject.}: var TArray[AActorPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorOfClass*(worldContextObject {.inject.}: UObjectPtr;
                      actorClass {.inject.}: TSubclassOf[AActor]): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorArrayBounds*(actors {.inject.}: var TArray[AActorPtr];
                          bOnlyCollidingComponents {.inject.}: bool;
                          center {.inject.}: var FVector;
                          boxExtent {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorArrayAverageLocation*(actors {.inject.}: var TArray[AActorPtr]): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAccurateRealTime*(seconds {.inject.}: var int32;
                          partialSeconds {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc flushLevelStreaming*(worldContextObject {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc finishSpawningActor*(actor {.inject.}: AActorPtr;
                          spawnTransform {.inject.}: var FTransform): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findNearestActor*(origin {.inject.}: FVector;
                       actorsToCheck {.inject.}: var TArray[AActorPtr];
                       distance {.inject.}: var float32): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findCollisionUV*(hit {.inject.}: var FHitResult;
                      uVChannel {.inject.}: int32; uV {.inject.}: var FVector2D): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enableLiveStreaming*(enable {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc doesSaveGameExist*(slotName {.inject.}: FString; userIndex {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deprojectScreenToWorld*(player {.inject.}: APlayerControllerPtr;
                             screenPosition {.inject.}: var FVector2D;
                             worldPosition {.inject.}: var FVector;
                             worldDirection {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deleteGameInSlot*(slotName {.inject.}: FString; userIndex {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deactivateReverbEffect*(worldContextObject {.inject.}: UObjectPtr;
                             tagName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createSound2D*(worldContextObject {.inject.}: UObjectPtr;
                    sound {.inject.}: USoundBasePtr;
                    volumeMultiplier {.inject.}: float32;
                    pitchMultiplier {.inject.}: float32;
                    startTime {.inject.}: float32;
                    concurrencySettings {.inject.}: USoundConcurrencyPtr;
                    bPersistAcrossLevelTransition {.inject.}: bool;
                    bAutoDestroy {.inject.}: bool): UAudioComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createSaveGameObject*(saveGameClass {.inject.}: TSubclassOf[USaveGame]): USaveGamePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createPlayer*(worldContextObject {.inject.}: UObjectPtr;
                   controllerId {.inject.}: int32;
                   bSpawnPlayerController {.inject.}: bool): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearSoundMixModifiers*(worldContextObject {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearSoundMixClassOverride*(worldContextObject {.inject.}: UObjectPtr;
                                 inSoundMixModifier {.inject.}: USoundMixPtr;
                                 inSoundClass {.inject.}: USoundClassPtr;
                                 fadeOutTime {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc cancelAsyncLoading*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc breakHitResult*(hit {.inject.}: var FHitResult;
                     bBlockingHit {.inject.}: var bool;
                     bInitialOverlap {.inject.}: var bool;
                     time {.inject.}: var float32;
                     distance {.inject.}: var float32;
                     location {.inject.}: var FVector;
                     impactPoint {.inject.}: var FVector;
                     normal {.inject.}: var FVector;
                     impactNormal {.inject.}: var FVector;
                     physMat {.inject.}: var UPhysicalMaterialPtr;
                     hitActor {.inject.}: var AActorPtr;
                     hitComponent {.inject.}: var UPrimitiveComponentPtr;
                     hitBoneName {.inject.}: var FName;
                     boneName {.inject.}: var FName;
                     hitItem {.inject.}: var int32;
                     elementIndex {.inject.}: var int32;
                     faceIndex {.inject.}: var int32;
                     traceStart {.inject.}: var FVector;
                     traceEnd {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc blueprintSuggestProjectileVelocity*(
    worldContextObject {.inject.}: UObjectPtr;
    tossVelocity {.inject.}: var FVector; startLocation {.inject.}: FVector;
    endLocation {.inject.}: FVector; launchSpeed {.inject.}: float32;
    overrideGravityZ {.inject.}: float32;
    traceOption {.inject.}: ESuggestProjVelocityTraceOption::Type;
    collisionRadius {.inject.}: float32; bFavorHighArc {.inject.}: bool;
    bDrawDebug {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc blueprint_PredictProjectilePath_ByTraceChannel*(
    worldContextObject {.inject.}: UObjectPtr; outHit {.inject.}: var FHitResult;
    outPathPositions {.inject.}: var TArray[FVector];
    outLastTraceDestination {.inject.}: var FVector;
    startPos {.inject.}: FVector; launchVelocity {.inject.}: FVector;
    bTracePath {.inject.}: bool; projectileRadius {.inject.}: float32;
    traceChannel {.inject.}: ECollisionChannel; bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr];
    drawDebugType {.inject.}: EDrawDebugTrace::Type;
    drawDebugTime {.inject.}: float32; simFrequency {.inject.}: float32;
    maxSimTime {.inject.}: float32; overrideGravityZ {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc blueprint_PredictProjectilePath_ByObjectType*(
    worldContextObject {.inject.}: UObjectPtr; outHit {.inject.}: var FHitResult;
    outPathPositions {.inject.}: var TArray[FVector];
    outLastTraceDestination {.inject.}: var FVector;
    startPos {.inject.}: FVector; launchVelocity {.inject.}: FVector;
    bTracePath {.inject.}: bool; projectileRadius {.inject.}: float32;
    bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr];
    drawDebugType {.inject.}: EDrawDebugTrace::Type;
    drawDebugTime {.inject.}: float32; simFrequency {.inject.}: float32;
    maxSimTime {.inject.}: float32; overrideGravityZ {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc blueprint_PredictProjectilePath_Advanced*(
    worldContextObject {.inject.}: UObjectPtr;
    predictParams {.inject.}: var FPredictProjectilePathParams;
    predictResult {.inject.}: var FPredictProjectilePathResult): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc beginSpawningActorFromBlueprint*(worldContextObject {.inject.}: UObjectPtr;
                                      blueprint {.inject.}: UBlueprintPtr;
                                      spawnTransform {.inject.}: var FTransform;
                                      bNoCollisionFail {.inject.}: bool): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc beginDeferredActorSpawnFromClass*(worldContextObject {.inject.}: UObjectPtr;
    actorClass {.inject.}: TSubclassOf[AActor]; spawnTransform {.inject.}: var FTransform;
    collisionHandlingOverride {.inject.}: ESpawnActorCollisionHandlingMethod;
                                       owner {.inject.}: AActorPtr): AActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc areSubtitlesEnabled*(): bool {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc areAnyListenersWithinRange*(worldContextObject {.inject.}: UObjectPtr;
                                 location {.inject.}: var FVector;
                                 maximumRange {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyRadialDamageWithFalloff*(worldContextObject {.inject.}: UObjectPtr;
                                   baseDamage {.inject.}: float32;
                                   minimumDamage {.inject.}: float32;
                                   origin {.inject.}: var FVector;
                                   damageInnerRadius {.inject.}: float32;
                                   damageOuterRadius {.inject.}: float32;
                                   damageFalloff {.inject.}: float32;
    damageTypeClass {.inject.}: TSubclassOf[UDamageType]; ignoreActors {.inject.}: var TArray[
    AActorPtr]; damageCauser {.inject.}: AActorPtr;
    instigatedByController {.inject.}: AControllerPtr;
    damagePreventionChannel {.inject.}: ECollisionChannel): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyRadialDamage*(worldContextObject {.inject.}: UObjectPtr;
                        baseDamage {.inject.}: float32;
                        origin {.inject.}: var FVector;
                        damageRadius {.inject.}: float32;
                        damageTypeClass {.inject.}: TSubclassOf[UDamageType];
                        ignoreActors {.inject.}: var TArray[AActorPtr];
                        damageCauser {.inject.}: AActorPtr;
                        instigatedByController {.inject.}: AControllerPtr;
                        bDoFullDamage {.inject.}: bool;
                        damagePreventionChannel {.inject.}: ECollisionChannel): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyPointDamage*(damagedActor {.inject.}: AActorPtr;
                       baseDamage {.inject.}: float32;
                       hitFromDirection {.inject.}: var FVector;
                       hitInfo {.inject.}: var FHitResult;
                       eventInstigator {.inject.}: AControllerPtr;
                       damageCauser {.inject.}: AActorPtr;
                       damageTypeClass {.inject.}: TSubclassOf[UDamageType]): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyDamage*(damagedActor {.inject.}: AActorPtr;
                  baseDamage {.inject.}: float32;
                  eventInstigator {.inject.}: AControllerPtr;
                  damageCauser {.inject.}: AActorPtr;
                  damageTypeClass {.inject.}: TSubclassOf[UDamageType]): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc announceAccessibleString*(announcementString {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc activateReverbEffect*(worldContextObject {.inject.}: UObjectPtr;
                           reverbEffect {.inject.}: UReverbEffectPtr;
                           tagName {.inject.}: FName;
                           priority {.inject.}: float32;
                           volume {.inject.}: float32;
                           fadeTime {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc validateSettings*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc supportsHDRDisplayOutput*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVSyncEnabled*(obj {.inject.}: UGameUserSettingsPtr;
                      bEnable {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setVisualEffectQuality*(obj {.inject.}: UGameUserSettingsPtr;
                             value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setViewDistanceQuality*(obj {.inject.}: UGameUserSettingsPtr;
                             value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setToDefaults*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTextureQuality*(obj {.inject.}: UGameUserSettingsPtr;
                        value {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setShadowQuality*(obj {.inject.}: UGameUserSettingsPtr;
                       value {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setShadingQuality*(obj {.inject.}: UGameUserSettingsPtr;
                        value {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setScreenResolution*(obj {.inject.}: UGameUserSettingsPtr;
                          resolution {.inject.}: FIntPoint): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setResolutionScaleValueEx*(obj {.inject.}: UGameUserSettingsPtr;
                                newScaleValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setResolutionScaleValue*(obj {.inject.}: UGameUserSettingsPtr;
                              newScaleValue {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setResolutionScaleNormalized*(obj {.inject.}: UGameUserSettingsPtr;
                                   newScaleNormalized {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReflectionQuality*(obj {.inject.}: UGameUserSettingsPtr;
                           value {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPostProcessingQuality*(obj {.inject.}: UGameUserSettingsPtr;
                               value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOverallScalabilityLevel*(obj {.inject.}: UGameUserSettingsPtr;
                                 value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGlobalIlluminationQuality*(obj {.inject.}: UGameUserSettingsPtr;
                                   value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFullscreenMode*(obj {.inject.}: UGameUserSettingsPtr;
                        inFullscreenMode {.inject.}: EWindowMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFrameRateLimit*(obj {.inject.}: UGameUserSettingsPtr;
                        newLimit {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFoliageQuality*(obj {.inject.}: UGameUserSettingsPtr;
                        value {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setDynamicResolutionEnabled*(obj {.inject.}: UGameUserSettingsPtr;
                                  bEnable {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBenchmarkFallbackValues*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAudioQualityLevel*(obj {.inject.}: UGameUserSettingsPtr;
                           qualityLevel {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAntiAliasingQuality*(obj {.inject.}: UGameUserSettingsPtr;
                             value {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc saveSettings*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc runHardwareBenchmark*(obj {.inject.}: UGameUserSettingsPtr;
                           workScale {.inject.}: int32;
                           cPUMultiplier {.inject.}: float32;
                           gPUMultiplier {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc revertVideoMode*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetToCurrentSettings*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadSettings*(obj {.inject.}: UGameUserSettingsPtr;
                   bForceReload {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isVSyncEnabled*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isVSyncDirty*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isScreenResolutionDirty*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isHDREnabled*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isFullscreenModeDirty*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isDynamicResolutionEnabled*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isDynamicResolutionDirty*(obj {.inject.}: UGameUserSettingsPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isDirty*(obj {.inject.}: UGameUserSettingsPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getVisualEffectQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getViewDistanceQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTextureQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSyncInterval*(): int32 {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getShadowQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getShadingQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScreenResolution*(obj {.inject.}: UGameUserSettingsPtr): FIntPoint {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getResolutionScaleNormalized*(obj {.inject.}: UGameUserSettingsPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getResolutionScaleInformationEx*(obj {.inject.}: UGameUserSettingsPtr;
    currentScaleNormalized {.inject.}: var float32;
                                      currentScaleValue {.inject.}: var float32;
                                      minScaleValue {.inject.}: var float32;
                                      maxScaleValue {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getResolutionScaleInformation*(obj {.inject.}: UGameUserSettingsPtr;
    currentScaleNormalized {.inject.}: var float32;
                                    currentScaleValue {.inject.}: var int32;
                                    minScaleValue {.inject.}: var int32;
                                    maxScaleValue {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getReflectionQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRecommendedResolutionScale*(obj {.inject.}: UGameUserSettingsPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPreferredFullscreenMode*(obj {.inject.}: UGameUserSettingsPtr): EWindowMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPostProcessingQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOverallScalabilityLevel*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLastConfirmedScreenResolution*(obj {.inject.}: UGameUserSettingsPtr): FIntPoint {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLastConfirmedFullscreenMode*(obj {.inject.}: UGameUserSettingsPtr): EWindowMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGlobalIlluminationQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameUserSettings*(): UGameUserSettingsPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getFullscreenMode*(obj {.inject.}: UGameUserSettingsPtr): EWindowMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFrameRateLimit*(obj {.inject.}: UGameUserSettingsPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFramePace*(): int32 {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFoliageQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDesktopResolution*(obj {.inject.}: UGameUserSettingsPtr): FIntPoint {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultWindowPosition*(): FIntPoint {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getDefaultWindowMode*(): EWindowMode::Type {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getDefaultResolutionScale*(obj {.inject.}: UGameUserSettingsPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultResolution*(): FIntPoint {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getCurrentHDRDisplayNits*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAudioQualityLevel*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAntiAliasingQuality*(obj {.inject.}: UGameUserSettingsPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enableHDRDisplayOutput*(obj {.inject.}: UGameUserSettingsPtr;
                             bEnable {.inject.}: bool;
                             displayNits {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc confirmVideoMode*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applySettings*(obj {.inject.}: UGameUserSettingsPtr;
                    bCheckForCommandLineOverrides {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyResolutionSettings*(obj {.inject.}: UGameUserSettingsPtr;
                              bCheckForCommandLineOverrides {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyNonResolutionSettings*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyHardwareBenchmarkResults*(obj {.inject.}: UGameUserSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spotLightComponent`*(obj {.inject.}: ASpotLightPtr): TObjectPtr[
    USpotLightComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spotLightComponent=`*(obj {.inject.}: ASpotLightPtr;
                            val {.inject.}: TObjectPtr[USpotLightComponent]): void {.
    importcpp: "setspotLightComponent(@)", header: "UEGenBindings.h".}
proc setOuterConeAngle*(obj {.inject.}: ASpotLightPtr;
                        newOuterConeAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInnerConeAngle*(obj {.inject.}: ASpotLightPtr;
                        newInnerConeAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopPerformanceSnapshots*(): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc startPerformanceSnapshots*(): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc logPerformanceSnapshot*(snapshotTitle {.inject.}: FString;
                             bResetStats {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc updateCurveNamesFromSkeleton*(obj {.inject.}: UAnimationDataControllerPtr;
                                   skeleton {.inject.}: USkeletonPtr;
    supportedCurveType {.inject.}: ERawCurveTrackTypes;
                                   bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTransformCurveKeys*(obj {.inject.}: UAnimationDataControllerPtr;
                            curveId {.inject.}: var FAnimationCurveIdentifier;
                            transformValues {.inject.}: var TArray[FTransform];
                            timeKeys {.inject.}: var TArray[float];
                            bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTransformCurveKey*(obj {.inject.}: UAnimationDataControllerPtr;
                           curveId {.inject.}: var FAnimationCurveIdentifier;
                           time {.inject.}: float32;
                           value {.inject.}: var FTransform;
                           bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlayLength*(obj {.inject.}: UAnimationDataControllerPtr;
                    length {.inject.}: float32; bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setModel*(obj {.inject.}: UAnimationDataControllerPtr;
               inModel {.inject.}: UAnimDataModelPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFrameRate*(obj {.inject.}: UAnimationDataControllerPtr;
                   frameRate {.inject.}: FFrameRate;
                   bShouldTransact {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCurveKeys*(obj {.inject.}: UAnimationDataControllerPtr;
                   curveId {.inject.}: var FAnimationCurveIdentifier;
                   curveKeys {.inject.}: var TArray[FRichCurveKey];
                   bShouldTransact {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCurveKey*(obj {.inject.}: UAnimationDataControllerPtr;
                  curveId {.inject.}: var FAnimationCurveIdentifier;
                  key {.inject.}: var FRichCurveKey;
                  bShouldTransact {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setCurveFlags*(obj {.inject.}: UAnimationDataControllerPtr;
                    curveId {.inject.}: var FAnimationCurveIdentifier;
                    flags {.inject.}: int32; bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCurveFlag*(obj {.inject.}: UAnimationDataControllerPtr;
                   curveId {.inject.}: var FAnimationCurveIdentifier;
                   flag {.inject.}: EAnimAssetCurveFlags;
                   bState {.inject.}: bool; bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCurveColor*(obj {.inject.}: UAnimationDataControllerPtr;
                    curveId {.inject.}: var FAnimationCurveIdentifier;
                    color {.inject.}: FLinearColor;
                    bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoneTrackKeys*(obj {.inject.}: UAnimationDataControllerPtr;
                       boneName {.inject.}: FName;
                       positionalKeys {.inject.}: var TArray[FVector];
                       rotationalKeys {.inject.}: var TArray[FQuat];
                       scalingKeys {.inject.}: var TArray[FVector];
                       bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc scaleCurve*(obj {.inject.}: UAnimationDataControllerPtr;
                 curveId {.inject.}: var FAnimationCurveIdentifier;
                 origin {.inject.}: float32; factor {.inject.}: float32;
                 bShouldTransact {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc resizePlayLength*(obj {.inject.}: UAnimationDataControllerPtr;
                       newLength {.inject.}: float32; t0 {.inject.}: float32;
                       t1 {.inject.}: float32; bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resize*(obj {.inject.}: UAnimationDataControllerPtr;
             length {.inject.}: float32; t0 {.inject.}: float32;
             t1 {.inject.}: float32; bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc renameCurve*(obj {.inject.}: UAnimationDataControllerPtr;
                  curveToRenameId {.inject.}: var FAnimationCurveIdentifier;
                  newCurveId {.inject.}: var FAnimationCurveIdentifier;
                  bShouldTransact {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc removeTransformCurveKey*(obj {.inject.}: UAnimationDataControllerPtr;
                              curveId {.inject.}: var FAnimationCurveIdentifier;
                              time {.inject.}: float32;
                              bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeCurveKey*(obj {.inject.}: UAnimationDataControllerPtr;
                     curveId {.inject.}: var FAnimationCurveIdentifier;
                     time {.inject.}: float32; bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeCurve*(obj {.inject.}: UAnimationDataControllerPtr;
                  curveId {.inject.}: var FAnimationCurveIdentifier;
                  bShouldTransact {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc removeBoneTrack*(obj {.inject.}: UAnimationDataControllerPtr;
                      boneName {.inject.}: FName;
                      bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAttributeKey*(obj {.inject.}: UAnimationDataControllerPtr;
    attributeIdentifier {.inject.}: var FAnimationAttributeIdentifier;
                         time {.inject.}: float32;
                         bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAttribute*(obj {.inject.}: UAnimationDataControllerPtr;
    attributeIdentifier {.inject.}: var FAnimationAttributeIdentifier;
                      bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAllCurvesOfType*(obj {.inject.}: UAnimationDataControllerPtr;
                            supportedCurveType {.inject.}: ERawCurveTrackTypes;
                            bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAllBoneTracks*(obj {.inject.}: UAnimationDataControllerPtr;
                          bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAllAttributesForBone*(obj {.inject.}: UAnimationDataControllerPtr;
                                 boneName {.inject.}: var FName;
                                 bShouldTransact {.inject.}: bool): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAllAttributes*(obj {.inject.}: UAnimationDataControllerPtr;
                          bShouldTransact {.inject.}: bool): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc openBracket*(obj {.inject.}: UAnimationDataControllerPtr;
                  inTitle {.inject.}: var FText; bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc insertBoneTrack*(obj {.inject.}: UAnimationDataControllerPtr;
                      boneName {.inject.}: FName; desiredIndex {.inject.}: int32;
                      bShouldTransact {.inject.}: bool): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getModel*(obj {.inject.}: UAnimationDataControllerPtr): UAnimDataModelPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findOrAddCurveNamesOnSkeleton*(obj {.inject.}: UAnimationDataControllerPtr;
                                    skeleton {.inject.}: USkeletonPtr;
    supportedCurveType {.inject.}: ERawCurveTrackTypes;
                                    bShouldTransact {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc duplicateCurve*(obj {.inject.}: UAnimationDataControllerPtr;
                     copyCurveId {.inject.}: var FAnimationCurveIdentifier;
                     newCurveId {.inject.}: var FAnimationCurveIdentifier;
                     bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc duplicateAttribute*(obj {.inject.}: UAnimationDataControllerPtr;
    attributeIdentifier {.inject.}: var FAnimationAttributeIdentifier;
    newAttributeIdentifier {.inject.}: var FAnimationAttributeIdentifier;
                         bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc closeBracket*(obj {.inject.}: UAnimationDataControllerPtr;
                   bShouldTransact {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addCurve*(obj {.inject.}: UAnimationDataControllerPtr;
               curveId {.inject.}: var FAnimationCurveIdentifier;
               curveFlags {.inject.}: int32; bShouldTransact {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addBoneTrack*(obj {.inject.}: UAnimationDataControllerPtr;
                   boneName {.inject.}: FName; bShouldTransact {.inject.}: bool): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addAttribute*(obj {.inject.}: UAnimationDataControllerPtr;
    attributeIdentifier {.inject.}: var FAnimationAttributeIdentifier;
                   bShouldTransact {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc randomSobolFloat*(index {.inject.}: int32; dimension {.inject.}: int32;
                       seed {.inject.}: float32): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc randomSobolCell3D*(index {.inject.}: int32; numCells {.inject.}: int32;
                        cell {.inject.}: FVector; seed {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc randomSobolCell2D*(index {.inject.}: int32; numCells {.inject.}: int32;
                        cell {.inject.}: FVector2D; seed {.inject.}: FVector2D): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc nextSobolFloat*(index {.inject.}: int32; dimension {.inject.}: int32;
                     previousValue {.inject.}: float32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc nextSobolCell3D*(index {.inject.}: int32; numCells {.inject.}: int32;
                      previousValue {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc nextSobolCell2D*(index {.inject.}: int32; numCells {.inject.}: int32;
                      previousValue {.inject.}: FVector2D): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeImportanceTexture*(texture {.inject.}: UTexture2DPtr;
                            weightingFunc {.inject.}: EImportanceWeight::Type): FImportanceTexture {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc importanceSample*(texture {.inject.}: var FImportanceTexture;
                       rand {.inject.}: var FVector2D; samples {.inject.}: int32;
                       intensity {.inject.}: float32;
                       samplePosition {.inject.}: var FVector2D;
                       sampleColor {.inject.}: var FLinearColor;
                       sampleIntensity {.inject.}: var float32;
                       sampleSize {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc breakImportanceTexture*(importanceTexture {.inject.}: var FImportanceTexture;
                             texture {.inject.}: var UTexture2DPtr;
    weightingFunc {.inject.}: var EImportanceWeight::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasControllerKeyJustReleased*(obj {.inject.}: UInputComponentPtr;
                                   key {.inject.}: FKey): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc wasControllerKeyJustPressed*(obj {.inject.}: UInputComponentPtr;
                                  key {.inject.}: FKey): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isControllerKeyDown*(obj {.inject.}: UInputComponentPtr;
                          key {.inject.}: FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getTouchState*(obj {.inject.}: UInputComponentPtr;
                    fingerIndex {.inject.}: int32;
                    locationX {.inject.}: var float32;
                    locationY {.inject.}: var float32;
                    bIsCurrentlyPressed {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getControllerVectorKeyState*(obj {.inject.}: UInputComponentPtr;
                                  key {.inject.}: FKey): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getControllerMouseDelta*(obj {.inject.}: UInputComponentPtr;
                              deltaX {.inject.}: var float32;
                              deltaY {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getControllerKeyTimeDown*(obj {.inject.}: UInputComponentPtr;
                               key {.inject.}: FKey): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getControllerAnalogStickState*(obj {.inject.}: UInputComponentPtr;
    whichStick {.inject.}: EControllerAnalogStick::Type;
                                    stickX {.inject.}: var float32;
                                    stickY {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getControllerAnalogKeyState*(obj {.inject.}: UInputComponentPtr;
                                  key {.inject.}: FKey): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc saveKeyMappings*(obj {.inject.}: UInputSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeAxisMapping*(obj {.inject.}: UInputSettingsPtr;
                        keyMapping {.inject.}: var FInputAxisKeyMapping;
                        bForceRebuildKeymaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeActionMapping*(obj {.inject.}: UInputSettingsPtr;
                          keyMapping {.inject.}: var FInputActionKeyMapping;
                          bForceRebuildKeymaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputSettings*(): UInputSettingsPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getAxisNames*(obj {.inject.}: UInputSettingsPtr;
                   axisNames {.inject.}: var TArray[FName]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAxisMappingByName*(obj {.inject.}: UInputSettingsPtr;
                           inAxisName {.inject.}: FName; outMappings {.inject.}: var TArray[
    FInputAxisKeyMapping]): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActionNames*(obj {.inject.}: UInputSettingsPtr;
                     actionNames {.inject.}: var TArray[FName]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActionMappingByName*(obj {.inject.}: UInputSettingsPtr;
                             inActionName {.inject.}: FName;
    outMappings {.inject.}: var TArray[FInputActionKeyMapping]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc forceRebuildKeymaps*(obj {.inject.}: UInputSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addAxisMapping*(obj {.inject.}: UInputSettingsPtr;
                     keyMapping {.inject.}: var FInputAxisKeyMapping;
                     bForceRebuildKeymaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addActionMapping*(obj {.inject.}: UInputSettingsPtr;
                       keyMapping {.inject.}: var FInputActionKeyMapping;
                       bForceRebuildKeymaps {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpLength`*(obj {.inject.}: UInterpDataPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpLength=`*(obj {.inject.}: UInterpDataPtr; val {.inject.}: float32): void {.
    importcpp: "setinterpLength(@)", header: "UEGenBindings.h".}
proc `interpGroups`*(obj {.inject.}: UInterpDataPtr): var TArray[
    TObjectPtr[UInterpGroup]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpGroups=`*(obj {.inject.}: UInterpDataPtr;
                      val {.inject.}: TArray[TObjectPtr[UInterpGroup]]): void {.
    importcpp: "setinterpGroups(@)", header: "UEGenBindings.h".}
proc `interpTracks`*(obj {.inject.}: UInterpGroupPtr): var TArray[
    TObjectPtr[UInterpTrack]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpTracks=`*(obj {.inject.}: UInterpGroupPtr;
                      val {.inject.}: TArray[TObjectPtr[UInterpTrack]]): void {.
    importcpp: "setinterpTracks(@)", header: "UEGenBindings.h".}
proc `duration`*(obj {.inject.}: UInterpToMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `duration=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                  val {.inject.}: float32): void {.importcpp: "setduration(@)",
    header: "UEGenBindings.h".}
proc `bPauseOnImpact`*(obj {.inject.}: UInterpToMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPauseOnImpact=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbPauseOnImpact(@)", header: "UEGenBindings.h".}
proc `bSweep`*(obj {.inject.}: UInterpToMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSweep=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                val {.inject.}: bool): void {.importcpp: "setbSweep(@)",
    header: "UEGenBindings.h".}
proc `teleportType`*(obj {.inject.}: UInterpToMovementComponentPtr): ETeleportType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `teleportType=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                      val {.inject.}: ETeleportType): void {.
    importcpp: "setteleportType(@)", header: "UEGenBindings.h".}
proc `behaviourType`*(obj {.inject.}: UInterpToMovementComponentPtr): EInterpToBehaviourType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `behaviourType=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                       val {.inject.}: EInterpToBehaviourType): void {.
    importcpp: "setbehaviourType(@)", header: "UEGenBindings.h".}
proc `bCheckIfStillInWorld`*(obj {.inject.}: UInterpToMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCheckIfStillInWorld=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                              val {.inject.}: bool): void {.
    importcpp: "setbCheckIfStillInWorld(@)", header: "UEGenBindings.h".}
proc `bForceSubStepping`*(obj {.inject.}: UInterpToMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceSubStepping=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbForceSubStepping(@)", header: "UEGenBindings.h".}
proc `maxSimulationTimeStep`*(obj {.inject.}: UInterpToMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSimulationTimeStep=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setmaxSimulationTimeStep(@)", header: "UEGenBindings.h".}
proc `maxSimulationIterations`*(obj {.inject.}: UInterpToMovementComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSimulationIterations=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setmaxSimulationIterations(@)", header: "UEGenBindings.h".}
proc `controlPoints`*(obj {.inject.}: UInterpToMovementComponentPtr): var TArray[
    FInterpControlPoint] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `controlPoints=`*(obj {.inject.}: UInterpToMovementComponentPtr;
                       val {.inject.}: TArray[FInterpControlPoint]): void {.
    importcpp: "setcontrolPoints(@)", header: "UEGenBindings.h".}
proc stopSimulating*(obj {.inject.}: UInterpToMovementComponentPtr;
                     hitResult {.inject.}: var FHitResult): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc restartMovement*(obj {.inject.}: UInterpToMovementComponentPtr;
                      initialDirection {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetControlPoints*(obj {.inject.}: UInterpToMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc finaliseControlPoints*(obj {.inject.}: UInterpToMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addControlPointPosition*(obj {.inject.}: UInterpToMovementComponentPtr;
                              pos {.inject.}: FVector;
                              bPositionIsRelative {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subTracks`*(obj {.inject.}: UInterpTrackPtr): var TArray[
    TObjectPtr[UInterpTrack]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subTracks=`*(obj {.inject.}: UInterpTrackPtr;
                   val {.inject.}: TArray[TObjectPtr[UInterpTrack]]): void {.
    importcpp: "setsubTracks(@)", header: "UEGenBindings.h".}
proc `posTrack`*(obj {.inject.}: UInterpTrackMovePtr): FInterpCurveVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `posTrack=`*(obj {.inject.}: UInterpTrackMovePtr;
                  val {.inject.}: FInterpCurveVector): void {.
    importcpp: "setposTrack(@)", header: "UEGenBindings.h".}
proc setArrayPropertyByName*(`object` {.inject.}: UObjectPtr;
                             propertyName {.inject.}: FName;
                             value {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc filterArray*(targetArray {.inject.}: var TArray[AActorPtr];
                  filterClass {.inject.}: TSubclassOf[AActor];
                  filteredArray {.inject.}: var TArray[AActorPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Swap*(targetArray {.inject.}: var TArray[int32];
                 firstIndex {.inject.}: int32; secondIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Shuffle*(targetArray {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Set*(targetArray {.inject.}: var TArray[int32];
                index {.inject.}: int32; item {.inject.}: var int32;
                bSizeToFit {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc array_Reverse*(targetArray {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Resize*(targetArray {.inject.}: var TArray[int32];
                   size {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc array_RemoveItem*(targetArray {.inject.}: var TArray[int32];
                       item {.inject.}: var int32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc array_Remove*(targetArray {.inject.}: var TArray[int32];
                   indexToRemove {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc array_RandomFromStream*(targetArray {.inject.}: var TArray[int32];
                             randomStream {.inject.}: var FRandomStream;
                             outItem {.inject.}: var int32;
                             outIndex {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Random*(targetArray {.inject.}: var TArray[int32];
                   outItem {.inject.}: var int32; outIndex {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Length*(targetArray {.inject.}: var TArray[int32]): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_LastIndex*(targetArray {.inject.}: var TArray[int32]): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_IsValidIndex*(targetArray {.inject.}: var TArray[int32];
                         indexToTest {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_IsNotEmpty*(targetArray {.inject.}: var TArray[int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_IsEmpty*(targetArray {.inject.}: var TArray[int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Insert*(targetArray {.inject.}: var TArray[int32];
                   newItem {.inject.}: var int32; index {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Identical*(arrayA {.inject.}: var TArray[int32];
                      arrayB {.inject.}: var TArray[int32]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Get*(targetArray {.inject.}: var TArray[int32];
                index {.inject.}: int32; item {.inject.}: var int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Find*(targetArray {.inject.}: var TArray[int32];
                 itemToFind {.inject.}: var int32): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc array_Contains*(targetArray {.inject.}: var TArray[int32];
                     itemToFind {.inject.}: var int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Clear*(targetArray {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Append*(targetArray {.inject.}: var TArray[int32];
                   sourceArray {.inject.}: var TArray[int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_AddUnique*(targetArray {.inject.}: var TArray[int32];
                      newItem {.inject.}: var int32): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc array_Add*(targetArray {.inject.}: var TArray[int32];
                newItem {.inject.}: var int32): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc parse_StringToGuid*(guidString {.inject.}: FString;
                         outGuid {.inject.}: var FGuid;
                         success {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_GuidGuid*(a {.inject.}: var FGuid; b {.inject.}: var FGuid): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc newGuid*(): FGuid {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValid_Guid*(inGuid {.inject.}: var FGuid): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc invalidate_Guid*(inGuid {.inject.}: var FGuid): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc equalEqual_GuidGuid*(a {.inject.}: var FGuid; b {.inject.}: var FGuid): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_GuidToString*(inGuid {.inject.}: var FGuid): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_IsTouchEvent*(input {.inject.}: var FPointerEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_IsMouseButtonDown*(input {.inject.}: var FPointerEvent;
                                     mouseButton {.inject.}: FKey): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetWheelDelta*(input {.inject.}: var FPointerEvent): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetUserIndex*(input {.inject.}: var FPointerEvent): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetTouchpadIndex*(input {.inject.}: var FPointerEvent): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetScreenSpacePosition*(input {.inject.}: var FPointerEvent): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetPointerIndex*(input {.inject.}: var FPointerEvent): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetLastScreenSpacePosition*(input {.inject.}: var FPointerEvent): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetGestureType*(input {.inject.}: var FPointerEvent): ESlateGesture {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetGestureDelta*(input {.inject.}: var FPointerEvent): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetEffectingButton*(input {.inject.}: var FPointerEvent): FKey {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pointerEvent_GetCursorDelta*(input {.inject.}: var FPointerEvent): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc key_IsVectorAxis*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsValid*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsMouseButton*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsModifierKey*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsKeyboardKey*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsGamepadKey*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsDigital*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsButtonAxis*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsAxis3D*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsAxis2D*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsAxis1D*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_IsAnalog*(key {.inject.}: var FKey): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc key_GetNavigationDirectionFromKey*(inKeyEvent {.inject.}: var FKeyEvent): EUINavigation {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc key_GetNavigationDirectionFromAnalog*(
    inAnalogEvent {.inject.}: var FAnalogInputEvent): EUINavigation {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc key_GetNavigationActionFromKey*(inKeyEvent {.inject.}: var FKeyEvent): EUINavigationAction {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc key_GetNavigationAction*(inKey {.inject.}: var FKey): EUINavigationAction {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc key_GetDisplayName*(key {.inject.}: var FKey): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc inputEvent_IsShiftDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsRightShiftDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsRightControlDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsRightCommandDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsRightAltDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsRepeat*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsLeftShiftDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsLeftControlDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsLeftCommandDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsLeftAltDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsControlDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsCommandDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputEvent_IsAltDown*(input {.inject.}: var FInputEvent): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc inputChord_GetDisplayName*(key {.inject.}: var FInputChord): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUserIndex*(input {.inject.}: var FKeyEvent): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getKey*(input {.inject.}: var FKeyEvent): FKey {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getAnalogValue*(input {.inject.}: var FAnalogInputEvent): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_KeyKey*(a {.inject.}: FKey; b {.inject.}: FKey): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_InputChordInputChord*(a {.inject.}: FInputChord;
                                      b {.inject.}: FInputChord): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc calibrateTilt*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCurrentLocale*(culture {.inject.}: FString; saveToConfig {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCurrentLanguageAndLocale*(culture {.inject.}: FString;
                                  saveToConfig {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCurrentLanguage*(culture {.inject.}: FString;
                         saveToConfig {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCurrentCulture*(culture {.inject.}: FString;
                        saveToConfig {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCurrentAssetGroupCulture*(assetGroup {.inject.}: FName;
                                  culture {.inject.}: FString;
                                  saveToConfig {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSuitableCulture*(availableCultures {.inject.}: var TArray[FString];
                         cultureToMatch {.inject.}: FString;
                         fallbackCulture {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNativeCulture*(textCategory {.inject.}: ELocalizedTextSourceCategory): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocalizedCultures*(includeGame {.inject.}: bool;
                           includeEngine {.inject.}: bool;
                           includeEditor {.inject.}: bool;
                           includeAdditional {.inject.}: bool): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentLocale*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc getCurrentLanguage*(): FString {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc getCurrentCulture*(): FString {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc getCurrentAssetGroupCulture*(assetGroup {.inject.}: FName): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCultureDisplayName*(culture {.inject.}: FString;
                            localized {.inject.}: bool): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearCurrentAssetGroupCulture*(assetGroup {.inject.}: FName;
                                    saveToConfig {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVectorParameterValue*(worldContextObject {.inject.}: UObjectPtr;
    collection {.inject.}: UMaterialParameterCollectionPtr;
                              parameterName {.inject.}: FName;
                              parameterValue {.inject.}: var FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setScalarParameterValue*(worldContextObject {.inject.}: UObjectPtr;
    collection {.inject.}: UMaterialParameterCollectionPtr;
                              parameterName {.inject.}: FName;
                              parameterValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVectorParameterValue*(worldContextObject {.inject.}: UObjectPtr;
    collection {.inject.}: UMaterialParameterCollectionPtr;
                              parameterName {.inject.}: FName): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScalarParameterValue*(worldContextObject {.inject.}: UObjectPtr;
    collection {.inject.}: UMaterialParameterCollectionPtr;
                              parameterName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createDynamicMaterialInstance*(worldContextObject {.inject.}: UObjectPtr;
                                    parent {.inject.}: UMaterialInterfacePtr;
                                    optionalName {.inject.}: FName;
                                    creationFlags {.inject.}: EMIDCreationFlags): UMaterialInstanceDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc markBit*(data {.inject.}: var int32; index {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasUnmarkedBit*(data {.inject.}: int32; numBits {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasMarkedBit*(data {.inject.}: int32; numBits {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getValidValue*(`enum` {.inject.}: UEnumPtr;
                    enumeratorValue {.inject.}: uint8): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnmarkedBit*(data {.inject.}: int32; startIdx {.inject.}: int32;
                     numBits {.inject.}: int32; bRandom {.inject.}: bool): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRandomUnmarkedBit*(data {.inject.}: int32; startIdx {.inject.}: int32;
                           numBits {.inject.}: int32): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFirstUnmarkedBit*(data {.inject.}: int32; startIdx {.inject.}: int32;
                          numBits {.inject.}: int32): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEnumeratorValueFromIndex*(`enum` {.inject.}: UEnumPtr;
                                  enumeratorIndex {.inject.}: uint8): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEnumeratorUserFriendlyName*(`enum` {.inject.}: UEnumPtr;
                                    enumeratorValue {.inject.}: uint8): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEnumeratorName*(`enum` {.inject.}: UEnumPtr;
                        enumeratorValue {.inject.}: uint8): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearBit*(data {.inject.}: var int32; index {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearAllBits*(data {.inject.}: var int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc bitIsMarked*(data {.inject.}: int32; index {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCastInsetShadowForAllAttachments*(
    primitiveComponent {.inject.}: UPrimitiveComponentPtr;
    bCastInsetShadow {.inject.}: bool; bLightAttachmentsAsGroup {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc renderTargetCreateStaticTexture2DEditorOnly*(
    renderTarget {.inject.}: UTextureRenderTarget2DPtr; name {.inject.}: FString;
    compressionSettings {.inject.}: TextureCompressionSettings;
    mipSettings {.inject.}: TextureMipGenSettings): UTexture2DPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc releaseRenderTarget2D*(textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTargetUV*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                         u {.inject.}: float32; v {.inject.}: float32): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTargetRawUVArea*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                                area {.inject.}: FBox2D;
                                bNormalize {.inject.}: bool): TArray[FLinearColor] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTargetRawUV*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                            u {.inject.}: float32; v {.inject.}: float32;
                            bNormalize {.inject.}: bool): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTargetRawPixelArea*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                                   minX {.inject.}: int32;
                                   minY {.inject.}: int32;
                                   maxX {.inject.}: int32;
                                   maxY {.inject.}: int32;
                                   bNormalize {.inject.}: bool): TArray[FLinearColor] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTargetRawPixel*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                               x {.inject.}: int32; y {.inject.}: int32;
                               bNormalize {.inject.}: bool): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTargetRaw*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                          outLinearSamples {.inject.}: var TArray[FLinearColor];
                          bNormalize {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTargetPixel*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                            x {.inject.}: int32; y {.inject.}: int32): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc readRenderTarget*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                       outSamples {.inject.}: var TArray[FColor];
                       bNormalize {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeSkinWeightInfo*(bone0 {.inject.}: int32; weight0 {.inject.}: uint8;
                         bone1 {.inject.}: int32; weight1 {.inject.}: uint8;
                         bone2 {.inject.}: int32; weight2 {.inject.}: uint8;
                         bone3 {.inject.}: int32; weight3 {.inject.}: uint8): FSkelMeshSkinWeightInfo {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc importFileAsTexture2D*(worldContextObject {.inject.}: UObjectPtr;
                            filename {.inject.}: FString): UTexture2DPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc importBufferAsTexture2D*(worldContextObject {.inject.}: UObjectPtr;
                              buffer {.inject.}: var TArray[uint8]): UTexture2DPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc exportTexture2D*(worldContextObject {.inject.}: UObjectPtr;
                      texture {.inject.}: UTexture2DPtr;
                      filePath {.inject.}: FString; fileName {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc exportRenderTarget*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                         filePath {.inject.}: FString;
                         fileName {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc endDrawCanvasToRenderTarget*(worldContextObject {.inject.}: UObjectPtr;
    context {.inject.}: var FDrawToRenderTargetContext): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawMaterialToRenderTarget*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                                 material {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createRenderTargetVolume*(worldContextObject {.inject.}: UObjectPtr;
                               width {.inject.}: int32; height {.inject.}: int32;
                               depth {.inject.}: int32;
                               format {.inject.}: ETextureRenderTargetFormat;
                               clearColor {.inject.}: FLinearColor;
                               bAutoGenerateMipMaps {.inject.}: bool): UTextureRenderTargetVolumePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createRenderTarget2DArray*(worldContextObject {.inject.}: UObjectPtr;
                                width {.inject.}: int32;
                                height {.inject.}: int32;
                                slices {.inject.}: int32;
                                format {.inject.}: ETextureRenderTargetFormat;
                                clearColor {.inject.}: FLinearColor;
                                bAutoGenerateMipMaps {.inject.}: bool): UTextureRenderTarget2DArrayPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createRenderTarget2D*(worldContextObject {.inject.}: UObjectPtr;
                           width {.inject.}: int32; height {.inject.}: int32;
                           format {.inject.}: ETextureRenderTargetFormat;
                           clearColor {.inject.}: FLinearColor;
                           bAutoGenerateMipMaps {.inject.}: bool): UTextureRenderTarget2DPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertRenderTargetToTexture2DEditorOnly*(
    worldContextObject {.inject.}: UObjectPtr;
    renderTarget {.inject.}: UTextureRenderTarget2DPtr;
    texture {.inject.}: UTexture2DPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc clearRenderTarget2D*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                          clearColor {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc calculateProjectionMatrix*(minimalViewInfo {.inject.}: var FMinimalViewInfo): FMatrix {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc breakSkinWeightInfo*(inWeight {.inject.}: FSkelMeshSkinWeightInfo;
                          bone0 {.inject.}: var int32;
                          weight0 {.inject.}: var uint8;
                          bone1 {.inject.}: var int32;
                          weight1 {.inject.}: var uint8;
                          bone2 {.inject.}: var int32;
                          weight2 {.inject.}: var uint8;
                          bone3 {.inject.}: var int32;
                          weight3 {.inject.}: var uint8): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc beginDrawCanvasToRenderTarget*(worldContextObject {.inject.}: UObjectPtr;
    textureRenderTarget {.inject.}: UTextureRenderTarget2DPtr;
                                    canvas {.inject.}: var UCanvasPtr;
                                    size {.inject.}: var FVector2D;
    context {.inject.}: var FDrawToRenderTargetContext): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc trimTrailing*(sourceString {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc trim*(sourceString {.inject.}: FString): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc toUpper*(sourceString {.inject.}: FString): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc toLower*(sourceString {.inject.}: FString): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc timeSecondsToString*(inSeconds {.inject.}: float32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startsWith*(sourceString {.inject.}: FString; inPrefix {.inject.}: FString;
                 searchCase {.inject.}: ESearchCase::Type): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc split*(sourceString {.inject.}: FString; inStr {.inject.}: FString;
            leftS {.inject.}: var FString; rightS {.inject.}: var FString;
            searchCase {.inject.}: ESearchCase::Type;
            searchDir {.inject.}: ESearchDir::Type): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc rightPad*(sourceString {.inject.}: FString; chCount {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc rightChop*(sourceString {.inject.}: FString; count {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc right*(sourceString {.inject.}: FString; count {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc reverse*(sourceString {.inject.}: FString): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc replaceInline*(sourceString {.inject.}: var FString;
                    searchText {.inject.}: FString;
                    replacementText {.inject.}: FString;
                    searchCase {.inject.}: ESearchCase::Type): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc replace*(sourceString {.inject.}: FString; `from` {.inject.}: FString;
              to {.inject.}: FString; searchCase {.inject.}: ESearchCase::Type): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc parseIntoArray*(sourceString {.inject.}: FString;
                     delimiter {.inject.}: FString;
                     cullEmptyStrings {.inject.}: bool): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_StrStr*(a {.inject.}: FString; b {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_StriStri*(a {.inject.}: FString; b {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc mid*(sourceString {.inject.}: FString; start {.inject.}: int32;
          count {.inject.}: int32): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc matchesWildcard*(sourceString {.inject.}: FString;
                      wildcard {.inject.}: FString;
                      searchCase {.inject.}: ESearchCase::Type): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc len*(s {.inject.}: FString): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc leftPad*(sourceString {.inject.}: FString; chCount {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc leftChop*(sourceString {.inject.}: FString; count {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc left*(sourceString {.inject.}: FString; count {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc joinStringArray*(sourceArray {.inject.}: var TArray[FString];
                      separator {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isNumeric*(sourceString {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isEmpty*(inString {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getSubstring*(sourceString {.inject.}: FString;
                   startIndex {.inject.}: int32; length {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCharacterAsNumber*(sourceString {.inject.}: FString;
                           index {.inject.}: int32): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getCharacterArrayFromString*(sourceString {.inject.}: FString): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findSubstring*(searchIn {.inject.}: FString; substring {.inject.}: FString;
                    bUseCase {.inject.}: bool; bSearchFromEnd {.inject.}: bool;
                    startPosition {.inject.}: int32): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_StrStr*(a {.inject.}: FString; b {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_StriStri*(a {.inject.}: FString; b {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc endsWith*(sourceString {.inject.}: FString; inSuffix {.inject.}: FString;
               searchCase {.inject.}: ESearchCase::Type): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc cullArray*(sourceString {.inject.}: FString;
                inArray {.inject.}: var TArray[FString]): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_VectorToString*(inVec {.inject.}: FVector): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_Vector3fToString*(inVec {.inject.}: FVector3f): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_Vector2dToString*(inVec {.inject.}: FVector2D): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_TransformToString*(inTrans {.inject.}: var FTransform): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToVector3f*(inString {.inject.}: FString;
                            outConvertedVector {.inject.}: var FVector3f;
                            outIsValid {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToVector2D*(inString {.inject.}: FString;
                            outConvertedVector2D {.inject.}: var FVector2D;
                            outIsValid {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToVector*(inString {.inject.}: FString;
                          outConvertedVector {.inject.}: var FVector;
                          outIsValid {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToRotator*(inString {.inject.}: FString;
                           outConvertedRotator {.inject.}: var FRotator;
                           outIsValid {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToName*(inString {.inject.}: FString): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToInt*(inString {.inject.}: FString): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToDouble*(inString {.inject.}: FString): float64 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToColor*(inString {.inject.}: FString;
                         outConvertedColor {.inject.}: var FLinearColor;
                         outIsValid {.inject.}: var bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_RotatorToString*(inRot {.inject.}: FRotator): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ObjectToString*(inObj {.inject.}: UObjectPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_NameToString*(inName {.inject.}: FName): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc conv_MatrixToString*(inMatrix {.inject.}: var FMatrix): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_IntVectorToString*(inIntVec {.inject.}: FIntVector): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_IntToString*(inInt {.inject.}: int32): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc conv_IntPointToString*(inIntPoint {.inject.}: FIntPoint): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_Int64ToString*(inInt {.inject.}: int64): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc conv_DoubleToString*(inDouble {.inject.}: float64): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ColorToString*(inColor {.inject.}: FLinearColor): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ByteToString*(inByte {.inject.}: uint8): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc conv_BoolToString*(inBool {.inject.}: bool): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc contains*(searchIn {.inject.}: FString; substring {.inject.}: FString;
               bUseCase {.inject.}: bool; bSearchFromEnd {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc concat_StrStr*(a {.inject.}: FString; b {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Vector2d*(appendTo {.inject.}: FString;
                           prefix {.inject.}: FString;
                           inVector2d {.inject.}: FVector2D;
                           suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Vector*(appendTo {.inject.}: FString;
                         prefix {.inject.}: FString;
                         inVector {.inject.}: FVector; suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Rotator*(appendTo {.inject.}: FString;
                          prefix {.inject.}: FString; inRot {.inject.}: FRotator;
                          suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Object*(appendTo {.inject.}: FString;
                         prefix {.inject.}: FString;
                         inObj {.inject.}: UObjectPtr; suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Name*(appendTo {.inject.}: FString; prefix {.inject.}: FString;
                       inName {.inject.}: FName; suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_IntVector*(appendTo {.inject.}: FString;
                            prefix {.inject.}: FString;
                            inIntVector {.inject.}: FIntVector;
                            suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Int*(appendTo {.inject.}: FString; prefix {.inject.}: FString;
                      inInt {.inject.}: int32; suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Double*(appendTo {.inject.}: FString;
                         prefix {.inject.}: FString;
                         inDouble {.inject.}: float64; suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Color*(appendTo {.inject.}: FString; prefix {.inject.}: FString;
                        inColor {.inject.}: FLinearColor;
                        suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildString_Bool*(appendTo {.inject.}: FString; prefix {.inject.}: FString;
                       inBool {.inject.}: bool; suffix {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isRegisteredTableId*(tableId {.inject.}: FName): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isRegisteredTableEntry*(tableId {.inject.}: FName; key {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTableNamespace*(tableId {.inject.}: FName): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTableEntrySourceString*(tableId {.inject.}: FName;
                                key {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTableEntryMetaData*(tableId {.inject.}: FName; key {.inject.}: FString;
                            metaDataId {.inject.}: FName): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRegisteredStringTables*(): TArray[FName] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getMetaDataIdsFromStringTableEntry*(tableId {.inject.}: FName;
    key {.inject.}: FString): TArray[FName] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getKeysFromStringTable*(tableId {.inject.}: FName): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unregisterForRemoteNotifications*(): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc unloadPrimaryAssetList*(primaryAssetIdList {.inject.}: var TArray[
    FPrimaryAssetId]): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unloadPrimaryAsset*(primaryAssetId {.inject.}: FPrimaryAssetId): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc transactObject*(`object` {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stackTrace*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereTraceSingleForObjects*(worldContextObject {.inject.}: UObjectPtr;
                                  start {.inject.}: FVector;
                                  `end` {.inject.}: FVector;
                                  radius {.inject.}: float32;
                                  bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                  outHit {.inject.}: var FHitResult;
                                  bIgnoreSelf {.inject.}: bool;
                                  traceColor {.inject.}: FLinearColor;
                                  traceHitColor {.inject.}: FLinearColor;
                                  drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereTraceSingleByProfile*(worldContextObject {.inject.}: UObjectPtr;
                                 start {.inject.}: FVector;
                                 `end` {.inject.}: FVector;
                                 radius {.inject.}: float32;
                                 profileName {.inject.}: FName;
                                 bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                 outHit {.inject.}: var FHitResult;
                                 bIgnoreSelf {.inject.}: bool;
                                 traceColor {.inject.}: FLinearColor;
                                 traceHitColor {.inject.}: FLinearColor;
                                 drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereTraceSingle*(worldContextObject {.inject.}: UObjectPtr;
                        start {.inject.}: FVector; `end` {.inject.}: FVector;
                        radius {.inject.}: float32;
                        traceChannel {.inject.}: ETraceTypeQuery;
                        bTraceComplex {.inject.}: bool;
                        actorsToIgnore {.inject.}: var TArray[AActorPtr];
                        drawDebugType {.inject.}: EDrawDebugTrace::Type;
                        outHit {.inject.}: var FHitResult;
                        bIgnoreSelf {.inject.}: bool;
                        traceColor {.inject.}: FLinearColor;
                        traceHitColor {.inject.}: FLinearColor;
                        drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereTraceMultiForObjects*(worldContextObject {.inject.}: UObjectPtr;
                                 start {.inject.}: FVector;
                                 `end` {.inject.}: FVector;
                                 radius {.inject.}: float32;
                                 bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                 outHits {.inject.}: var TArray[FHitResult];
                                 bIgnoreSelf {.inject.}: bool;
                                 traceColor {.inject.}: FLinearColor;
                                 traceHitColor {.inject.}: FLinearColor;
                                 drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereTraceMultiByProfile*(worldContextObject {.inject.}: UObjectPtr;
                                start {.inject.}: FVector;
                                `end` {.inject.}: FVector;
                                radius {.inject.}: float32;
                                profileName {.inject.}: FName;
                                bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr];
                                drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                outHits {.inject.}: var TArray[FHitResult];
                                bIgnoreSelf {.inject.}: bool;
                                traceColor {.inject.}: FLinearColor;
                                traceHitColor {.inject.}: FLinearColor;
                                drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereTraceMulti*(worldContextObject {.inject.}: UObjectPtr;
                       start {.inject.}: FVector; `end` {.inject.}: FVector;
                       radius {.inject.}: float32;
                       traceChannel {.inject.}: ETraceTypeQuery;
                       bTraceComplex {.inject.}: bool;
                       actorsToIgnore {.inject.}: var TArray[AActorPtr];
                       drawDebugType {.inject.}: EDrawDebugTrace::Type;
                       outHits {.inject.}: var TArray[FHitResult];
                       bIgnoreSelf {.inject.}: bool;
                       traceColor {.inject.}: FLinearColor;
                       traceHitColor {.inject.}: FLinearColor;
                       drawTime {.inject.}: float32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc sphereOverlapComponents*(worldContextObject {.inject.}: UObjectPtr;
                              spherePos {.inject.}: FVector;
                              sphereRadius {.inject.}: float32;
                              componentClassFilter {.inject.}: UClassPtr;
                              actorsToIgnore {.inject.}: var TArray[AActorPtr];
    outComponents {.inject.}: var TArray[UPrimitiveComponentPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc sphereOverlapActors*(worldContextObject {.inject.}: UObjectPtr;
                          spherePos {.inject.}: FVector;
                          sphereRadius {.inject.}: float32;
                          actorClassFilter {.inject.}: UClassPtr;
                          actorsToIgnore {.inject.}: var TArray[AActorPtr];
                          outActors {.inject.}: var TArray[AActorPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc snapshotObject*(`object` {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc showPlatformSpecificLeaderboardScreen*(categoryName {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc showPlatformSpecificAchievementsScreen*(
    specificPlayer {.inject.}: APlayerControllerPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc showInterstitialAd*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc showAdBanner*(adIdIndex {.inject.}: int32;
                   bShowOnBottomOfScreen {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWindowTitle*(title {.inject.}: var FText): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setVolumeButtonsHandledBySystem*(bEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVectorPropertyByName*(`object` {.inject.}: UObjectPtr;
                              propertyName {.inject.}: FName;
                              value {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVector3fPropertyByName*(`object` {.inject.}: UObjectPtr;
                                propertyName {.inject.}: FName;
                                value {.inject.}: var FVector3f): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUserActivity*(userActivity {.inject.}: var FUserActivity): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTransformPropertyByName*(`object` {.inject.}: UObjectPtr;
                                 propertyName {.inject.}: FName;
                                 value {.inject.}: var FTransform): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTextPropertyByName*(`object` {.inject.}: UObjectPtr;
                            propertyName {.inject.}: FName;
                            value {.inject.}: var FText): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSuppressViewportTransitionMessage*(
    worldContextObject {.inject.}: UObjectPtr; bState {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStructurePropertyByName*(`object` {.inject.}: UObjectPtr;
                                 propertyName {.inject.}: FName;
                                 value {.inject.}: var FGenericStruct): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStringPropertyByName*(`object` {.inject.}: UObjectPtr;
                              propertyName {.inject.}: FName;
                              value {.inject.}: FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSoftObjectPropertyByName*(`object` {.inject.}: UObjectPtr;
                                  propertyName {.inject.}: FName;
                                  value {.inject.}: var TSoftObjectPtr[UObject]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSoftClassPropertyByName*(`object` {.inject.}: UObjectPtr;
                                 propertyName {.inject.}: FName;
                                 value {.inject.}: var TSoftClassPtr[UObject]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRotatorPropertyByName*(`object` {.inject.}: UObjectPtr;
                               propertyName {.inject.}: FName;
                               value {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setObjectPropertyByName*(`object` {.inject.}: UObjectPtr;
                              propertyName {.inject.}: FName;
                              value {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setNamePropertyByName*(`object` {.inject.}: UObjectPtr;
                            propertyName {.inject.}: FName;
                            value {.inject.}: var FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearColorPropertyByName*(`object` {.inject.}: UObjectPtr;
                                   propertyName {.inject.}: FName;
                                   value {.inject.}: var FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIntPropertyByName*(`object` {.inject.}: UObjectPtr;
                           propertyName {.inject.}: FName;
                           value {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setInterfacePropertyByName*(`object` {.inject.}: UObjectPtr;
                                 propertyName {.inject.}: FName; value {.inject.}: var TScriptInterface[
    UInterface]): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInt64PropertyByName*(`object` {.inject.}: UObjectPtr;
                             propertyName {.inject.}: FName;
                             value {.inject.}: int64): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGamepadsBlockDeviceFeedback*(bBlock {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFieldPathPropertyByName*(`object` {.inject.}: UObjectPtr;
                                 propertyName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEditorProperty*(`object` {.inject.}: UObjectPtr;
                        propertyName {.inject.}: FName;
                        propertyValue {.inject.}: var int32;
    changeNotifyMode {.inject.}: EPropertyAccessChangeNotifyMode): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDoublePropertyByName*(`object` {.inject.}: UObjectPtr;
                              propertyName {.inject.}: FName;
                              value {.inject.}: float64): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setColorPropertyByName*(`object` {.inject.}: UObjectPtr;
                             propertyName {.inject.}: FName;
                             value {.inject.}: var FColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCollisionProfileNameProperty*(`object` {.inject.}: UObjectPtr;
                                      propertyName {.inject.}: FName;
    value {.inject.}: var FCollisionProfileName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setClassPropertyByName*(`object` {.inject.}: UObjectPtr;
                             propertyName {.inject.}: FName;
                             value {.inject.}: TSubclassOf[UObject]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBytePropertyByName*(`object` {.inject.}: UObjectPtr;
                            propertyName {.inject.}: FName;
                            value {.inject.}: uint8): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setBoolPropertyByName*(`object` {.inject.}: UObjectPtr;
                            propertyName {.inject.}: FName;
                            value {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc retriggerableDelay*(worldContextObject {.inject.}: UObjectPtr;
                         duration {.inject.}: float32;
                         latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetGamepadAssignmentToController*(controllerId {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetGamepadAssignments*(): void {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc registerForRemoteNotifications*(): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc quitGame*(worldContextObject {.inject.}: UObjectPtr;
               specificPlayer {.inject.}: APlayerControllerPtr;
               quitPreference {.inject.}: EQuitPreference::Type;
               bIgnorePlatformRestrictions {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc quitEditor*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc printWarning*(inString {.inject.}: FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc printText*(worldContextObject {.inject.}: UObjectPtr;
                inText {.inject.}: FText; bPrintToScreen {.inject.}: bool;
                bPrintToLog {.inject.}: bool; textColor {.inject.}: FLinearColor;
                duration {.inject.}: float32; key {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc printString*(worldContextObject {.inject.}: UObjectPtr;
                  inString {.inject.}: FString; bPrintToScreen {.inject.}: bool;
                  bPrintToLog {.inject.}: bool;
                  textColor {.inject.}: FLinearColor;
                  duration {.inject.}: float32; key {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc parseParamValue*(inString {.inject.}: FString; inParam {.inject.}: FString;
                      outValue {.inject.}: var FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc parseParam*(inString {.inject.}: FString; inParam {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc parseCommandLine*(inCmdLine {.inject.}: FString;
                       outTokens {.inject.}: var TArray[FString];
                       outSwitches {.inject.}: var TArray[FString];
                       outParams {.inject.}: var TMap[FString, FString]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_SoftObjectReference*(a {.inject.}: var TSoftObjectPtr[UObject];
                                   b {.inject.}: var TSoftObjectPtr[UObject]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_SoftClassReference*(a {.inject.}: var TSoftClassPtr[UObject];
                                  b {.inject.}: var TSoftClassPtr[UObject]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_PrimaryAssetType*(a {.inject.}: FPrimaryAssetType;
                                b {.inject.}: FPrimaryAssetType): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_PrimaryAssetId*(a {.inject.}: FPrimaryAssetId;
                              b {.inject.}: FPrimaryAssetId): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc normalizeFilename*(inFilename {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc moveComponentTo*(component {.inject.}: USceneComponentPtr;
                      targetRelativeLocation {.inject.}: FVector;
                      targetRelativeRotation {.inject.}: FRotator;
                      bEaseOut {.inject.}: bool; bEaseIn {.inject.}: bool;
                      overTime {.inject.}: float32;
                      bForceShortestRotationPath {.inject.}: bool;
                      moveAction {.inject.}: EMoveComponentAction::Type;
                      latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeSoftObjectPath*(pathString {.inject.}: FString): FSoftObjectPath {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeSoftClassPath*(pathString {.inject.}: FString): FSoftClassPath {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeLiteralText*(value {.inject.}: FText): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeLiteralString*(value {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeLiteralName*(value {.inject.}: FName): FName {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeLiteralInt64*(value {.inject.}: int64): int64 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeLiteralInt*(value {.inject.}: int32): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeLiteralFloat*(value {.inject.}: float32): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeLiteralDouble*(value {.inject.}: float64): float64 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc makeLiteralByte*(value {.inject.}: uint8): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc makeLiteralBool*(value {.inject.}: bool): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc logString*(inString {.inject.}: FString; bPrintToLog {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadInterstitialAd*(adIdIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadClassAsset_Blocking*(assetClass {.inject.}: TSoftClassPtr[UObject]): UClassPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadAssetClass*(worldContextObject {.inject.}: UObjectPtr;
                     assetClass {.inject.}: TSoftClassPtr[UObject];
                     onLoaded {.inject.}: FOnAssetClassLoaded;
                     latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadAsset_Blocking*(asset {.inject.}: TSoftObjectPtr[UObject]): UObjectPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadAsset*(worldContextObject {.inject.}: UObjectPtr;
                asset {.inject.}: TSoftObjectPtr[UObject];
                onLoaded {.inject.}: FOnAssetLoaded;
                latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lineTraceSingleForObjects*(worldContextObject {.inject.}: UObjectPtr;
                                start {.inject.}: FVector;
                                `end` {.inject.}: FVector;
                                bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr];
                                drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                outHit {.inject.}: var FHitResult;
                                bIgnoreSelf {.inject.}: bool;
                                traceColor {.inject.}: FLinearColor;
                                traceHitColor {.inject.}: FLinearColor;
                                drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lineTraceSingleByProfile*(worldContextObject {.inject.}: UObjectPtr;
                               start {.inject.}: FVector;
                               `end` {.inject.}: FVector;
                               profileName {.inject.}: FName;
                               bTraceComplex {.inject.}: bool;
                               actorsToIgnore {.inject.}: var TArray[AActorPtr];
                               drawDebugType {.inject.}: EDrawDebugTrace::Type;
                               outHit {.inject.}: var FHitResult;
                               bIgnoreSelf {.inject.}: bool;
                               traceColor {.inject.}: FLinearColor;
                               traceHitColor {.inject.}: FLinearColor;
                               drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lineTraceSingle*(worldContextObject {.inject.}: UObjectPtr;
                      start {.inject.}: FVector; `end` {.inject.}: FVector;
                      traceChannel {.inject.}: ETraceTypeQuery;
                      bTraceComplex {.inject.}: bool;
                      actorsToIgnore {.inject.}: var TArray[AActorPtr];
                      drawDebugType {.inject.}: EDrawDebugTrace::Type;
                      outHit {.inject.}: var FHitResult;
                      bIgnoreSelf {.inject.}: bool;
                      traceColor {.inject.}: FLinearColor;
                      traceHitColor {.inject.}: FLinearColor;
                      drawTime {.inject.}: float32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc lineTraceMultiForObjects*(worldContextObject {.inject.}: UObjectPtr;
                               start {.inject.}: FVector;
                               `end` {.inject.}: FVector;
                               bTraceComplex {.inject.}: bool;
                               actorsToIgnore {.inject.}: var TArray[AActorPtr];
                               drawDebugType {.inject.}: EDrawDebugTrace::Type;
                               outHits {.inject.}: var TArray[FHitResult];
                               bIgnoreSelf {.inject.}: bool;
                               traceColor {.inject.}: FLinearColor;
                               traceHitColor {.inject.}: FLinearColor;
                               drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lineTraceMultiByProfile*(worldContextObject {.inject.}: UObjectPtr;
                              start {.inject.}: FVector;
                              `end` {.inject.}: FVector;
                              profileName {.inject.}: FName;
                              bTraceComplex {.inject.}: bool;
                              actorsToIgnore {.inject.}: var TArray[AActorPtr];
                              drawDebugType {.inject.}: EDrawDebugTrace::Type;
                              outHits {.inject.}: var TArray[FHitResult];
                              bIgnoreSelf {.inject.}: bool;
                              traceColor {.inject.}: FLinearColor;
                              traceHitColor {.inject.}: FLinearColor;
                              drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc lineTraceMulti*(worldContextObject {.inject.}: UObjectPtr;
                     start {.inject.}: FVector; `end` {.inject.}: FVector;
                     traceChannel {.inject.}: ETraceTypeQuery;
                     bTraceComplex {.inject.}: bool;
                     actorsToIgnore {.inject.}: var TArray[AActorPtr];
                     drawDebugType {.inject.}: EDrawDebugTrace::Type;
                     outHits {.inject.}: var TArray[FHitResult];
                     bIgnoreSelf {.inject.}: bool;
                     traceColor {.inject.}: FLinearColor;
                     traceHitColor {.inject.}: FLinearColor;
                     drawTime {.inject.}: float32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc launchURL*(uRL {.inject.}: FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc unPauseTimerHandle*(worldContextObject {.inject.}: UObjectPtr;
                         handle {.inject.}: FTimerHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unPauseTimerDelegate*(delegate {.inject.}: FTimerDynamicDelegate): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc unPauseTimer*(`object` {.inject.}: UObjectPtr;
                   functionName {.inject.}: FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc timerExistsHandle*(worldContextObject {.inject.}: UObjectPtr;
                        handle {.inject.}: FTimerHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc timerExistsDelegate*(delegate {.inject.}: FTimerDynamicDelegate): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc timerExists*(`object` {.inject.}: UObjectPtr;
                  functionName {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setTimerForNextTickDelegate*(delegate {.inject.}: FTimerDynamicDelegate): FTimerHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTimerForNextTick*(`object` {.inject.}: UObjectPtr;
                          functionName {.inject.}: FString): FTimerHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTimerDelegate*(delegate {.inject.}: FTimerDynamicDelegate;
                       time {.inject.}: float32; bLooping {.inject.}: bool;
                       initialStartDelay {.inject.}: float32;
                       initialStartDelayVariance {.inject.}: float32): FTimerHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTimer*(`object` {.inject.}: UObjectPtr; functionName {.inject.}: FString;
               time {.inject.}: float32; bLooping {.inject.}: bool;
               initialStartDelay {.inject.}: float32;
               initialStartDelayVariance {.inject.}: float32): FTimerHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pauseTimerHandle*(worldContextObject {.inject.}: UObjectPtr;
                       handle {.inject.}: FTimerHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pauseTimerDelegate*(delegate {.inject.}: FTimerDynamicDelegate): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc pauseTimer*(`object` {.inject.}: UObjectPtr;
                 functionName {.inject.}: FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isValidTimerHandle*(handle {.inject.}: FTimerHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTimerPausedHandle*(worldContextObject {.inject.}: UObjectPtr;
                          handle {.inject.}: FTimerHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTimerPausedDelegate*(delegate {.inject.}: FTimerDynamicDelegate): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTimerPaused*(`object` {.inject.}: UObjectPtr;
                    functionName {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTimerActiveHandle*(worldContextObject {.inject.}: UObjectPtr;
                          handle {.inject.}: FTimerHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTimerActiveDelegate*(delegate {.inject.}: FTimerDynamicDelegate): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTimerActive*(`object` {.inject.}: UObjectPtr;
                    functionName {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc invalidateTimerHandle*(handle {.inject.}: var FTimerHandle): FTimerHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimerRemainingTimeHandle*(worldContextObject {.inject.}: UObjectPtr;
                                  handle {.inject.}: FTimerHandle): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimerRemainingTimeDelegate*(delegate {.inject.}: FTimerDynamicDelegate): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimerRemainingTime*(`object` {.inject.}: UObjectPtr;
                            functionName {.inject.}: FString): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimerElapsedTimeHandle*(worldContextObject {.inject.}: UObjectPtr;
                                handle {.inject.}: FTimerHandle): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimerElapsedTimeDelegate*(delegate {.inject.}: FTimerDynamicDelegate): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimerElapsedTime*(`object` {.inject.}: UObjectPtr;
                          functionName {.inject.}: FString): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearTimerHandle*(worldContextObject {.inject.}: UObjectPtr;
                       handle {.inject.}: FTimerHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearTimerDelegate*(delegate {.inject.}: FTimerDynamicDelegate): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearTimer*(`object` {.inject.}: UObjectPtr;
                 functionName {.inject.}: FString): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc clearAndInvalidateTimerHandle*(worldContextObject {.inject.}: UObjectPtr;
                                    handle {.inject.}: var FTimerHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValidSoftObjectReference*(softObjectReference {.inject.}: var TSoftObjectPtr[
    UObject]): bool {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValidSoftClassReference*(softClassReference {.inject.}: var TSoftClassPtr[
    UObject]): bool {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValidPrimaryAssetType*(primaryAssetType {.inject.}: FPrimaryAssetType): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValidPrimaryAssetId*(primaryAssetId {.inject.}: FPrimaryAssetId): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isValidClass*(class {.inject.}: UClassPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isValid*(`object` {.inject.}: UObjectPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isUnattended*(): bool {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isStandalone*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isSplitScreen*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isServer*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isScreensaverEnabled*(): bool {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc isPackagedForDistribution*(): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isLoggedIn*(specificPlayer {.inject.}: APlayerControllerPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isInterstitialAdRequested*(): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isInterstitialAdAvailable*(): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isDedicatedServer*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isControllerAssignedToGamepad*(controllerId {.inject.}: int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hideAdBanner*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hasMultipleLocalPlayers*(worldContextObject {.inject.}: UObjectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVolumeButtonsHandledBySystem*(): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getUniqueDeviceId*(): FString {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc getSystemPath*(`object` {.inject.}: UObjectPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSupportedFullscreenResolutions*(resolutions {.inject.}: var TArray[
    FIntPoint]): bool {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSoftObjectReferenceFromPrimaryAssetId*(
    primaryAssetId {.inject.}: FPrimaryAssetId): TSoftObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSoftClassReferenceFromPrimaryAssetId*(
    primaryAssetId {.inject.}: FPrimaryAssetId): TSoftClassPtr[UObject]  {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRenderingMaterialQualityLevel*(): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getRenderingDetailMode*(): int32 {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc getProjectSavedDirectory*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getProjectDirectory*(): FString {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc getProjectContentDirectory*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPrimaryAssetsWithBundleState*(requiredBundles {.inject.}: var TArray[
    FName]; excludedBundles {.inject.}: var TArray[FName]; validTypes {.inject.}: var TArray[
    FPrimaryAssetType]; bForceCurrentState {.inject.}: bool;
    outPrimaryAssetIdList {.inject.}: var TArray[FPrimaryAssetId]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPrimaryAssetIdList*(primaryAssetType {.inject.}: FPrimaryAssetType;
    outPrimaryAssetIdList {.inject.}: var TArray[FPrimaryAssetId]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPrimaryAssetIdFromSoftObjectReference*(
    softObjectReference {.inject.}: TSoftObjectPtr[UObject]): FPrimaryAssetId {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPrimaryAssetIdFromSoftClassReference*(
    softClassReference {.inject.}: TSoftClassPtr[UObject]): FPrimaryAssetId {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPrimaryAssetIdFromObject*(`object` {.inject.}: UObjectPtr): FPrimaryAssetId {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPrimaryAssetIdFromClass*(class {.inject.}: TSubclassOf[UObject]): FPrimaryAssetId {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPreferredLanguages*(): TArray[FString] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPlatformUserName*(): FString {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc getPlatformUserDir*(): FString {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc getPathName*(`object` {.inject.}: UObjectPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOuterObject*(`object` {.inject.}: UObjectPtr): UObjectPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getObjectName*(`object` {.inject.}: UObjectPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getObjectFromPrimaryAssetId*(primaryAssetId {.inject.}: FPrimaryAssetId): UObjectPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMinYResolutionForUI*(): int32 {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc getMinYResolutionFor3DView*(): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getLocalCurrencySymbol*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getLocalCurrencyCode*(): FString {.importcpp: "$1(@)",
                                        header: "UEGenBindings.h".}
proc getGameTimeInSeconds*(worldContextObject {.inject.}: UObjectPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGamepadControllerName*(controllerId {.inject.}: int32): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGamepadButtonGlyph*(buttonKey {.inject.}: FString;
                            controllerIndex {.inject.}: int32): UTexture2DPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameName*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameBundleId*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFrameCount*(): int64 {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEngineVersion*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc getEditorProperty*(`object` {.inject.}: UObjectPtr;
                        propertyName {.inject.}: FName;
                        propertyValue {.inject.}: var int32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDisplayName*(`object` {.inject.}: UObjectPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDeviceId*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultLocale*(): FString {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc getDefaultLanguage*(): FString {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc getCurrentBundleState*(primaryAssetId {.inject.}: FPrimaryAssetId;
                            bForceCurrentState {.inject.}: bool;
                            outBundles {.inject.}: var TArray[FName]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConvenientWindowedResolutions*(resolutions {.inject.}: var TArray[
    FIntPoint]): bool {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConsoleVariableIntValue*(variableName {.inject.}: FString): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConsoleVariableFloatValue*(variableName {.inject.}: FString): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConsoleVariableBoolValue*(variableName {.inject.}: FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getComponentBounds*(component {.inject.}: USceneComponentPtr;
                         origin {.inject.}: var FVector;
                         boxExtent {.inject.}: var FVector;
                         sphereRadius {.inject.}: var float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCommandLine*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClassFromPrimaryAssetId*(primaryAssetId {.inject.}: FPrimaryAssetId): TSubclassOf[UObject]  {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getClassDisplayName*(class {.inject.}: UClassPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBuildVersion*(): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBuildConfiguration*(): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getAdIDCount*(): int32 {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActorListFromComponentList*(componentList {.inject.}: var TArray[
    UPrimitiveComponentPtr]; actorClassFilter {.inject.}: UClassPtr;
    outActorList {.inject.}: var TArray[AActorPtr]): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getActorBounds*(actor {.inject.}: AActorPtr; origin {.inject.}: var FVector;
                     boxExtent {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc forceCloseAdBanner*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc flushPersistentDebugLines*(worldContextObject {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc flushDebugStrings*(worldContextObject {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc executeConsoleCommand*(worldContextObject {.inject.}: UObjectPtr;
                            command {.inject.}: FString;
                            specificPlayer {.inject.}: APlayerControllerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_SoftObjectReference*(a {.inject.}: var TSoftObjectPtr[UObject];
                                     b {.inject.}: var TSoftObjectPtr[UObject]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_SoftClassReference*(a {.inject.}: var TSoftClassPtr[UObject];
                                    b {.inject.}: var TSoftClassPtr[UObject]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_PrimaryAssetType*(a {.inject.}: FPrimaryAssetType;
                                  b {.inject.}: FPrimaryAssetType): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_PrimaryAssetId*(a {.inject.}: FPrimaryAssetId;
                                b {.inject.}: FPrimaryAssetId): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc endTransaction*(): int32 {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugString*(worldContextObject {.inject.}: UObjectPtr;
                      textLocation {.inject.}: FVector; text {.inject.}: FString;
                      testBaseActor {.inject.}: AActorPtr;
                      textColor {.inject.}: FLinearColor;
                      duration {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawDebugSphere*(worldContextObject {.inject.}: UObjectPtr;
                      center {.inject.}: FVector; radius {.inject.}: float32;
                      segments {.inject.}: int32;
                      lineColor {.inject.}: FLinearColor;
                      duration {.inject.}: float32; thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugPoint*(worldContextObject {.inject.}: UObjectPtr;
                     position {.inject.}: FVector; size {.inject.}: float32;
                     pointColor {.inject.}: FLinearColor;
                     duration {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawDebugPlane*(worldContextObject {.inject.}: UObjectPtr;
                     planeCoordinates {.inject.}: var FPlane;
                     location {.inject.}: FVector; size {.inject.}: float32;
                     planeColor {.inject.}: FLinearColor;
                     duration {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawDebugLine*(worldContextObject {.inject.}: UObjectPtr;
                    lineStart {.inject.}: FVector; lineEnd {.inject.}: FVector;
                    lineColor {.inject.}: FLinearColor;
                    duration {.inject.}: float32; thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugFrustum*(worldContextObject {.inject.}: UObjectPtr;
                       frustumTransform {.inject.}: var FTransform;
                       frustumColor {.inject.}: FLinearColor;
                       duration {.inject.}: float32;
                       thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugFloatHistoryTransform*(worldContextObject {.inject.}: UObjectPtr;
    floatHistory {.inject.}: var FDebugFloatHistory;
                                     drawTransform {.inject.}: var FTransform;
                                     drawSize {.inject.}: FVector2D;
                                     drawColor {.inject.}: FLinearColor;
                                     duration {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugFloatHistoryLocation*(worldContextObject {.inject.}: UObjectPtr;
    floatHistory {.inject.}: var FDebugFloatHistory;
                                    drawLocation {.inject.}: FVector;
                                    drawSize {.inject.}: FVector2D;
                                    drawColor {.inject.}: FLinearColor;
                                    duration {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugCylinder*(worldContextObject {.inject.}: UObjectPtr;
                        start {.inject.}: FVector; `end` {.inject.}: FVector;
                        radius {.inject.}: float32; segments {.inject.}: int32;
                        lineColor {.inject.}: FLinearColor;
                        duration {.inject.}: float32;
                        thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugCoordinateSystem*(worldContextObject {.inject.}: UObjectPtr;
                                axisLoc {.inject.}: FVector;
                                axisRot {.inject.}: FRotator;
                                scale {.inject.}: float32;
                                duration {.inject.}: float32;
                                thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugConeInDegrees*(worldContextObject {.inject.}: UObjectPtr;
                             origin {.inject.}: FVector;
                             direction {.inject.}: FVector;
                             length {.inject.}: float32;
                             angleWidth {.inject.}: float32;
                             angleHeight {.inject.}: float32;
                             numSides {.inject.}: int32;
                             lineColor {.inject.}: FLinearColor;
                             duration {.inject.}: float32;
                             thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugCone*(worldContextObject {.inject.}: UObjectPtr;
                    origin {.inject.}: FVector; direction {.inject.}: FVector;
                    length {.inject.}: float32; angleWidth {.inject.}: float32;
                    angleHeight {.inject.}: float32; numSides {.inject.}: int32;
                    lineColor {.inject.}: FLinearColor;
                    duration {.inject.}: float32; thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugCircle*(worldContextObject {.inject.}: UObjectPtr;
                      center {.inject.}: FVector; radius {.inject.}: float32;
                      numSegments {.inject.}: int32;
                      lineColor {.inject.}: FLinearColor;
                      duration {.inject.}: float32;
                      thickness {.inject.}: float32; yAxis {.inject.}: FVector;
                      zAxis {.inject.}: FVector; bDrawAxis {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugCapsule*(worldContextObject {.inject.}: UObjectPtr;
                       center {.inject.}: FVector;
                       halfHeight {.inject.}: float32;
                       radius {.inject.}: float32; rotation {.inject.}: FRotator;
                       lineColor {.inject.}: FLinearColor;
                       duration {.inject.}: float32;
                       thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc drawDebugCamera*(cameraActor {.inject.}: ACameraActorPtr;
                      cameraColor {.inject.}: FLinearColor;
                      duration {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawDebugBox*(worldContextObject {.inject.}: UObjectPtr;
                   center {.inject.}: FVector; extent {.inject.}: FVector;
                   lineColor {.inject.}: FLinearColor;
                   rotation {.inject.}: FRotator; duration {.inject.}: float32;
                   thickness {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc drawDebugArrow*(worldContextObject {.inject.}: UObjectPtr;
                     lineStart {.inject.}: FVector; lineEnd {.inject.}: FVector;
                     arrowSize {.inject.}: float32;
                     lineColor {.inject.}: FLinearColor;
                     duration {.inject.}: float32; thickness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc doesImplementInterface*(testObject {.inject.}: UObjectPtr;
                             `interface` {.inject.}: TSubclassOf[UInterface]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc delayUntilNextTick*(worldContextObject {.inject.}: UObjectPtr;
                         latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc delay*(worldContextObject {.inject.}: UObjectPtr;
            duration {.inject.}: float32;
            latentInfo {.inject.}: FLatentActionInfo): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createCopyForUndoBuffer*(objectToModify {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertToRelativePath*(filename {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertToAbsolutePath*(filename {.inject.}: FString): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_SoftObjPathToSoftObjRef*(softObjectPath {.inject.}: var FSoftObjectPath): TSoftObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_SoftObjectReferenceToString*(softObjectReference {.inject.}: var TSoftObjectPtr[
    UObject]): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_SoftObjectReferenceToObject*(softObject {.inject.}: var TSoftObjectPtr[
    UObject]): UObjectPtr {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_SoftClassReferenceToString*(softClassReference {.inject.}: var TSoftClassPtr[
    UObject]): FString {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_SoftClassReferenceToClass*(softClass {.inject.}: var TSoftClassPtr[
    UObject]): TSubclassOf[UObject]  {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc conv_SoftClassPathToSoftClassRef*(softClassPath {.inject.}: var FSoftClassPath): TSoftClassPtr[UObject]  {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_PrimaryAssetTypeToString*(primaryAssetType {.inject.}: FPrimaryAssetType): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_PrimaryAssetIdToString*(primaryAssetId {.inject.}: FPrimaryAssetId): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ObjectToSoftObjectReference*(`object` {.inject.}: UObjectPtr): TSoftObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ObjectToClass*(`object` {.inject.}: UObjectPtr;
                         class {.inject.}: TSubclassOf[UObject]): UClassPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_InterfaceToObject*(`interface` {.inject.}: var TScriptInterface[
    UInterface]): UObjectPtr {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ClassToSoftClassReference*(class {.inject.}: var TSubclassOf[UObject]): TSoftClassPtr[UObject]  {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc controlScreensaver*(bAllowScreenSaver {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc componentOverlapComponents*(component {.inject.}: UPrimitiveComponentPtr;
                                 componentTransform {.inject.}: var FTransform;
                                 componentClassFilter {.inject.}: UClassPtr;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; outComponents {.inject.}: var TArray[
    UPrimitiveComponentPtr]): bool {.importcpp: "$1(@)",
                                     header: "UEGenBindings.h".}
proc componentOverlapActors*(component {.inject.}: UPrimitiveComponentPtr;
                             componentTransform {.inject.}: var FTransform;
                             actorClassFilter {.inject.}: UClassPtr;
                             actorsToIgnore {.inject.}: var TArray[AActorPtr];
                             outActors {.inject.}: var TArray[AActorPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc collectGarbage*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleTraceSingleForObjects*(worldContextObject {.inject.}: UObjectPtr;
                                   start {.inject.}: FVector;
                                   `end` {.inject.}: FVector;
                                   radius {.inject.}: float32;
                                   halfHeight {.inject.}: float32;
                                   bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                   outHit {.inject.}: var FHitResult;
                                   bIgnoreSelf {.inject.}: bool;
                                   traceColor {.inject.}: FLinearColor;
                                   traceHitColor {.inject.}: FLinearColor;
                                   drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleTraceSingleByProfile*(worldContextObject {.inject.}: UObjectPtr;
                                  start {.inject.}: FVector;
                                  `end` {.inject.}: FVector;
                                  radius {.inject.}: float32;
                                  halfHeight {.inject.}: float32;
                                  profileName {.inject.}: FName;
                                  bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                  outHit {.inject.}: var FHitResult;
                                  bIgnoreSelf {.inject.}: bool;
                                  traceColor {.inject.}: FLinearColor;
                                  traceHitColor {.inject.}: FLinearColor;
                                  drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleTraceSingle*(worldContextObject {.inject.}: UObjectPtr;
                         start {.inject.}: FVector; `end` {.inject.}: FVector;
                         radius {.inject.}: float32;
                         halfHeight {.inject.}: float32;
                         traceChannel {.inject.}: ETraceTypeQuery;
                         bTraceComplex {.inject.}: bool;
                         actorsToIgnore {.inject.}: var TArray[AActorPtr];
                         drawDebugType {.inject.}: EDrawDebugTrace::Type;
                         outHit {.inject.}: var FHitResult;
                         bIgnoreSelf {.inject.}: bool;
                         traceColor {.inject.}: FLinearColor;
                         traceHitColor {.inject.}: FLinearColor;
                         drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleTraceMultiForObjects*(worldContextObject {.inject.}: UObjectPtr;
                                  start {.inject.}: FVector;
                                  `end` {.inject.}: FVector;
                                  radius {.inject.}: float32;
                                  halfHeight {.inject.}: float32;
                                  bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                  outHits {.inject.}: var TArray[FHitResult];
                                  bIgnoreSelf {.inject.}: bool;
                                  traceColor {.inject.}: FLinearColor;
                                  traceHitColor {.inject.}: FLinearColor;
                                  drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleTraceMultiByProfile*(worldContextObject {.inject.}: UObjectPtr;
                                 start {.inject.}: FVector;
                                 `end` {.inject.}: FVector;
                                 radius {.inject.}: float32;
                                 halfHeight {.inject.}: float32;
                                 profileName {.inject.}: FName;
                                 bTraceComplex {.inject.}: bool;
    actorsToIgnore {.inject.}: var TArray[AActorPtr]; drawDebugType {.inject.}: EDrawDebugTrace::Type;
                                 outHits {.inject.}: var TArray[FHitResult];
                                 bIgnoreSelf {.inject.}: bool;
                                 traceColor {.inject.}: FLinearColor;
                                 traceHitColor {.inject.}: FLinearColor;
                                 drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleTraceMulti*(worldContextObject {.inject.}: UObjectPtr;
                        start {.inject.}: FVector; `end` {.inject.}: FVector;
                        radius {.inject.}: float32;
                        halfHeight {.inject.}: float32;
                        traceChannel {.inject.}: ETraceTypeQuery;
                        bTraceComplex {.inject.}: bool;
                        actorsToIgnore {.inject.}: var TArray[AActorPtr];
                        drawDebugType {.inject.}: EDrawDebugTrace::Type;
                        outHits {.inject.}: var TArray[FHitResult];
                        bIgnoreSelf {.inject.}: bool;
                        traceColor {.inject.}: FLinearColor;
                        traceHitColor {.inject.}: FLinearColor;
                        drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleOverlapComponents*(worldContextObject {.inject.}: UObjectPtr;
                               capsulePos {.inject.}: FVector;
                               radius {.inject.}: float32;
                               halfHeight {.inject.}: float32;
                               componentClassFilter {.inject.}: UClassPtr;
                               actorsToIgnore {.inject.}: var TArray[AActorPtr];
    outComponents {.inject.}: var TArray[UPrimitiveComponentPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc capsuleOverlapActors*(worldContextObject {.inject.}: UObjectPtr;
                           capsulePos {.inject.}: FVector;
                           radius {.inject.}: float32;
                           halfHeight {.inject.}: float32;
                           actorClassFilter {.inject.}: UClassPtr;
                           actorsToIgnore {.inject.}: var TArray[AActorPtr];
                           outActors {.inject.}: var TArray[AActorPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canLaunchURL*(uRL {.inject.}: FString): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc cancelTransaction*(index {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc breakSoftObjectPath*(inSoftObjectPath {.inject.}: FSoftObjectPath;
                          pathString {.inject.}: var FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc breakSoftClassPath*(inSoftClassPath {.inject.}: FSoftClassPath;
                         pathString {.inject.}: var FString): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boxTraceSingleForObjects*(worldContextObject {.inject.}: UObjectPtr;
                               start {.inject.}: FVector;
                               `end` {.inject.}: FVector;
                               halfSize {.inject.}: FVector;
                               orientation {.inject.}: FRotator;
                               bTraceComplex {.inject.}: bool;
                               actorsToIgnore {.inject.}: var TArray[AActorPtr];
                               drawDebugType {.inject.}: EDrawDebugTrace::Type;
                               outHit {.inject.}: var FHitResult;
                               bIgnoreSelf {.inject.}: bool;
                               traceColor {.inject.}: FLinearColor;
                               traceHitColor {.inject.}: FLinearColor;
                               drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boxTraceSingleByProfile*(worldContextObject {.inject.}: UObjectPtr;
                              start {.inject.}: FVector;
                              `end` {.inject.}: FVector;
                              halfSize {.inject.}: FVector;
                              orientation {.inject.}: FRotator;
                              profileName {.inject.}: FName;
                              bTraceComplex {.inject.}: bool;
                              actorsToIgnore {.inject.}: var TArray[AActorPtr];
                              drawDebugType {.inject.}: EDrawDebugTrace::Type;
                              outHit {.inject.}: var FHitResult;
                              bIgnoreSelf {.inject.}: bool;
                              traceColor {.inject.}: FLinearColor;
                              traceHitColor {.inject.}: FLinearColor;
                              drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boxTraceSingle*(worldContextObject {.inject.}: UObjectPtr;
                     start {.inject.}: FVector; `end` {.inject.}: FVector;
                     halfSize {.inject.}: FVector;
                     orientation {.inject.}: FRotator;
                     traceChannel {.inject.}: ETraceTypeQuery;
                     bTraceComplex {.inject.}: bool;
                     actorsToIgnore {.inject.}: var TArray[AActorPtr];
                     drawDebugType {.inject.}: EDrawDebugTrace::Type;
                     outHit {.inject.}: var FHitResult;
                     bIgnoreSelf {.inject.}: bool;
                     traceColor {.inject.}: FLinearColor;
                     traceHitColor {.inject.}: FLinearColor;
                     drawTime {.inject.}: float32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc boxTraceMultiForObjects*(worldContextObject {.inject.}: UObjectPtr;
                              start {.inject.}: FVector;
                              `end` {.inject.}: FVector;
                              halfSize {.inject.}: FVector;
                              orientation {.inject.}: FRotator;
                              bTraceComplex {.inject.}: bool;
                              actorsToIgnore {.inject.}: var TArray[AActorPtr];
                              drawDebugType {.inject.}: EDrawDebugTrace::Type;
                              outHits {.inject.}: var TArray[FHitResult];
                              bIgnoreSelf {.inject.}: bool;
                              traceColor {.inject.}: FLinearColor;
                              traceHitColor {.inject.}: FLinearColor;
                              drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boxTraceMultiByProfile*(worldContextObject {.inject.}: UObjectPtr;
                             start {.inject.}: FVector;
                             `end` {.inject.}: FVector;
                             halfSize {.inject.}: FVector;
                             orientation {.inject.}: FRotator;
                             profileName {.inject.}: FName;
                             bTraceComplex {.inject.}: bool;
                             actorsToIgnore {.inject.}: var TArray[AActorPtr];
                             drawDebugType {.inject.}: EDrawDebugTrace::Type;
                             outHits {.inject.}: var TArray[FHitResult];
                             bIgnoreSelf {.inject.}: bool;
                             traceColor {.inject.}: FLinearColor;
                             traceHitColor {.inject.}: FLinearColor;
                             drawTime {.inject.}: float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boxTraceMulti*(worldContextObject {.inject.}: UObjectPtr;
                    start {.inject.}: FVector; `end` {.inject.}: FVector;
                    halfSize {.inject.}: FVector;
                    orientation {.inject.}: FRotator;
                    traceChannel {.inject.}: ETraceTypeQuery;
                    bTraceComplex {.inject.}: bool;
                    actorsToIgnore {.inject.}: var TArray[AActorPtr];
                    drawDebugType {.inject.}: EDrawDebugTrace::Type;
                    outHits {.inject.}: var TArray[FHitResult];
                    bIgnoreSelf {.inject.}: bool;
                    traceColor {.inject.}: FLinearColor;
                    traceHitColor {.inject.}: FLinearColor;
                    drawTime {.inject.}: float32): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc boxOverlapComponents*(worldContextObject {.inject.}: UObjectPtr;
                           boxPos {.inject.}: FVector;
                           extent {.inject.}: FVector;
                           componentClassFilter {.inject.}: UClassPtr;
                           actorsToIgnore {.inject.}: var TArray[AActorPtr];
    outComponents {.inject.}: var TArray[UPrimitiveComponentPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc boxOverlapActors*(worldContextObject {.inject.}: UObjectPtr;
                       boxPos {.inject.}: FVector; boxExtent {.inject.}: FVector;
                       actorClassFilter {.inject.}: UClassPtr;
                       actorsToIgnore {.inject.}: var TArray[AActorPtr];
                       outActors {.inject.}: var TArray[AActorPtr]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc beginTransaction*(context {.inject.}: FString;
                       description {.inject.}: FText;
                       primaryObject {.inject.}: UObjectPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addFloatHistorySample*(value {.inject.}: float32;
                            floatHistory {.inject.}: var FDebugFloatHistory): FDebugFloatHistory {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc textTrimTrailing*(inText {.inject.}: var FText): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc textTrimPrecedingAndTrailing*(inText {.inject.}: var FText): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc textTrimPreceding*(inText {.inject.}: var FText): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc textToUpper*(inText {.inject.}: var FText): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc textToLower*(inText {.inject.}: var FText): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc textIsTransient*(inText {.inject.}: var FText): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc textIsFromStringTable*(text {.inject.}: var FText): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc textIsEmpty*(inText {.inject.}: var FText): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc textIsCultureInvariant*(inText {.inject.}: var FText): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc textFromStringTable*(tableId {.inject.}: FName; key {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stringTableIdAndKeyFromText*(text {.inject.}: FText;
                                  outTableId {.inject.}: var FName;
                                  outKey {.inject.}: var FString): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_TextText*(a {.inject.}: var FText; b {.inject.}: var FText): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notEqual_IgnoreCase_TextText*(a {.inject.}: var FText;
                                   b {.inject.}: var FText): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEmptyText*(): FText {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc format*(inPattern {.inject.}: FText;
             inArgs {.inject.}: TArray[FFormatArgumentData]): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findTextInLocalizationTable*(namespace {.inject.}: FString;
                                  key {.inject.}: FString;
                                  outText {.inject.}: var FText): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_TextText*(a {.inject.}: var FText; b {.inject.}: var FText): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc equalEqual_IgnoreCase_TextText*(a {.inject.}: var FText;
                                     b {.inject.}: var FText): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_VectorToText*(inVec {.inject.}: FVector): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc conv_Vector2dToText*(inVec {.inject.}: FVector2D): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_TransformToText*(inTrans {.inject.}: var FTransform): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_TextToString*(inText {.inject.}: var FText): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_StringToText*(inString {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_RotatorToText*(inRot {.inject.}: FRotator): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ObjectToText*(inObj {.inject.}: UObjectPtr): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_NameToText*(inName {.inject.}: FName): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc conv_IntToText*(value {.inject.}: int32; bAlwaysSign {.inject.}: bool;
                     bUseGrouping {.inject.}: bool;
                     minimumIntegralDigits {.inject.}: int32;
                     maximumIntegralDigits {.inject.}: int32): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_Int64ToText*(value {.inject.}: int64; bAlwaysSign {.inject.}: bool;
                       bUseGrouping {.inject.}: bool;
                       minimumIntegralDigits {.inject.}: int32;
                       maximumIntegralDigits {.inject.}: int32): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_FloatToText*(value {.inject.}: float32;
                       roundingMode {.inject.}: ERoundingMode;
                       bAlwaysSign {.inject.}: bool;
                       bUseGrouping {.inject.}: bool;
                       minimumIntegralDigits {.inject.}: int32;
                       maximumIntegralDigits {.inject.}: int32;
                       minimumFractionalDigits {.inject.}: int32;
                       maximumFractionalDigits {.inject.}: int32): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_DoubleToText*(inDouble {.inject.}: float64;
                        roundingMode {.inject.}: ERoundingMode;
                        bAlwaysSign {.inject.}: bool;
                        bUseGrouping {.inject.}: bool;
                        minimumIntegralDigits {.inject.}: int32;
                        maximumIntegralDigits {.inject.}: int32;
                        minimumFractionalDigits {.inject.}: int32;
                        maximumFractionalDigits {.inject.}: int32): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ColorToText*(inColor {.inject.}: FLinearColor): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc conv_ByteToText*(value {.inject.}: uint8): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc conv_BoolToText*(inBool {.inject.}: bool): FText {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc asTimeZoneTime_DateTime*(inDateTime {.inject.}: var FDateTime;
                              inTimeZone {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asTimeZoneDateTime_DateTime*(inDateTime {.inject.}: var FDateTime;
                                  inTimeZone {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asTimeZoneDate_DateTime*(inDateTime {.inject.}: var FDateTime;
                              inTimeZone {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asTimespan_Timespan*(inTimespan {.inject.}: var FTimespan): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asTime_DateTime*(`in` {.inject.}: var FDateTime): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asPercent_Float*(value {.inject.}: float32;
                      roundingMode {.inject.}: ERoundingMode;
                      bAlwaysSign {.inject.}: bool;
                      bUseGrouping {.inject.}: bool;
                      minimumIntegralDigits {.inject.}: int32;
                      maximumIntegralDigits {.inject.}: int32;
                      minimumFractionalDigits {.inject.}: int32;
                      maximumFractionalDigits {.inject.}: int32): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asDateTime_DateTime*(`in` {.inject.}: var FDateTime): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asDate_DateTime*(inDateTime {.inject.}: var FDateTime): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asCurrencyBase*(baseValue {.inject.}: int32;
                     currencyCode {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asCurrency_Integer*(value {.inject.}: int32;
                         roundingMode {.inject.}: ERoundingMode;
                         bAlwaysSign {.inject.}: bool;
                         bUseGrouping {.inject.}: bool;
                         minimumIntegralDigits {.inject.}: int32;
                         maximumIntegralDigits {.inject.}: int32;
                         minimumFractionalDigits {.inject.}: int32;
                         maximumFractionalDigits {.inject.}: int32;
                         currencyCode {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc asCurrency_Float*(value {.inject.}: float32;
                       roundingMode {.inject.}: ERoundingMode;
                       bAlwaysSign {.inject.}: bool;
                       bUseGrouping {.inject.}: bool;
                       minimumIntegralDigits {.inject.}: int32;
                       maximumIntegralDigits {.inject.}: int32;
                       minimumFractionalDigits {.inject.}: int32;
                       maximumFractionalDigits {.inject.}: int32;
                       currencyCode {.inject.}: FString): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `worldAsset`*(obj {.inject.}: ULevelStreamingPtr): TSoftObjectPtr[UWorld] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `worldAsset=`*(obj {.inject.}: ULevelStreamingPtr;
                    val {.inject.}: TSoftObjectPtr[UWorld]): void {.
    importcpp: "setworldAsset(@)", header: "UEGenBindings.h".}
proc `streamingPriority`*(obj {.inject.}: ULevelStreamingPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `streamingPriority=`*(obj {.inject.}: ULevelStreamingPtr;
                           val {.inject.}: int32): void {.
    importcpp: "setstreamingPriority(@)", header: "UEGenBindings.h".}
proc `levelTransform`*(obj {.inject.}: ULevelStreamingPtr): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `levelTransform=`*(obj {.inject.}: ULevelStreamingPtr;
                        val {.inject.}: FTransform): void {.
    importcpp: "setlevelTransform(@)", header: "UEGenBindings.h".}
proc `levelLODIndex`*(obj {.inject.}: ULevelStreamingPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `levelLODIndex=`*(obj {.inject.}: ULevelStreamingPtr; val {.inject.}: int32): void {.
    importcpp: "setlevelLODIndex(@)", header: "UEGenBindings.h".}
proc `bShouldBeVisible`*(obj {.inject.}: ULevelStreamingPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldBeVisible=`*(obj {.inject.}: ULevelStreamingPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbShouldBeVisible(@)", header: "UEGenBindings.h".}
proc `bShouldBeLoaded`*(obj {.inject.}: ULevelStreamingPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldBeLoaded=`*(obj {.inject.}: ULevelStreamingPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbShouldBeLoaded(@)", header: "UEGenBindings.h".}
proc `bShouldBlockOnLoad`*(obj {.inject.}: ULevelStreamingPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldBlockOnLoad=`*(obj {.inject.}: ULevelStreamingPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbShouldBlockOnLoad(@)", header: "UEGenBindings.h".}
proc `bShouldBlockOnUnload`*(obj {.inject.}: ULevelStreamingPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldBlockOnUnload=`*(obj {.inject.}: ULevelStreamingPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbShouldBlockOnUnload(@)", header: "UEGenBindings.h".}
proc `bDisableDistanceStreaming`*(obj {.inject.}: ULevelStreamingPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableDistanceStreaming=`*(obj {.inject.}: ULevelStreamingPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbDisableDistanceStreaming(@)", header: "UEGenBindings.h".}
proc shouldBeLoaded*(obj {.inject.}: ULevelStreamingPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShouldBeVisible*(obj {.inject.}: ULevelStreamingPtr;
                         bInShouldBeVisible {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShouldBeLoaded*(obj {.inject.}: ULevelStreamingPtr;
                        bInShouldBeLoaded {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPriority*(obj {.inject.}: ULevelStreamingPtr;
                  newPriority {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLevelLODIndex*(obj {.inject.}: ULevelStreamingPtr;
                       lODIndex {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setIsRequestingUnloadAndRemoval*(obj {.inject.}: ULevelStreamingPtr;
    bInIsRequestingUnloadAndRemoval {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isStreamingStatePending*(obj {.inject.}: ULevelStreamingPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isLevelVisible*(obj {.inject.}: ULevelStreamingPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isLevelLoaded*(obj {.inject.}: ULevelStreamingPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldAssetPackageFName*(obj {.inject.}: ULevelStreamingPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLoadedLevel*(obj {.inject.}: ULevelStreamingPtr): ULevelPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLevelScriptActor*(obj {.inject.}: ULevelStreamingPtr): ALevelScriptActorPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getIsRequestingUnloadAndRemoval*(obj {.inject.}: ULevelStreamingPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createInstance*(obj {.inject.}: ULevelStreamingPtr;
                     uniqueInstanceName {.inject.}: FString): ULevelStreamingPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadLevelInstanceBySoftObjectPtr*(worldContextObject {.inject.}: UObjectPtr;
                                       level {.inject.}: TSoftObjectPtr[UWorld];
                                       location {.inject.}: FVector;
                                       rotation {.inject.}: FRotator;
                                       bOutSuccess {.inject.}: var bool;
    optionalLevelNameOverride {.inject.}: FString;
    optionalLevelStreamingClass {.inject.}: TSubclassOf[ULevelStreamingDynamic];
                                       bLoadAsTempPackage {.inject.}: bool): ULevelStreamingDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc loadLevelInstance*(worldContextObject {.inject.}: UObjectPtr;
                        levelName {.inject.}: FString;
                        location {.inject.}: FVector;
                        rotation {.inject.}: FRotator;
                        bOutSuccess {.inject.}: var bool;
                        optionalLevelNameOverride {.inject.}: FString;
    optionalLevelStreamingClass {.inject.}: TSubclassOf[ULevelStreamingDynamic];
                        bLoadAsTempPackage {.inject.}: bool): ULevelStreamingDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCinematicMode*(obj {.inject.}: ALevelScriptActorPtr;
                       bCinematicMode {.inject.}: bool;
                       bHidePlayer {.inject.}: bool;
                       bAffectsHUD {.inject.}: bool;
                       bAffectsMovement {.inject.}: bool;
                       bAffectsTurning {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc remoteEvent*(obj {.inject.}: ALevelScriptActorPtr;
                  eventName {.inject.}: FName): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `streamingLevelNames`*(obj {.inject.}: ALevelStreamingVolumePtr): var TArray[
    FName] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `streamingLevelNames=`*(obj {.inject.}: ALevelStreamingVolumePtr;
                             val {.inject.}: TArray[FName]): void {.
    importcpp: "setstreamingLevelNames(@)", header: "UEGenBindings.h".}
proc `bEditorPreVisOnly`*(obj {.inject.}: ALevelStreamingVolumePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEditorPreVisOnly=`*(obj {.inject.}: ALevelStreamingVolumePtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbEditorPreVisOnly(@)", header: "UEGenBindings.h".}
proc `bDisabled`*(obj {.inject.}: ALevelStreamingVolumePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisabled=`*(obj {.inject.}: ALevelStreamingVolumePtr;
                   val {.inject.}: uint8): void {.importcpp: "setbDisabled(@)",
    header: "UEGenBindings.h".}
proc `streamingUsage`*(obj {.inject.}: ALevelStreamingVolumePtr): EStreamingVolumeUsage {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `streamingUsage=`*(obj {.inject.}: ALevelStreamingVolumePtr;
                        val {.inject.}: EStreamingVolumeUsage): void {.
    importcpp: "setstreamingUsage(@)", header: "UEGenBindings.h".}
proc `portalComponent`*(obj {.inject.}: ALightmassPortalPtr): TObjectPtr[
    ULightmassPortalComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `portalComponent=`*(obj {.inject.}: ALightmassPortalPtr;
                         val {.inject.}: TObjectPtr[ULightmassPortalComponent]): void {.
    importcpp: "setportalComponent(@)", header: "UEGenBindings.h".}
proc createNewLightWeightInstance*(actorClass {.inject.}: UClassPtr;
                                   transform {.inject.}: FTransform;
                                   layer {.inject.}: UDataLayerPtr): FActorInstanceHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertActorToLightWeightInstance*(actor {.inject.}: AActorPtr): FActorInstanceHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `staticMesh`*(obj {.inject.}: ALightWeightInstanceStaticMeshManagerPtr): TSoftObjectPtr[
    UStaticMesh] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `staticMesh=`*(obj {.inject.}: ALightWeightInstanceStaticMeshManagerPtr;
                    val {.inject.}: TSoftObjectPtr[UStaticMesh]): void {.
    importcpp: "setstaticMesh(@)", header: "UEGenBindings.h".}
proc `instancedStaticMeshComponent`*(obj {.inject.}: ALightWeightInstanceStaticMeshManagerPtr): TObjectPtr[
    UHierarchicalInstancedStaticMeshComponent] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `instancedStaticMeshComponent=`*(obj {.inject.}: ALightWeightInstanceStaticMeshManagerPtr;
    val {.inject.}: TObjectPtr[UHierarchicalInstancedStaticMeshComponent]): void {.
    importcpp: "setinstancedStaticMeshComponent(@)", header: "UEGenBindings.h".}
proc `intensityUnits`*(obj {.inject.}: ULocalLightComponentPtr): ELightUnits {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `intensityUnits=`*(obj {.inject.}: ULocalLightComponentPtr;
                        val {.inject.}: ELightUnits): void {.
    importcpp: "setintensityUnits(@)", header: "UEGenBindings.h".}
proc `attenuationRadius`*(obj {.inject.}: ULocalLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuationRadius=`*(obj {.inject.}: ULocalLightComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setattenuationRadius(@)", header: "UEGenBindings.h".}
proc setIntensityUnits*(obj {.inject.}: ULocalLightComponentPtr;
                        newIntensityUnits {.inject.}: ELightUnits): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAttenuationRadius*(obj {.inject.}: ULocalLightComponentPtr;
                           newRadius {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnitsConversionFactor*(srcUnits {.inject.}: ELightUnits;
                               targetUnits {.inject.}: ELightUnits;
                               cosHalfConeAngle {.inject.}: float32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numLODs`*(obj {.inject.}: ULODSyncComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numLODs=`*(obj {.inject.}: ULODSyncComponentPtr; val {.inject.}: int32): void {.
    importcpp: "setnumLODs(@)", header: "UEGenBindings.h".}
proc `forcedLOD`*(obj {.inject.}: ULODSyncComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forcedLOD=`*(obj {.inject.}: ULODSyncComponentPtr; val {.inject.}: int32): void {.
    importcpp: "setforcedLOD(@)", header: "UEGenBindings.h".}
proc `minLOD`*(obj {.inject.}: ULODSyncComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minLOD=`*(obj {.inject.}: ULODSyncComponentPtr; val {.inject.}: int32): void {.
    importcpp: "setminLOD(@)", header: "UEGenBindings.h".}
proc `componentsToSync`*(obj {.inject.}: ULODSyncComponentPtr): var TArray[
    FComponentSync] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `componentsToSync=`*(obj {.inject.}: ULODSyncComponentPtr;
                          val {.inject.}: TArray[FComponentSync]): void {.
    importcpp: "setcomponentsToSync(@)", header: "UEGenBindings.h".}
proc `customLODMapping`*(obj {.inject.}: ULODSyncComponentPtr): var TMap[FName,
    FLODMappingData] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customLODMapping=`*(obj {.inject.}: ULODSyncComponentPtr;
                          val {.inject.}: TMap[FName, FLODMappingData]): void {.
    importcpp: "setcustomLODMapping(@)", header: "UEGenBindings.h".}
proc getLODSyncDebugText*(obj {.inject.}: ULODSyncComponentPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `elements`*(obj {.inject.}: UMaterialBillboardComponentPtr): var TArray[
    FMaterialSpriteElement] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `elements=`*(obj {.inject.}: UMaterialBillboardComponentPtr;
                  val {.inject.}: TArray[FMaterialSpriteElement]): void {.
    importcpp: "setelements(@)", header: "UEGenBindings.h".}
proc setElements*(obj {.inject.}: UMaterialBillboardComponentPtr;
                  newElements {.inject.}: var TArray[FMaterialSpriteElement]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addElement*(obj {.inject.}: UMaterialBillboardComponentPtr;
                 material {.inject.}: UMaterialInterfacePtr;
                 distanceToOpacityCurve {.inject.}: UCurveFloatPtr;
                 bSizeIsInScreenSpace {.inject.}: bool;
                 baseSizeX {.inject.}: float32; baseSizeY {.inject.}: float32;
                 distanceToSizeCurve {.inject.}: UCurveFloatPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `texture`*(obj {.inject.}: UMaterialExpressionTextureBasePtr): TObjectPtr[
    UTexture] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `texture=`*(obj {.inject.}: UMaterialExpressionTextureBasePtr;
                 val {.inject.}: TObjectPtr[UTexture]): void {.
    importcpp: "settexture(@)", header: "UEGenBindings.h".}
proc `samplerType`*(obj {.inject.}: UMaterialExpressionTextureBasePtr): EMaterialSamplerType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `samplerType=`*(obj {.inject.}: UMaterialExpressionTextureBasePtr;
                     val {.inject.}: EMaterialSamplerType): void {.
    importcpp: "setsamplerType(@)", header: "UEGenBindings.h".}
proc `r`*(obj {.inject.}: UMaterialExpressionConstantPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `r=`*(obj {.inject.}: UMaterialExpressionConstantPtr;
           val {.inject.}: float32): void {.importcpp: "setr(@)",
    header: "UEGenBindings.h".}
proc `r`*(obj {.inject.}: UMaterialExpressionConstant2VectorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `r=`*(obj {.inject.}: UMaterialExpressionConstant2VectorPtr;
           val {.inject.}: float32): void {.importcpp: "setr(@)",
    header: "UEGenBindings.h".}
proc `g`*(obj {.inject.}: UMaterialExpressionConstant2VectorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `g=`*(obj {.inject.}: UMaterialExpressionConstant2VectorPtr;
           val {.inject.}: float32): void {.importcpp: "setg(@)",
    header: "UEGenBindings.h".}
proc `constant`*(obj {.inject.}: UMaterialExpressionConstant3VectorPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `constant=`*(obj {.inject.}: UMaterialExpressionConstant3VectorPtr;
                  val {.inject.}: FLinearColor): void {.
    importcpp: "setconstant(@)", header: "UEGenBindings.h".}
proc `constant`*(obj {.inject.}: UMaterialExpressionConstant4VectorPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `constant=`*(obj {.inject.}: UMaterialExpressionConstant4VectorPtr;
                  val {.inject.}: FLinearColor): void {.
    importcpp: "setconstant(@)", header: "UEGenBindings.h".}
proc `inputName`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `inputName=`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr;
                   val {.inject.}: FName): void {.importcpp: "setinputName(@)",
    header: "UEGenBindings.h".}
proc `inputType`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr): EFunctionInputType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `inputType=`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr;
                   val {.inject.}: EFunctionInputType): void {.
    importcpp: "setinputType(@)", header: "UEGenBindings.h".}
proc `previewValue`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr): FVector4 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `previewValue=`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr;
                      val {.inject.}: FVector4): void {.
    importcpp: "setpreviewValue(@)", header: "UEGenBindings.h".}
proc `bUsePreviewValueAsDefault`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsePreviewValueAsDefault=`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbUsePreviewValueAsDefault(@)", header: "UEGenBindings.h".}
proc `sortPriority`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sortPriority=`*(obj {.inject.}: UMaterialExpressionFunctionInputPtr;
                      val {.inject.}: int32): void {.
    importcpp: "setsortPriority(@)", header: "UEGenBindings.h".}
proc `outputName`*(obj {.inject.}: UMaterialExpressionFunctionOutputPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `outputName=`*(obj {.inject.}: UMaterialExpressionFunctionOutputPtr;
                    val {.inject.}: FName): void {.
    importcpp: "setoutputName(@)", header: "UEGenBindings.h".}
proc `value`*(obj {.inject.}: UMaterialExpressionConstantDoublePtr): float64 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `value=`*(obj {.inject.}: UMaterialExpressionConstantDoublePtr;
               val {.inject.}: float64): void {.importcpp: "setvalue(@)",
    header: "UEGenBindings.h".}
proc setMaterialFunction*(obj {.inject.}: UMaterialExpressionMaterialFunctionCallPtr;
    newMaterialFunction {.inject.}: UMaterialFunctionInterfacePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subsurfaceProfile`*(obj {.inject.}: UMaterialExpressionStrataLegacyConversionPtr): TObjectPtr[
    USubsurfaceProfile] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subsurfaceProfile=`*(obj {.inject.}: UMaterialExpressionStrataLegacyConversionPtr;
                           val {.inject.}: TObjectPtr[USubsurfaceProfile]): void {.
    importcpp: "setsubsurfaceProfile(@)", header: "UEGenBindings.h".}
proc `subsurfaceProfile`*(obj {.inject.}: UMaterialExpressionStrataSlabBSDFPtr): TObjectPtr[
    USubsurfaceProfile] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `subsurfaceProfile=`*(obj {.inject.}: UMaterialExpressionStrataSlabBSDFPtr;
                           val {.inject.}: TObjectPtr[USubsurfaceProfile]): void {.
    importcpp: "setsubsurfaceProfile(@)", header: "UEGenBindings.h".}
proc `coordinateIndex`*(obj {.inject.}: UMaterialExpressionTextureCoordinatePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `coordinateIndex=`*(obj {.inject.}: UMaterialExpressionTextureCoordinatePtr;
                         val {.inject.}: int32): void {.
    importcpp: "setcoordinateIndex(@)", header: "UEGenBindings.h".}
proc `uTiling`*(obj {.inject.}: UMaterialExpressionTextureCoordinatePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `uTiling=`*(obj {.inject.}: UMaterialExpressionTextureCoordinatePtr;
                 val {.inject.}: float32): void {.importcpp: "setuTiling(@)",
    header: "UEGenBindings.h".}
proc `vTiling`*(obj {.inject.}: UMaterialExpressionTextureCoordinatePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `vTiling=`*(obj {.inject.}: UMaterialExpressionTextureCoordinatePtr;
                 val {.inject.}: float32): void {.importcpp: "setvTiling(@)",
    header: "UEGenBindings.h".}
proc `parent`*(obj {.inject.}: UMaterialFunctionInstancePtr): TObjectPtr[
    UMaterialFunctionInterface] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `parent=`*(obj {.inject.}: UMaterialFunctionInstancePtr;
                val {.inject.}: TObjectPtr[UMaterialFunctionInterface]): void {.
    importcpp: "setparent(@)", header: "UEGenBindings.h".}
proc `targetActors`*(obj {.inject.}: AMaterialInstanceActorPtr): var TArray[
    TObjectPtr[AActor]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetActors=`*(obj {.inject.}: AMaterialInstanceActorPtr;
                      val {.inject.}: TArray[TObjectPtr[AActor]]): void {.
    importcpp: "settargetActors(@)", header: "UEGenBindings.h".}
proc setVectorParameterValueByInfo*(obj {.inject.}: UMaterialInstanceDynamicPtr;
    parameterInfo {.inject.}: var FMaterialParameterInfo;
                                    value {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVectorParameterValue*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                              parameterName {.inject.}: FName;
                              value {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTextureParameterValueByInfo*(obj {.inject.}: UMaterialInstanceDynamicPtr;
    parameterInfo {.inject.}: var FMaterialParameterInfo;
                                     value {.inject.}: UTexturePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTextureParameterValue*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                               parameterName {.inject.}: FName;
                               value {.inject.}: UTexturePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setScalarParameterValueByInfo*(obj {.inject.}: UMaterialInstanceDynamicPtr;
    parameterInfo {.inject.}: var FMaterialParameterInfo;
                                    value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setScalarParameterValue*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                              parameterName {.inject.}: FName;
                              value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRuntimeVirtualTextureParameterValueByInfo*(
    obj {.inject.}: UMaterialInstanceDynamicPtr;
    parameterInfo {.inject.}: var FMaterialParameterInfo;
    value {.inject.}: URuntimeVirtualTexturePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setRuntimeVirtualTextureParameterValue*(
    obj {.inject.}: UMaterialInstanceDynamicPtr; parameterName {.inject.}: FName;
    value {.inject.}: URuntimeVirtualTexturePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setDoubleVectorParameterValue*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                                    parameterName {.inject.}: FName;
                                    value {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc interpolateMaterialInstanceParams*(obj {.inject.}: UMaterialInstanceDynamicPtr;
    sourceA {.inject.}: UMaterialInstancePtr; sourceB {.inject.}: UMaterialInstancePtr;
                                        alpha {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVectorParameterValueByInfo*(obj {.inject.}: UMaterialInstanceDynamicPtr;
    parameterInfo {.inject.}: var FMaterialParameterInfo): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVectorParameterValue*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                              parameterName {.inject.}: FName): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTextureParameterValueByInfo*(obj {.inject.}: UMaterialInstanceDynamicPtr;
    parameterInfo {.inject.}: var FMaterialParameterInfo): UTexturePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTextureParameterValue*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                               parameterName {.inject.}: FName): UTexturePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScalarParameterValueByInfo*(obj {.inject.}: UMaterialInstanceDynamicPtr;
    parameterInfo {.inject.}: var FMaterialParameterInfo): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScalarParameterValue*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                              parameterName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc copyMaterialInstanceParameters*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                                     source {.inject.}: UMaterialInterfacePtr;
                                     bQuickParametersOnly {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc copyParameterOverrides*(obj {.inject.}: UMaterialInstanceDynamicPtr;
                             materialInstance {.inject.}: UMaterialInstancePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVectorParameterNames*(obj {.inject.}: UMaterialParameterCollectionPtr): TArray[FName] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVectorParameterDefaultValue*(obj {.inject.}: UMaterialParameterCollectionPtr;
                                     parameterName {.inject.}: FName;
                                     bParameterFound {.inject.}: var bool): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScalarParameterNames*(obj {.inject.}: UMaterialParameterCollectionPtr): TArray[FName] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScalarParameterDefaultValue*(obj {.inject.}: UMaterialParameterCollectionPtr;
                                     parameterName {.inject.}: FName;
                                     bParameterFound {.inject.}: var bool): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `matineeData`*(obj {.inject.}: AMatineeActorPtr): TObjectPtr[UInterpData] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `matineeData=`*(obj {.inject.}: AMatineeActorPtr;
                     val {.inject.}: TObjectPtr[UInterpData]): void {.
    importcpp: "setmatineeData(@)", header: "UEGenBindings.h".}
proc `playRate`*(obj {.inject.}: AMatineeActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playRate=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: float32): void {.
    importcpp: "setplayRate(@)", header: "UEGenBindings.h".}
proc `bPlayOnLevelLoad`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPlayOnLevelLoad=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbPlayOnLevelLoad(@)", header: "UEGenBindings.h".}
proc `bForceStartPos`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceStartPos=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbForceStartPos(@)", header: "UEGenBindings.h".}
proc `forceStartPosition`*(obj {.inject.}: AMatineeActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forceStartPosition=`*(obj {.inject.}: AMatineeActorPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setforceStartPosition(@)", header: "UEGenBindings.h".}
proc `bLooping`*(obj {.inject.}: AMatineeActorPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bLooping=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbLooping(@)", header: "UEGenBindings.h".}
proc `bRewindOnPlay`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRewindOnPlay=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbRewindOnPlay(@)", header: "UEGenBindings.h".}
proc `bNoResetOnRewind`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bNoResetOnRewind=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbNoResetOnRewind(@)", header: "UEGenBindings.h".}
proc `bRewindIfAlreadyPlaying`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRewindIfAlreadyPlaying=`*(obj {.inject.}: AMatineeActorPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbRewindIfAlreadyPlaying(@)", header: "UEGenBindings.h".}
proc `bDisableRadioFilter`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableRadioFilter=`*(obj {.inject.}: AMatineeActorPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbDisableRadioFilter(@)", header: "UEGenBindings.h".}
proc `bClientSideOnly`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bClientSideOnly=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbClientSideOnly(@)", header: "UEGenBindings.h".}
proc `bSkipUpdateIfNotVisible`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSkipUpdateIfNotVisible=`*(obj {.inject.}: AMatineeActorPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbSkipUpdateIfNotVisible(@)", header: "UEGenBindings.h".}
proc `bIsSkippable`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsSkippable=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsSkippable(@)", header: "UEGenBindings.h".}
proc `preferredSplitScreenNum`*(obj {.inject.}: AMatineeActorPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `preferredSplitScreenNum=`*(obj {.inject.}: AMatineeActorPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setpreferredSplitScreenNum(@)", header: "UEGenBindings.h".}
proc `bDisableMovementInput`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableMovementInput=`*(obj {.inject.}: AMatineeActorPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbDisableMovementInput(@)", header: "UEGenBindings.h".}
proc `bDisableLookAtInput`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableLookAtInput=`*(obj {.inject.}: AMatineeActorPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbDisableLookAtInput(@)", header: "UEGenBindings.h".}
proc `bHidePlayer`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bHidePlayer=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbHidePlayer(@)", header: "UEGenBindings.h".}
proc `bHideHud`*(obj {.inject.}: AMatineeActorPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bHideHud=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbHideHud(@)", header: "UEGenBindings.h".}
proc `bIsPlaying`*(obj {.inject.}: AMatineeActorPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsPlaying=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsPlaying(@)", header: "UEGenBindings.h".}
proc `interpPosition`*(obj {.inject.}: AMatineeActorPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpPosition=`*(obj {.inject.}: AMatineeActorPtr; val {.inject.}: float32): void {.
    importcpp: "setinterpPosition(@)", header: "UEGenBindings.h".}
proc stop*(obj {.inject.}: AMatineeActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPosition*(obj {.inject.}: AMatineeActorPtr;
                  newPosition {.inject.}: float32; bJump {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLoopingState*(obj {.inject.}: AMatineeActorPtr;
                      bNewLooping {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc reverse*(obj {.inject.}: AMatineeActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc play*(obj {.inject.}: AMatineeActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc pause*(obj {.inject.}: AMatineeActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc enableGroupByName*(obj {.inject.}: AMatineeActorPtr;
                        groupName {.inject.}: FString; bEnable {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc changePlaybackDirection*(obj {.inject.}: AMatineeActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removePaintedVertices*(staticMeshComponent {.inject.}: UStaticMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc paintVerticesSingleColor*(staticMeshComponent {.inject.}: UStaticMeshComponentPtr;
                               fillColor {.inject.}: var FLinearColor;
                               bConvertToSRGB {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc paintVerticesLerpAlongAxis*(staticMeshComponent {.inject.}: UStaticMeshComponentPtr;
                                 startColor {.inject.}: var FLinearColor;
                                 endColor {.inject.}: var FLinearColor;
                                 axis {.inject.}: EVertexPaintAxis;
                                 bConvertToSRGB {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc markPropertyDirtyFromRepIndex*(`object` {.inject.}: UObjectPtr;
                                    repIndex {.inject.}: int32;
                                    propertyName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc markPropertyDirty*(`object` {.inject.}: UObjectPtr;
                        propertyName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `text`*(obj {.inject.}: ANotePtr): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `text=`*(obj {.inject.}: ANotePtr; val {.inject.}: FString): void {.
    importcpp: "settext(@)", header: "UEGenBindings.h".}
proc containsEmitterType*(obj {.inject.}: UParticleSystemPtr;
                          typeData {.inject.}: UClassPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightingChannels`*(obj {.inject.}: UParticleModuleLightPtr): FLightingChannels {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightingChannels=`*(obj {.inject.}: UParticleModuleLightPtr;
                          val {.inject.}: FLightingChannels): void {.
    importcpp: "setlightingChannels(@)", header: "UEGenBindings.h".}
proc `volumetricScatteringIntensity`*(obj {.inject.}: UParticleModuleLightPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricScatteringIntensity=`*(obj {.inject.}: UParticleModuleLightPtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setvolumetricScatteringIntensity(@)", header: "UEGenBindings.h".}
proc setVectorParameter*(obj {.inject.}: UFXSystemComponentPtr;
                         parameterName {.inject.}: FName;
                         param {.inject.}: FVector): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setUseAutoManageAttachment*(obj {.inject.}: UFXSystemComponentPtr;
                                 bAutoManage {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIntParameter*(obj {.inject.}: UFXSystemComponentPtr;
                      parameterName {.inject.}: FName; param {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFloatParameter*(obj {.inject.}: UFXSystemComponentPtr;
                        parameterName {.inject.}: FName;
                        param {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setEmitterEnable*(obj {.inject.}: UFXSystemComponentPtr;
                       emitterName {.inject.}: FName;
                       bNewEnableState {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setColorParameter*(obj {.inject.}: UFXSystemComponentPtr;
                        parameterName {.inject.}: FName;
                        param {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoolParameter*(obj {.inject.}: UFXSystemComponentPtr;
                       parameterName {.inject.}: FName; param {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAutoAttachmentParameters*(obj {.inject.}: UFXSystemComponentPtr;
                                  parent {.inject.}: USceneComponentPtr;
                                  socketName {.inject.}: FName;
                                  locationRule {.inject.}: EAttachmentRule;
                                  rotationRule {.inject.}: EAttachmentRule;
                                  scaleRule {.inject.}: EAttachmentRule): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setActorParameter*(obj {.inject.}: UFXSystemComponentPtr;
                        parameterName {.inject.}: FName;
                        param {.inject.}: AActorPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc releaseToPool*(obj {.inject.}: UFXSystemComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFXSystemAsset*(obj {.inject.}: UFXSystemComponentPtr): UFXSystemAssetPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `Template`*(obj {.inject.}: UParticleSystemComponentPtr): TObjectPtr[
    UParticleSystem] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `Template=`*(obj {.inject.}: UParticleSystemComponentPtr;
                  val {.inject.}: TObjectPtr[UParticleSystem]): void {.
    importcpp: "settemplate(@)", header: "UEGenBindings.h".}
proc `bResetOnDetach`*(obj {.inject.}: UParticleSystemComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bResetOnDetach=`*(obj {.inject.}: UParticleSystemComponentPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbResetOnDetach(@)", header: "UEGenBindings.h".}
proc `bAllowRecycling`*(obj {.inject.}: UParticleSystemComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAllowRecycling=`*(obj {.inject.}: UParticleSystemComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbAllowRecycling(@)", header: "UEGenBindings.h".}
proc `bAutoManageAttachment`*(obj {.inject.}: UParticleSystemComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoManageAttachment=`*(obj {.inject.}: UParticleSystemComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbAutoManageAttachment(@)", header: "UEGenBindings.h".}
proc `bAutoAttachWeldSimulatedBodies`*(obj {.inject.}: UParticleSystemComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoAttachWeldSimulatedBodies=`*(obj {.inject.}: UParticleSystemComponentPtr;
                                        val {.inject.}: uint8): void {.
    importcpp: "setbAutoAttachWeldSimulatedBodies(@)", header: "UEGenBindings.h".}
proc `bOverrideLODMethod`*(obj {.inject.}: UParticleSystemComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bOverrideLODMethod=`*(obj {.inject.}: UParticleSystemComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbOverrideLODMethod(@)", header: "UEGenBindings.h".}
proc `lODMethod`*(obj {.inject.}: UParticleSystemComponentPtr): ParticleSystemLODMethod {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lODMethod=`*(obj {.inject.}: UParticleSystemComponentPtr;
                   val {.inject.}: ParticleSystemLODMethod): void {.
    importcpp: "setlODMethod(@)", header: "UEGenBindings.h".}
proc `instanceParameters`*(obj {.inject.}: UParticleSystemComponentPtr): var TArray[
    FParticleSysParam] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `instanceParameters=`*(obj {.inject.}: UParticleSystemComponentPtr;
                            val {.inject.}: TArray[FParticleSysParam]): void {.
    importcpp: "setinstanceParameters(@)", header: "UEGenBindings.h".}
proc `secondsBeforeInactive`*(obj {.inject.}: UParticleSystemComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `secondsBeforeInactive=`*(obj {.inject.}: UParticleSystemComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setsecondsBeforeInactive(@)", header: "UEGenBindings.h".}
proc `customTimeDilation`*(obj {.inject.}: UParticleSystemComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customTimeDilation=`*(obj {.inject.}: UParticleSystemComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setcustomTimeDilation(@)", header: "UEGenBindings.h".}
proc `autoAttachParent`*(obj {.inject.}: UParticleSystemComponentPtr): TWeakObjectPtr[
    USceneComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachParent=`*(obj {.inject.}: UParticleSystemComponentPtr;
                          val {.inject.}: TWeakObjectPtr[USceneComponent]): void {.
    importcpp: "setautoAttachParent(@)", header: "UEGenBindings.h".}
proc `autoAttachSocketName`*(obj {.inject.}: UParticleSystemComponentPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachSocketName=`*(obj {.inject.}: UParticleSystemComponentPtr;
                              val {.inject.}: FName): void {.
    importcpp: "setautoAttachSocketName(@)", header: "UEGenBindings.h".}
proc `autoAttachLocationRule`*(obj {.inject.}: UParticleSystemComponentPtr): EAttachmentRule {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachLocationRule=`*(obj {.inject.}: UParticleSystemComponentPtr;
                                val {.inject.}: EAttachmentRule): void {.
    importcpp: "setautoAttachLocationRule(@)", header: "UEGenBindings.h".}
proc `autoAttachRotationRule`*(obj {.inject.}: UParticleSystemComponentPtr): EAttachmentRule {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachRotationRule=`*(obj {.inject.}: UParticleSystemComponentPtr;
                                val {.inject.}: EAttachmentRule): void {.
    importcpp: "setautoAttachRotationRule(@)", header: "UEGenBindings.h".}
proc `autoAttachScaleRule`*(obj {.inject.}: UParticleSystemComponentPtr): EAttachmentRule {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoAttachScaleRule=`*(obj {.inject.}: UParticleSystemComponentPtr;
                             val {.inject.}: EAttachmentRule): void {.
    importcpp: "setautoAttachScaleRule(@)", header: "UEGenBindings.h".}
proc setTrailSourceData*(obj {.inject.}: UParticleSystemComponentPtr;
                         inFirstSocketName {.inject.}: FName;
                         inSecondSocketName {.inject.}: FName;
                         inWidthMode {.inject.}: ETrailWidthMode;
                         inWidth {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTemplate*(obj {.inject.}: UParticleSystemComponentPtr;
                  newTemplate {.inject.}: UParticleSystemPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaterialParameter*(obj {.inject.}: UParticleSystemComponentPtr;
                           parameterName {.inject.}: FName;
                           param {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBeamTargetTangent*(obj {.inject.}: UParticleSystemComponentPtr;
                           emitterIndex {.inject.}: int32;
                           newTangentPoint {.inject.}: FVector;
                           targetIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBeamTargetStrength*(obj {.inject.}: UParticleSystemComponentPtr;
                            emitterIndex {.inject.}: int32;
                            newTargetStrength {.inject.}: float32;
                            targetIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBeamTargetPoint*(obj {.inject.}: UParticleSystemComponentPtr;
                         emitterIndex {.inject.}: int32;
                         newTargetPoint {.inject.}: FVector;
                         targetIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBeamSourceTangent*(obj {.inject.}: UParticleSystemComponentPtr;
                           emitterIndex {.inject.}: int32;
                           newTangentPoint {.inject.}: FVector;
                           sourceIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBeamSourceStrength*(obj {.inject.}: UParticleSystemComponentPtr;
                            emitterIndex {.inject.}: int32;
                            newSourceStrength {.inject.}: float32;
                            sourceIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBeamSourcePoint*(obj {.inject.}: UParticleSystemComponentPtr;
                         emitterIndex {.inject.}: int32;
                         newSourcePoint {.inject.}: FVector;
                         sourceIndex {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBeamEndPoint*(obj {.inject.}: UParticleSystemComponentPtr;
                      emitterIndex {.inject.}: int32;
                      newEndPoint {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAutoAttachParams*(obj {.inject.}: UParticleSystemComponentPtr;
                          parent {.inject.}: USceneComponentPtr;
                          socketName {.inject.}: FName;
                          locationType {.inject.}: EAttachLocation::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumActiveParticles*(obj {.inject.}: UParticleSystemComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNamedMaterial*(obj {.inject.}: UParticleSystemComponentPtr;
                       inName {.inject.}: FName): UMaterialInterfacePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBeamTargetTangent*(obj {.inject.}: UParticleSystemComponentPtr;
                           emitterIndex {.inject.}: int32;
                           targetIndex {.inject.}: int32;
                           outTangentPoint {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBeamTargetStrength*(obj {.inject.}: UParticleSystemComponentPtr;
                            emitterIndex {.inject.}: int32;
                            targetIndex {.inject.}: int32;
                            outTargetStrength {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBeamTargetPoint*(obj {.inject.}: UParticleSystemComponentPtr;
                         emitterIndex {.inject.}: int32;
                         targetIndex {.inject.}: int32;
                         outTargetPoint {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBeamSourceTangent*(obj {.inject.}: UParticleSystemComponentPtr;
                           emitterIndex {.inject.}: int32;
                           sourceIndex {.inject.}: int32;
                           outTangentPoint {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBeamSourceStrength*(obj {.inject.}: UParticleSystemComponentPtr;
                            emitterIndex {.inject.}: int32;
                            sourceIndex {.inject.}: int32;
                            outSourceStrength {.inject.}: var float32): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBeamSourcePoint*(obj {.inject.}: UParticleSystemComponentPtr;
                         emitterIndex {.inject.}: int32;
                         sourceIndex {.inject.}: int32;
                         outSourcePoint {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBeamEndPoint*(obj {.inject.}: UParticleSystemComponentPtr;
                      emitterIndex {.inject.}: int32;
                      outEndPoint {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc generateParticleEvent*(obj {.inject.}: UParticleSystemComponentPtr;
                            inEventName {.inject.}: FName;
                            inEmitterTime {.inject.}: float32;
                            inLocation {.inject.}: FVector;
                            inDirection {.inject.}: FVector;
                            inVelocity {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc endTrails*(obj {.inject.}: UParticleSystemComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createNamedDynamicMaterialInstance*(
    obj {.inject.}: UParticleSystemComponentPtr; inName {.inject.}: FName;
    sourceMaterial {.inject.}: UMaterialInterfacePtr): UMaterialInstanceDynamicPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc beginTrails*(obj {.inject.}: UParticleSystemComponentPtr;
                  inFirstSocketName {.inject.}: FName;
                  inSecondSocketName {.inject.}: FName;
                  inWidthMode {.inject.}: ETrailWidthMode;
                  inWidth {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `noiseLifetime`*(obj {.inject.}: UPawnNoiseEmitterComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `noiseLifetime=`*(obj {.inject.}: UPawnNoiseEmitterComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setnoiseLifetime(@)", header: "UEGenBindings.h".}
proc makeNoise*(obj {.inject.}: UPawnNoiseEmitterComponentPtr;
                noiseMaker {.inject.}: AActorPtr; loudness {.inject.}: float32;
                noiseLocation {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `strengthMultiplyer`*(obj {.inject.}: UPhysicalAnimationComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `strengthMultiplyer=`*(obj {.inject.}: UPhysicalAnimationComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setstrengthMultiplyer(@)", header: "UEGenBindings.h".}
proc setStrengthMultiplyer*(obj {.inject.}: UPhysicalAnimationComponentPtr;
                            inStrengthMultiplyer {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSkeletalMeshComponent*(obj {.inject.}: UPhysicalAnimationComponentPtr;
    inSkeletalMeshComponent {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBodyTargetTransform*(obj {.inject.}: UPhysicalAnimationComponentPtr;
                             bodyName {.inject.}: FName): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyPhysicalAnimationSettingsBelow*(
    obj {.inject.}: UPhysicalAnimationComponentPtr; bodyName {.inject.}: FName;
    physicalAnimationData {.inject.}: var FPhysicalAnimationData;
    bIncludeSelf {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc applyPhysicalAnimationSettings*(obj {.inject.}: UPhysicalAnimationComponentPtr;
                                     bodyName {.inject.}: FName;
    physicalAnimationData {.inject.}: var FPhysicalAnimationData): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc applyPhysicalAnimationProfileBelow*(
    obj {.inject.}: UPhysicalAnimationComponentPtr; bodyName {.inject.}: FName;
    profileName {.inject.}: FName; bIncludeSelf {.inject.}: bool;
    bClearNotFound {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `maskTexture`*(obj {.inject.}: UPhysicalMaterialMaskPtr): TObjectPtr[
    UTexture] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maskTexture=`*(obj {.inject.}: UPhysicalMaterialMaskPtr;
                     val {.inject.}: TObjectPtr[UTexture]): void {.
    importcpp: "setmaskTexture(@)", header: "UEGenBindings.h".}
proc `uVChannelIndex`*(obj {.inject.}: UPhysicalMaterialMaskPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `uVChannelIndex=`*(obj {.inject.}: UPhysicalMaterialMaskPtr;
                        val {.inject.}: int32): void {.
    importcpp: "setuVChannelIndex(@)", header: "UEGenBindings.h".}
proc `addressX`*(obj {.inject.}: UPhysicalMaterialMaskPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `addressX=`*(obj {.inject.}: UPhysicalMaterialMaskPtr;
                  val {.inject.}: TextureAddress): void {.
    importcpp: "setaddressX(@)", header: "UEGenBindings.h".}
proc `addressY`*(obj {.inject.}: UPhysicalMaterialMaskPtr): TextureAddress {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `addressY=`*(obj {.inject.}: UPhysicalMaterialMaskPtr;
                  val {.inject.}: TextureAddress): void {.
    importcpp: "setaddressY(@)", header: "UEGenBindings.h".}
proc getConstraints*(obj {.inject.}: UPhysicsAssetPtr;
                     bIncludesTerminated {.inject.}: bool;
    outConstraints {.inject.}: var TArray[FConstraintInstanceAccessor]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstraintByName*(obj {.inject.}: UPhysicsAssetPtr;
                          constraintName {.inject.}: FName): FConstraintInstanceAccessor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstraintByBoneNames*(obj {.inject.}: UPhysicsAssetPtr;
                               bone1Name {.inject.}: FName;
                               bone2Name {.inject.}: FName): FConstraintInstanceAccessor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `impactThreshold`*(obj {.inject.}: UPhysicsCollisionHandlerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `impactThreshold=`*(obj {.inject.}: UPhysicsCollisionHandlerPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setimpactThreshold(@)", header: "UEGenBindings.h".}
proc `impactReFireDelay`*(obj {.inject.}: UPhysicsCollisionHandlerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `impactReFireDelay=`*(obj {.inject.}: UPhysicsCollisionHandlerPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setimpactReFireDelay(@)", header: "UEGenBindings.h".}
proc `defaultImpactSound`*(obj {.inject.}: UPhysicsCollisionHandlerPtr): TObjectPtr[
    USoundBase] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultImpactSound=`*(obj {.inject.}: UPhysicsCollisionHandlerPtr;
                            val {.inject.}: TObjectPtr[USoundBase]): void {.
    importcpp: "setdefaultImpactSound(@)", header: "UEGenBindings.h".}
proc `constraintComp`*(obj {.inject.}: APhysicsConstraintActorPtr): TObjectPtr[
    UPhysicsConstraintComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `constraintComp=`*(obj {.inject.}: APhysicsConstraintActorPtr;
                        val {.inject.}: TObjectPtr[UPhysicsConstraintComponent]): void {.
    importcpp: "setconstraintComp(@)", header: "UEGenBindings.h".}
proc setOrientationDriveTwistAndSwing*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                                       bEnableTwistDrive {.inject.}: bool;
                                       bEnableSwingDrive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOrientationDriveSLERP*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                               bEnableSLERP {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearZLimit*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                      constraintType {.inject.}: ELinearConstraintMotion;
                      limitSize {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLinearYLimit*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                      constraintType {.inject.}: ELinearConstraintMotion;
                      limitSize {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLinearXLimit*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                      constraintType {.inject.}: ELinearConstraintMotion;
                      limitSize {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLinearVelocityTarget*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                              inVelTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearVelocityDrive*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                             bEnableDriveX {.inject.}: bool;
                             bEnableDriveY {.inject.}: bool;
                             bEnableDriveZ {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearPositionTarget*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                              inPosTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearPositionDrive*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                             bEnableDriveX {.inject.}: bool;
                             bEnableDriveY {.inject.}: bool;
                             bEnableDriveZ {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearPlasticity*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                          bLinearPlasticity {.inject.}: bool;
                          linearPlasticityThreshold {.inject.}: float32;
                          plasticityType {.inject.}: EConstraintPlasticityType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearDriveParams*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                           positionStrength {.inject.}: float32;
                           velocityStrength {.inject.}: float32;
                           inForceLimit {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearBreakable*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                         bLinearBreakable {.inject.}: bool;
                         linearBreakThreshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDisableCollision*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                          bDisableCollision {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setContactTransferScale*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                              contactTransferScale {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstraintReferencePosition*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                                     frame {.inject.}: EConstraintFrame::Type;
                                     refPosition {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstraintReferenceOrientation*(obj {.inject.}: UPhysicsConstraintComponentPtr;
    frame {.inject.}: EConstraintFrame::Type; priAxis {.inject.}: var FVector;
                                        secAxis {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstraintReferenceFrame*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                                  frame {.inject.}: EConstraintFrame::Type;
                                  refFrame {.inject.}: var FTransform): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setConstrainedComponents*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                               component1 {.inject.}: UPrimitiveComponentPtr;
                               boneName1 {.inject.}: FName;
                               component2 {.inject.}: UPrimitiveComponentPtr;
                               boneName2 {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularVelocityTarget*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                               inVelTarget {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularVelocityDriveTwistAndSwing*(
    obj {.inject.}: UPhysicsConstraintComponentPtr;
    bEnableTwistDrive {.inject.}: bool; bEnableSwingDrive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularVelocityDriveSLERP*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                                   bEnableSLERP {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularVelocityDrive*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                              bEnableSwingDrive {.inject.}: bool;
                              bEnableTwistDrive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularTwistLimit*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                           constraintType {.inject.}: EAngularConstraintMotion;
                           twistLimitAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularSwing2Limit*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                            motionType {.inject.}: EAngularConstraintMotion;
                            swing2LimitAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularSwing1Limit*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                            motionType {.inject.}: EAngularConstraintMotion;
                            swing1LimitAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularPlasticity*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                           bAngularPlasticity {.inject.}: bool;
                           angularPlasticityThreshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularOrientationTarget*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                                  inPosTarget {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularOrientationDrive*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                                 bEnableSwingDrive {.inject.}: bool;
                                 bEnableTwistDrive {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularDriveParams*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                            positionStrength {.inject.}: float32;
                            velocityStrength {.inject.}: float32;
                            inForceLimit {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularDriveMode*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                          driveMode {.inject.}: EAngularDriveMode::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularBreakable*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                          bAngularBreakable {.inject.}: bool;
                          angularBreakThreshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isBroken*(obj {.inject.}: UPhysicsConstraintComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentTwist*(obj {.inject.}: UPhysicsConstraintComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentSwing2*(obj {.inject.}: UPhysicsConstraintComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCurrentSwing1*(obj {.inject.}: UPhysicsConstraintComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstraintForce*(obj {.inject.}: UPhysicsConstraintComponentPtr;
                         outLinearForce {.inject.}: var FVector;
                         outAngularForce {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstraint*(obj {.inject.}: UPhysicsConstraintComponentPtr): FConstraintInstanceAccessor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getConstrainedComponents*(obj {.inject.}: UPhysicsConstraintComponentPtr;
    outComponent1 {.inject.}: var UPrimitiveComponentPtr;
                               outBoneName1 {.inject.}: var FName;
    outComponent2 {.inject.}: var UPrimitiveComponentPtr;
                               outBoneName2 {.inject.}: var FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc breakConstraint*(obj {.inject.}: UPhysicsConstraintComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSoftAngularConstraint`*(obj {.inject.}: UPhysicsHandleComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSoftAngularConstraint=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbSoftAngularConstraint(@)", header: "UEGenBindings.h".}
proc `bSoftLinearConstraint`*(obj {.inject.}: UPhysicsHandleComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSoftLinearConstraint=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbSoftLinearConstraint(@)", header: "UEGenBindings.h".}
proc `bInterpolateTarget`*(obj {.inject.}: UPhysicsHandleComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bInterpolateTarget=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbInterpolateTarget(@)", header: "UEGenBindings.h".}
proc `linearDamping`*(obj {.inject.}: UPhysicsHandleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `linearDamping=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setlinearDamping(@)", header: "UEGenBindings.h".}
proc `linearStiffness`*(obj {.inject.}: UPhysicsHandleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `linearStiffness=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setlinearStiffness(@)", header: "UEGenBindings.h".}
proc `angularDamping`*(obj {.inject.}: UPhysicsHandleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `angularDamping=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setangularDamping(@)", header: "UEGenBindings.h".}
proc `angularStiffness`*(obj {.inject.}: UPhysicsHandleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `angularStiffness=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setangularStiffness(@)", header: "UEGenBindings.h".}
proc `interpolationSpeed`*(obj {.inject.}: UPhysicsHandleComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpolationSpeed=`*(obj {.inject.}: UPhysicsHandleComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setinterpolationSpeed(@)", header: "UEGenBindings.h".}
proc setTargetRotation*(obj {.inject.}: UPhysicsHandleComponentPtr;
                        newRotation {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTargetLocationAndRotation*(obj {.inject.}: UPhysicsHandleComponentPtr;
                                   newLocation {.inject.}: FVector;
                                   newRotation {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTargetLocation*(obj {.inject.}: UPhysicsHandleComponentPtr;
                        newLocation {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearStiffness*(obj {.inject.}: UPhysicsHandleComponentPtr;
                         newLinearStiffness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLinearDamping*(obj {.inject.}: UPhysicsHandleComponentPtr;
                       newLinearDamping {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInterpolationSpeed*(obj {.inject.}: UPhysicsHandleComponentPtr;
                            newInterpolationSpeed {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularStiffness*(obj {.inject.}: UPhysicsHandleComponentPtr;
                          newAngularStiffness {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setAngularDamping*(obj {.inject.}: UPhysicsHandleComponentPtr;
                        newAngularDamping {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc releaseComponent*(obj {.inject.}: UPhysicsHandleComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc grabComponentAtLocationWithRotation*(
    obj {.inject.}: UPhysicsHandleComponentPtr;
    component {.inject.}: UPrimitiveComponentPtr; inBoneName {.inject.}: FName;
    location {.inject.}: FVector; rotation {.inject.}: FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc grabComponentAtLocation*(obj {.inject.}: UPhysicsHandleComponentPtr;
                              component {.inject.}: UPrimitiveComponentPtr;
                              inBoneName {.inject.}: FName;
                              grabLocation {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc grabComponent*(obj {.inject.}: UPhysicsHandleComponentPtr;
                    component {.inject.}: UPrimitiveComponentPtr;
                    inBoneName {.inject.}: FName;
                    grabLocation {.inject.}: FVector;
                    bConstrainRotation {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTargetLocationAndRotation*(obj {.inject.}: UPhysicsHandleComponentPtr;
                                   targetLocation {.inject.}: var FVector;
                                   targetRotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGrabbedComponent*(obj {.inject.}: UPhysicsHandleComponentPtr): UPrimitiveComponentPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `springStiffness`*(obj {.inject.}: UPhysicsSpringComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `springStiffness=`*(obj {.inject.}: UPhysicsSpringComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setspringStiffness(@)", header: "UEGenBindings.h".}
proc `springDamping`*(obj {.inject.}: UPhysicsSpringComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `springDamping=`*(obj {.inject.}: UPhysicsSpringComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setspringDamping(@)", header: "UEGenBindings.h".}
proc `springLengthAtRest`*(obj {.inject.}: UPhysicsSpringComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `springLengthAtRest=`*(obj {.inject.}: UPhysicsSpringComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setspringLengthAtRest(@)", header: "UEGenBindings.h".}
proc `springRadius`*(obj {.inject.}: UPhysicsSpringComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `springRadius=`*(obj {.inject.}: UPhysicsSpringComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setspringRadius(@)", header: "UEGenBindings.h".}
proc `springChannel`*(obj {.inject.}: UPhysicsSpringComponentPtr): ECollisionChannel {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `springChannel=`*(obj {.inject.}: UPhysicsSpringComponentPtr;
                       val {.inject.}: ECollisionChannel): void {.
    importcpp: "setspringChannel(@)", header: "UEGenBindings.h".}
proc `bIgnoreSelf`*(obj {.inject.}: UPhysicsSpringComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIgnoreSelf=`*(obj {.inject.}: UPhysicsSpringComponentPtr;
                     val {.inject.}: bool): void {.
    importcpp: "setbIgnoreSelf(@)", header: "UEGenBindings.h".}
proc `springCompression`*(obj {.inject.}: UPhysicsSpringComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `springCompression=`*(obj {.inject.}: UPhysicsSpringComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setspringCompression(@)", header: "UEGenBindings.h".}
proc getSpringRestingPoint*(obj {.inject.}: UPhysicsSpringComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSpringDirection*(obj {.inject.}: UPhysicsSpringComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSpringCurrentEndPoint*(obj {.inject.}: UPhysicsSpringComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNormalizedCompressionScalar*(obj {.inject.}: UPhysicsSpringComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `thrustStrength`*(obj {.inject.}: UPhysicsThrusterComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `thrustStrength=`*(obj {.inject.}: UPhysicsThrusterComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setthrustStrength(@)", header: "UEGenBindings.h".}
proc `sceneComponent`*(obj {.inject.}: ASceneCapturePtr): TObjectPtr[
    USceneComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sceneComponent=`*(obj {.inject.}: ASceneCapturePtr;
                        val {.inject.}: TObjectPtr[USceneComponent]): void {.
    importcpp: "setsceneComponent(@)", header: "UEGenBindings.h".}
proc `planarReflectionComponent`*(obj {.inject.}: APlanarReflectionPtr): TObjectPtr[
    UPlanarReflectionComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `planarReflectionComponent=`*(obj {.inject.}: APlanarReflectionPtr;
    val {.inject.}: TObjectPtr[UPlanarReflectionComponent]): void {.
    importcpp: "setplanarReflectionComponent(@)", header: "UEGenBindings.h".}
proc onInterpToggle*(obj {.inject.}: APlanarReflectionPtr;
                     bEnable {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `primitiveRenderMode`*(obj {.inject.}: USceneCaptureComponentPtr): ESceneCapturePrimitiveRenderMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `primitiveRenderMode=`*(obj {.inject.}: USceneCaptureComponentPtr;
                             val {.inject.}: ESceneCapturePrimitiveRenderMode): void {.
    importcpp: "setprimitiveRenderMode(@)", header: "UEGenBindings.h".}
proc `captureSource`*(obj {.inject.}: USceneCaptureComponentPtr): ESceneCaptureSource {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureSource=`*(obj {.inject.}: USceneCaptureComponentPtr;
                       val {.inject.}: ESceneCaptureSource): void {.
    importcpp: "setcaptureSource(@)", header: "UEGenBindings.h".}
proc `bCaptureEveryFrame`*(obj {.inject.}: USceneCaptureComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCaptureEveryFrame=`*(obj {.inject.}: USceneCaptureComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbCaptureEveryFrame(@)", header: "UEGenBindings.h".}
proc `bCaptureOnMovement`*(obj {.inject.}: USceneCaptureComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCaptureOnMovement=`*(obj {.inject.}: USceneCaptureComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbCaptureOnMovement(@)", header: "UEGenBindings.h".}
proc `bAlwaysPersistRenderingState`*(obj {.inject.}: USceneCaptureComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAlwaysPersistRenderingState=`*(obj {.inject.}: USceneCaptureComponentPtr;
                                      val {.inject.}: bool): void {.
    importcpp: "setbAlwaysPersistRenderingState(@)", header: "UEGenBindings.h".}
proc `hiddenActors`*(obj {.inject.}: USceneCaptureComponentPtr): var TArray[
    TObjectPtr[AActor]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `hiddenActors=`*(obj {.inject.}: USceneCaptureComponentPtr;
                      val {.inject.}: TArray[TObjectPtr[AActor]]): void {.
    importcpp: "sethiddenActors(@)", header: "UEGenBindings.h".}
proc `showOnlyActors`*(obj {.inject.}: USceneCaptureComponentPtr): var TArray[
    TObjectPtr[AActor]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `showOnlyActors=`*(obj {.inject.}: USceneCaptureComponentPtr;
                        val {.inject.}: TArray[TObjectPtr[AActor]]): void {.
    importcpp: "setshowOnlyActors(@)", header: "UEGenBindings.h".}
proc `maxViewDistanceOverride`*(obj {.inject.}: USceneCaptureComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxViewDistanceOverride=`*(obj {.inject.}: USceneCaptureComponentPtr;
                                 val {.inject.}: float32): void {.
    importcpp: "setmaxViewDistanceOverride(@)", header: "UEGenBindings.h".}
proc `captureSortPriority`*(obj {.inject.}: USceneCaptureComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureSortPriority=`*(obj {.inject.}: USceneCaptureComponentPtr;
                             val {.inject.}: int32): void {.
    importcpp: "setcaptureSortPriority(@)", header: "UEGenBindings.h".}
proc `bUseRayTracingIfEnabled`*(obj {.inject.}: USceneCaptureComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseRayTracingIfEnabled=`*(obj {.inject.}: USceneCaptureComponentPtr;
                                 val {.inject.}: bool): void {.
    importcpp: "setbUseRayTracingIfEnabled(@)", header: "UEGenBindings.h".}
proc `showFlagSettings`*(obj {.inject.}: USceneCaptureComponentPtr): var TArray[
    FEngineShowFlagsSetting] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `showFlagSettings=`*(obj {.inject.}: USceneCaptureComponentPtr;
                          val {.inject.}: TArray[FEngineShowFlagsSetting]): void {.
    importcpp: "setshowFlagSettings(@)", header: "UEGenBindings.h".}
proc `profilingEventName`*(obj {.inject.}: USceneCaptureComponentPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `profilingEventName=`*(obj {.inject.}: USceneCaptureComponentPtr;
                            val {.inject.}: FString): void {.
    importcpp: "setprofilingEventName(@)", header: "UEGenBindings.h".}
proc showOnlyComponent*(obj {.inject.}: USceneCaptureComponentPtr;
                        inComponent {.inject.}: UPrimitiveComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc showOnlyActorComponents*(obj {.inject.}: USceneCaptureComponentPtr;
                              inActor {.inject.}: AActorPtr;
                              bIncludeFromChildActors {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCaptureSortPriority*(obj {.inject.}: USceneCaptureComponentPtr;
                             newCaptureSortPriority {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeShowOnlyComponent*(obj {.inject.}: USceneCaptureComponentPtr;
                              inComponent {.inject.}: UPrimitiveComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeShowOnlyActorComponents*(obj {.inject.}: USceneCaptureComponentPtr;
                                    inActor {.inject.}: AActorPtr;
                                    bIncludeFromChildActors {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hideComponent*(obj {.inject.}: USceneCaptureComponentPtr;
                    inComponent {.inject.}: UPrimitiveComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc hideActorComponents*(obj {.inject.}: USceneCaptureComponentPtr;
                          inActor {.inject.}: AActorPtr;
                          bIncludeFromChildActors {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearShowOnlyComponents*(obj {.inject.}: USceneCaptureComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearHiddenComponents*(obj {.inject.}: USceneCaptureComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `influenceRadiusScale`*(obj {.inject.}: UPlaneReflectionCaptureComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `influenceRadiusScale=`*(obj {.inject.}: UPlaneReflectionCaptureComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setinfluenceRadiusScale(@)", header: "UEGenBindings.h".}
proc supportsConvertibleLaptops*(obj {.inject.}: UPlatformEventsComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isInTabletMode*(obj {.inject.}: UPlatformEventsComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isInLaptopMode*(obj {.inject.}: UPlatformEventsComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `transformComponent`*(obj {.inject.}: APlayerCameraManagerPtr): TObjectPtr[
    USceneComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `transformComponent=`*(obj {.inject.}: APlayerCameraManagerPtr;
                            val {.inject.}: TObjectPtr[USceneComponent]): void {.
    importcpp: "settransformComponent(@)", header: "UEGenBindings.h".}
proc `defaultFOV`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultFOV=`*(obj {.inject.}: APlayerCameraManagerPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setdefaultFOV(@)", header: "UEGenBindings.h".}
proc `defaultOrthoWidth`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultOrthoWidth=`*(obj {.inject.}: APlayerCameraManagerPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setdefaultOrthoWidth(@)", header: "UEGenBindings.h".}
proc `defaultAspectRatio`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultAspectRatio=`*(obj {.inject.}: APlayerCameraManagerPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setdefaultAspectRatio(@)", header: "UEGenBindings.h".}
proc `defaultModifiers`*(obj {.inject.}: APlayerCameraManagerPtr): var TArray[
    TSubclassOf[UCameraModifier]] {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc `defaultModifiers=`*(obj {.inject.}: APlayerCameraManagerPtr;
                          val {.inject.}: TArray[TSubclassOf[UCameraModifier]]): void {.
    importcpp: "setdefaultModifiers(@)", header: "UEGenBindings.h".}
proc `freeCamDistance`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `freeCamDistance=`*(obj {.inject.}: APlayerCameraManagerPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setfreeCamDistance(@)", header: "UEGenBindings.h".}
proc `freeCamOffset`*(obj {.inject.}: APlayerCameraManagerPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `freeCamOffset=`*(obj {.inject.}: APlayerCameraManagerPtr;
                       val {.inject.}: FVector): void {.
    importcpp: "setfreeCamOffset(@)", header: "UEGenBindings.h".}
proc `viewTargetOffset`*(obj {.inject.}: APlayerCameraManagerPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewTargetOffset=`*(obj {.inject.}: APlayerCameraManagerPtr;
                          val {.inject.}: FVector): void {.
    importcpp: "setviewTargetOffset(@)", header: "UEGenBindings.h".}
proc `bIsOrthographic`*(obj {.inject.}: APlayerCameraManagerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsOrthographic=`*(obj {.inject.}: APlayerCameraManagerPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbIsOrthographic(@)", header: "UEGenBindings.h".}
proc `bDefaultConstrainAspectRatio`*(obj {.inject.}: APlayerCameraManagerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDefaultConstrainAspectRatio=`*(obj {.inject.}: APlayerCameraManagerPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbDefaultConstrainAspectRatio(@)", header: "UEGenBindings.h".}
proc `bClientSimulatingViewTarget`*(obj {.inject.}: APlayerCameraManagerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bClientSimulatingViewTarget=`*(obj {.inject.}: APlayerCameraManagerPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbClientSimulatingViewTarget(@)", header: "UEGenBindings.h".}
proc `bUseClientSideCameraUpdates`*(obj {.inject.}: APlayerCameraManagerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseClientSideCameraUpdates=`*(obj {.inject.}: APlayerCameraManagerPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbUseClientSideCameraUpdates(@)", header: "UEGenBindings.h".}
proc `bGameCameraCutThisFrame`*(obj {.inject.}: APlayerCameraManagerPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bGameCameraCutThisFrame=`*(obj {.inject.}: APlayerCameraManagerPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbGameCameraCutThisFrame(@)", header: "UEGenBindings.h".}
proc `viewPitchMin`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewPitchMin=`*(obj {.inject.}: APlayerCameraManagerPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setviewPitchMin(@)", header: "UEGenBindings.h".}
proc `viewPitchMax`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewPitchMax=`*(obj {.inject.}: APlayerCameraManagerPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setviewPitchMax(@)", header: "UEGenBindings.h".}
proc `viewYawMin`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewYawMin=`*(obj {.inject.}: APlayerCameraManagerPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setviewYawMin(@)", header: "UEGenBindings.h".}
proc `viewYawMax`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewYawMax=`*(obj {.inject.}: APlayerCameraManagerPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setviewYawMax(@)", header: "UEGenBindings.h".}
proc `viewRollMin`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewRollMin=`*(obj {.inject.}: APlayerCameraManagerPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setviewRollMin(@)", header: "UEGenBindings.h".}
proc `viewRollMax`*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewRollMax=`*(obj {.inject.}: APlayerCameraManagerPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setviewRollMax(@)", header: "UEGenBindings.h".}
proc stopCameraShake*(obj {.inject.}: APlayerCameraManagerPtr;
                      shakeInstance {.inject.}: UCameraShakeBasePtr;
                      bImmediately {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc stopCameraFade*(obj {.inject.}: APlayerCameraManagerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopCameraAnimInst*(obj {.inject.}: APlayerCameraManagerPtr;
                         animInst {.inject.}: UCameraAnimInstPtr;
                         bImmediate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopAllInstancesOfCameraShakeFromSource*(
    obj {.inject.}: APlayerCameraManagerPtr;
    shake {.inject.}: TSubclassOf[UCameraShakeBase];
    sourceComponent {.inject.}: UCameraShakeSourceComponentPtr;
    bImmediately {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc stopAllInstancesOfCameraShake*(obj {.inject.}: APlayerCameraManagerPtr;
    shake {.inject.}: TSubclassOf[UCameraShakeBase];
                                    bImmediately {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopAllInstancesOfCameraAnim*(obj {.inject.}: APlayerCameraManagerPtr;
                                   anim {.inject.}: UCameraAnimPtr;
                                   bImmediate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopAllCameraShakesFromSource*(obj {.inject.}: APlayerCameraManagerPtr;
    sourceComponent {.inject.}: UCameraShakeSourceComponentPtr;
                                    bImmediately {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopAllCameraShakes*(obj {.inject.}: APlayerCameraManagerPtr;
                          bImmediately {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopAllCameraAnims*(obj {.inject.}: APlayerCameraManagerPtr;
                         bImmediate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startCameraShakeFromSource*(obj {.inject.}: APlayerCameraManagerPtr;
    shakeClass {.inject.}: TSubclassOf[UCameraShakeBase];
    sourceComponent {.inject.}: UCameraShakeSourceComponentPtr;
                                 scale {.inject.}: float32;
                                 playSpace {.inject.}: ECameraShakePlaySpace;
                                 userPlaySpaceRot {.inject.}: FRotator): UCameraShakeBasePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startCameraShake*(obj {.inject.}: APlayerCameraManagerPtr;
                       shakeClass {.inject.}: TSubclassOf[UCameraShakeBase];
                       scale {.inject.}: float32;
                       playSpace {.inject.}: ECameraShakePlaySpace;
                       userPlaySpaceRot {.inject.}: FRotator): UCameraShakeBasePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startCameraFade*(obj {.inject.}: APlayerCameraManagerPtr;
                      fromAlpha {.inject.}: float32; toAlpha {.inject.}: float32;
                      duration {.inject.}: float32;
                      color {.inject.}: FLinearColor;
                      bShouldFadeAudio {.inject.}: bool;
                      bHoldWhenFinished {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setManualCameraFade*(obj {.inject.}: APlayerCameraManagerPtr;
                          inFadeAmount {.inject.}: float32;
                          color {.inject.}: FLinearColor;
                          bInFadeAudio {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGameCameraCutThisFrame*(obj {.inject.}: APlayerCameraManagerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeGenericCameraLensEffect*(obj {.inject.}: APlayerCameraManagerPtr;
    emitter {.inject.}: TScriptInterface[UCameraLensEffectInterface]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeCameraModifier*(obj {.inject.}: APlayerCameraManagerPtr;
                           modifierToRemove {.inject.}: UCameraModifierPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc playCameraAnim*(obj {.inject.}: APlayerCameraManagerPtr;
                     anim {.inject.}: UCameraAnimPtr; rate {.inject.}: float32;
                     scale {.inject.}: float32; blendInTime {.inject.}: float32;
                     blendOutTime {.inject.}: float32; bLoop {.inject.}: bool;
                     bRandomStartTime {.inject.}: bool;
                     duration {.inject.}: float32;
                     playSpace {.inject.}: ECameraShakePlaySpace;
                     userPlaySpaceRot {.inject.}: FRotator): UCameraAnimInstPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOwningPlayerController*(obj {.inject.}: APlayerCameraManagerPtr): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFOVAngle*(obj {.inject.}: APlayerCameraManagerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCameraRotation*(obj {.inject.}: APlayerCameraManagerPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getCameraLocation*(obj {.inject.}: APlayerCameraManagerPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findCameraModifierByClass*(obj {.inject.}: APlayerCameraManagerPtr;
    modifierClass {.inject.}: TSubclassOf[UCameraModifier]): UCameraModifierPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearCameraLensEffects*(obj {.inject.}: APlayerCameraManagerPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addNewCameraModifier*(obj {.inject.}: APlayerCameraManagerPtr;
    modifierClass {.inject.}: TSubclassOf[UCameraModifier]): UCameraModifierPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addGenericCameraLensEffect*(obj {.inject.}: APlayerCameraManagerPtr;
    lensEffectEmitterClass {.inject.}: TSubclassOf[AActor]): TScriptInterface[UCameraLensEffectInterface] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerStartTag`*(obj {.inject.}: APlayerStartPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `playerStartTag=`*(obj {.inject.}: APlayerStartPtr; val {.inject.}: FName): void {.
    importcpp: "setplayerStartTag(@)", header: "UEGenBindings.h".}
proc `score`*(obj {.inject.}: APlayerStatePtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `score=`*(obj {.inject.}: APlayerStatePtr; val {.inject.}: float32): void {.
    importcpp: "setscore(@)", header: "UEGenBindings.h".}
proc `playerId`*(obj {.inject.}: APlayerStatePtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `playerId=`*(obj {.inject.}: APlayerStatePtr; val {.inject.}: int32): void {.
    importcpp: "setplayerId(@)", header: "UEGenBindings.h".}
proc `compressedPing`*(obj {.inject.}: APlayerStatePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compressedPing=`*(obj {.inject.}: APlayerStatePtr; val {.inject.}: uint8): void {.
    importcpp: "setcompressedPing(@)", header: "UEGenBindings.h".}
proc `bIsSpectator`*(obj {.inject.}: APlayerStatePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsSpectator=`*(obj {.inject.}: APlayerStatePtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsSpectator(@)", header: "UEGenBindings.h".}
proc `bIsABot`*(obj {.inject.}: APlayerStatePtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bIsABot=`*(obj {.inject.}: APlayerStatePtr; val {.inject.}: uint8): void {.
    importcpp: "setbIsABot(@)", header: "UEGenBindings.h".}
proc `pawnPrivate`*(obj {.inject.}: APlayerStatePtr): TObjectPtr[APawn] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pawnPrivate=`*(obj {.inject.}: APlayerStatePtr;
                     val {.inject.}: TObjectPtr[APawn]): void {.
    importcpp: "setpawnPrivate(@)", header: "UEGenBindings.h".}
proc isOnlyASpectator*(obj {.inject.}: APlayerStatePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerName*(obj {.inject.}: APlayerStatePtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayerController*(obj {.inject.}: APlayerStatePtr): APlayerControllerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPingInMilliseconds*(obj {.inject.}: APlayerStatePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPawn*(obj {.inject.}: APlayerStatePtr): APawnPtr {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc bP_GetUniqueId*(obj {.inject.}: APlayerStatePtr): FUniqueNetIdRepl {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pointLightComponent`*(obj {.inject.}: APointLightPtr): TObjectPtr[
    UPointLightComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pointLightComponent=`*(obj {.inject.}: APointLightPtr;
                             val {.inject.}: TObjectPtr[UPointLightComponent]): void {.
    importcpp: "setpointLightComponent(@)", header: "UEGenBindings.h".}
proc setRadius*(obj {.inject.}: APointLightPtr; newRadius {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFalloffExponent*(obj {.inject.}: APointLightPtr;
                              newLightFalloffExponent {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseInverseSquaredFalloff`*(obj {.inject.}: UPointLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseInverseSquaredFalloff=`*(obj {.inject.}: UPointLightComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbUseInverseSquaredFalloff(@)", header: "UEGenBindings.h".}
proc `lightFalloffExponent`*(obj {.inject.}: UPointLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lightFalloffExponent=`*(obj {.inject.}: UPointLightComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setlightFalloffExponent(@)", header: "UEGenBindings.h".}
proc `sourceRadius`*(obj {.inject.}: UPointLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceRadius=`*(obj {.inject.}: UPointLightComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setsourceRadius(@)", header: "UEGenBindings.h".}
proc `softSourceRadius`*(obj {.inject.}: UPointLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `softSourceRadius=`*(obj {.inject.}: UPointLightComponentPtr;
                          val {.inject.}: float32): void {.
    importcpp: "setsoftSourceRadius(@)", header: "UEGenBindings.h".}
proc `sourceLength`*(obj {.inject.}: UPointLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceLength=`*(obj {.inject.}: UPointLightComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setsourceLength(@)", header: "UEGenBindings.h".}
proc setSourceRadius*(obj {.inject.}: UPointLightComponentPtr;
                      bNewValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSourceLength*(obj {.inject.}: UPointLightComponentPtr;
                      newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSoftSourceRadius*(obj {.inject.}: UPointLightComponentPtr;
                          bNewValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightFalloffExponent*(obj {.inject.}: UPointLightComponentPtr;
                              newLightFalloffExponent {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoneTransformByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                             boneName {.inject.}: FName;
                             inTransform {.inject.}: var FTransform;
                             boneSpace {.inject.}: EBoneSpaces::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoneScaleByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                         boneName {.inject.}: FName;
                         inScale3D {.inject.}: FVector;
                         boneSpace {.inject.}: EBoneSpaces::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoneRotationByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                            boneName {.inject.}: FName;
                            inRotation {.inject.}: FRotator;
                            boneSpace {.inject.}: EBoneSpaces::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoneLocationByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                            boneName {.inject.}: FName;
                            inLocation {.inject.}: FVector;
                            boneSpace {.inject.}: EBoneSpaces::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetBoneTransformByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                               boneName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneTransformByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                             boneName {.inject.}: FName;
                             boneSpace {.inject.}: EBoneSpaces::Type): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneScaleByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                         boneName {.inject.}: FName;
                         boneSpace {.inject.}: EBoneSpaces::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneRotationByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                            boneName {.inject.}: FName;
                            boneSpace {.inject.}: EBoneSpaces::Type): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoneLocationByName*(obj {.inject.}: UPoseableMeshComponentPtr;
                            boneName {.inject.}: FName;
                            boneSpace {.inject.}: EBoneSpaces::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc copyPoseFromSkeletalComponent*(obj {.inject.}: UPoseableMeshComponentPtr;
    inComponentToCopy {.inject.}: USkeletalMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc updatePoseFromAnimation*(obj {.inject.}: UPoseAssetPtr;
                              animSequence {.inject.}: UAnimSequencePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc renamePose*(obj {.inject.}: UPoseAssetPtr;
                 originalPoseName {.inject.}: var FName;
                 newPoseName {.inject.}: var FName): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getPoseNames*(obj {.inject.}: UPoseAssetPtr;
                   poseNames {.inject.}: var TArray[FName]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `settings`*(obj {.inject.}: UPostProcessComponentPtr): FPostProcessSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `settings=`*(obj {.inject.}: UPostProcessComponentPtr;
                  val {.inject.}: FPostProcessSettings): void {.
    importcpp: "setsettings(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: UPostProcessComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: UPostProcessComponentPtr;
                  val {.inject.}: float32): void {.importcpp: "setpriority(@)",
    header: "UEGenBindings.h".}
proc `blendRadius`*(obj {.inject.}: UPostProcessComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendRadius=`*(obj {.inject.}: UPostProcessComponentPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setblendRadius(@)", header: "UEGenBindings.h".}
proc `blendWeight`*(obj {.inject.}: UPostProcessComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendWeight=`*(obj {.inject.}: UPostProcessComponentPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setblendWeight(@)", header: "UEGenBindings.h".}
proc `bEnabled`*(obj {.inject.}: UPostProcessComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnabled=`*(obj {.inject.}: UPostProcessComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbEnabled(@)", header: "UEGenBindings.h".}
proc `bUnbound`*(obj {.inject.}: UPostProcessComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUnbound=`*(obj {.inject.}: UPostProcessComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUnbound(@)", header: "UEGenBindings.h".}
proc addOrUpdateBlendable*(obj {.inject.}: UPostProcessComponentPtr;
    inBlendableObject {.inject.}: TScriptInterface[UBlendableInterface];
                           inWeight {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `settings`*(obj {.inject.}: APostProcessVolumePtr): FPostProcessSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `settings=`*(obj {.inject.}: APostProcessVolumePtr;
                  val {.inject.}: FPostProcessSettings): void {.
    importcpp: "setsettings(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: APostProcessVolumePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: APostProcessVolumePtr; val {.inject.}: float32): void {.
    importcpp: "setpriority(@)", header: "UEGenBindings.h".}
proc `blendRadius`*(obj {.inject.}: APostProcessVolumePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendRadius=`*(obj {.inject.}: APostProcessVolumePtr;
                     val {.inject.}: float32): void {.
    importcpp: "setblendRadius(@)", header: "UEGenBindings.h".}
proc `blendWeight`*(obj {.inject.}: APostProcessVolumePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `blendWeight=`*(obj {.inject.}: APostProcessVolumePtr;
                     val {.inject.}: float32): void {.
    importcpp: "setblendWeight(@)", header: "UEGenBindings.h".}
proc `bEnabled`*(obj {.inject.}: APostProcessVolumePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnabled=`*(obj {.inject.}: APostProcessVolumePtr; val {.inject.}: uint8): void {.
    importcpp: "setbEnabled(@)", header: "UEGenBindings.h".}
proc `bUnbound`*(obj {.inject.}: APostProcessVolumePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUnbound=`*(obj {.inject.}: APostProcessVolumePtr; val {.inject.}: uint8): void {.
    importcpp: "setbUnbound(@)", header: "UEGenBindings.h".}
proc addOrUpdateBlendable*(obj {.inject.}: APostProcessVolumePtr;
    inBlendableObject {.inject.}: TScriptInterface[UBlendableInterface];
                           inWeight {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `overrideVisibleActors`*(obj {.inject.}: APrecomputedVisibilityOverrideVolumePtr): var TArray[
    TObjectPtr[AActor]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `overrideVisibleActors=`*(obj {.inject.}: APrecomputedVisibilityOverrideVolumePtr;
                               val {.inject.}: TArray[TObjectPtr[AActor]]): void {.
    importcpp: "setoverrideVisibleActors(@)", header: "UEGenBindings.h".}
proc `overrideInvisibleActors`*(obj {.inject.}: APrecomputedVisibilityOverrideVolumePtr): var TArray[
    TObjectPtr[AActor]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `overrideInvisibleActors=`*(obj {.inject.}: APrecomputedVisibilityOverrideVolumePtr;
                                 val {.inject.}: TArray[TObjectPtr[AActor]]): void {.
    importcpp: "setoverrideInvisibleActors(@)", header: "UEGenBindings.h".}
proc `overrideInvisibleLevels`*(obj {.inject.}: APrecomputedVisibilityOverrideVolumePtr): var TArray[
    FName] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `overrideInvisibleLevels=`*(obj {.inject.}: APrecomputedVisibilityOverrideVolumePtr;
                                 val {.inject.}: TArray[FName]): void {.
    importcpp: "setoverrideInvisibleLevels(@)", header: "UEGenBindings.h".}
proc `initialSpeed`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `initialSpeed=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setinitialSpeed(@)", header: "UEGenBindings.h".}
proc `maxSpeed`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSpeed=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                  val {.inject.}: float32): void {.importcpp: "setmaxSpeed(@)",
    header: "UEGenBindings.h".}
proc `bRotationFollowsVelocity`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRotationFollowsVelocity=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbRotationFollowsVelocity(@)", header: "UEGenBindings.h".}
proc `bRotationRemainsVertical`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRotationRemainsVertical=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbRotationRemainsVertical(@)", header: "UEGenBindings.h".}
proc `bShouldBounce`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bShouldBounce=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                       val {.inject.}: uint8): void {.
    importcpp: "setbShouldBounce(@)", header: "UEGenBindings.h".}
proc `bInitialVelocityInLocalSpace`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bInitialVelocityInLocalSpace=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                      val {.inject.}: uint8): void {.
    importcpp: "setbInitialVelocityInLocalSpace(@)", header: "UEGenBindings.h".}
proc `bForceSubStepping`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceSubStepping=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbForceSubStepping(@)", header: "UEGenBindings.h".}
proc `bSimulationEnabled`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSimulationEnabled=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbSimulationEnabled(@)", header: "UEGenBindings.h".}
proc `bSweepCollision`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSweepCollision=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbSweepCollision(@)", header: "UEGenBindings.h".}
proc `bIsHomingProjectile`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsHomingProjectile=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbIsHomingProjectile(@)", header: "UEGenBindings.h".}
proc `bBounceAngleAffectsFriction`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bBounceAngleAffectsFriction=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbBounceAngleAffectsFriction(@)", header: "UEGenBindings.h".}
proc `bIsSliding`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIsSliding=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                    val {.inject.}: uint8): void {.
    importcpp: "setbIsSliding(@)", header: "UEGenBindings.h".}
proc `bInterpMovement`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bInterpMovement=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbInterpMovement(@)", header: "UEGenBindings.h".}
proc `bInterpRotation`*(obj {.inject.}: UProjectileMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bInterpRotation=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbInterpRotation(@)", header: "UEGenBindings.h".}
proc `previousHitTime`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `previousHitTime=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setpreviousHitTime(@)", header: "UEGenBindings.h".}
proc `previousHitNormal`*(obj {.inject.}: UProjectileMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `previousHitNormal=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                           val {.inject.}: FVector): void {.
    importcpp: "setpreviousHitNormal(@)", header: "UEGenBindings.h".}
proc `projectileGravityScale`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `projectileGravityScale=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setprojectileGravityScale(@)", header: "UEGenBindings.h".}
proc `bounciness`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bounciness=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setbounciness(@)", header: "UEGenBindings.h".}
proc `friction`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `friction=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                  val {.inject.}: float32): void {.importcpp: "setfriction(@)",
    header: "UEGenBindings.h".}
proc `bounceVelocityStopSimulatingThreshold`*(
    obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bounceVelocityStopSimulatingThreshold=`*(
    obj {.inject.}: UProjectileMovementComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setbounceVelocityStopSimulatingThreshold(@)",
    header: "UEGenBindings.h".}
proc `minFrictionFraction`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minFrictionFraction=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setminFrictionFraction(@)", header: "UEGenBindings.h".}
proc `homingAccelerationMagnitude`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `homingAccelerationMagnitude=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "sethomingAccelerationMagnitude(@)", header: "UEGenBindings.h".}
proc `homingTargetComponent`*(obj {.inject.}: UProjectileMovementComponentPtr): TWeakObjectPtr[
    USceneComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `homingTargetComponent=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                               val {.inject.}: TWeakObjectPtr[USceneComponent]): void {.
    importcpp: "sethomingTargetComponent(@)", header: "UEGenBindings.h".}
proc `maxSimulationTimeStep`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSimulationTimeStep=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setmaxSimulationTimeStep(@)", header: "UEGenBindings.h".}
proc `maxSimulationIterations`*(obj {.inject.}: UProjectileMovementComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxSimulationIterations=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                 val {.inject.}: int32): void {.
    importcpp: "setmaxSimulationIterations(@)", header: "UEGenBindings.h".}
proc `bounceAdditionalIterations`*(obj {.inject.}: UProjectileMovementComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bounceAdditionalIterations=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                    val {.inject.}: int32): void {.
    importcpp: "setbounceAdditionalIterations(@)", header: "UEGenBindings.h".}
proc `interpLocationTime`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpLocationTime=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setinterpLocationTime(@)", header: "UEGenBindings.h".}
proc `interpRotationTime`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpRotationTime=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setinterpRotationTime(@)", header: "UEGenBindings.h".}
proc `interpLocationMaxLagDistance`*(obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpLocationMaxLagDistance=`*(obj {.inject.}: UProjectileMovementComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setinterpLocationMaxLagDistance(@)", header: "UEGenBindings.h".}
proc `interpLocationSnapToTargetDistance`*(
    obj {.inject.}: UProjectileMovementComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `interpLocationSnapToTargetDistance=`*(
    obj {.inject.}: UProjectileMovementComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setinterpLocationSnapToTargetDistance(@)",
    header: "UEGenBindings.h".}
proc stopSimulating*(obj {.inject.}: UProjectileMovementComponentPtr;
                     hitResult {.inject.}: var FHitResult): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVelocityInLocalSpace*(obj {.inject.}: UProjectileMovementComponentPtr;
                              newVelocity {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInterpolatedComponent*(obj {.inject.}: UProjectileMovementComponentPtr;
                               component {.inject.}: USceneComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc resetInterpolation*(obj {.inject.}: UProjectileMovementComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc moveInterpolationTarget*(obj {.inject.}: UProjectileMovementComponentPtr;
                              newLocation {.inject.}: var FVector;
                              newRotation {.inject.}: var FRotator): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc limitVelocity*(obj {.inject.}: UProjectileMovementComponentPtr;
                    newVelocity {.inject.}: FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isVelocityUnderSimulationThreshold*(
    obj {.inject.}: UProjectileMovementComponentPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isInterpolationComplete*(obj {.inject.}: UProjectileMovementComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forceComponent`*(obj {.inject.}: ARadialForceActorPtr): TObjectPtr[
    URadialForceComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forceComponent=`*(obj {.inject.}: ARadialForceActorPtr;
                        val {.inject.}: TObjectPtr[URadialForceComponent]): void {.
    importcpp: "setforceComponent(@)", header: "UEGenBindings.h".}
proc toggleForce*(obj {.inject.}: ARadialForceActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fireImpulse*(obj {.inject.}: ARadialForceActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enableForce*(obj {.inject.}: ARadialForceActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc disableForce*(obj {.inject.}: ARadialForceActorPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `radius`*(obj {.inject.}: URadialForceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `radius=`*(obj {.inject.}: URadialForceComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setradius(@)", header: "UEGenBindings.h".}
proc `falloff`*(obj {.inject.}: URadialForceComponentPtr): ERadialImpulseFalloff {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `falloff=`*(obj {.inject.}: URadialForceComponentPtr;
                 val {.inject.}: ERadialImpulseFalloff): void {.
    importcpp: "setfalloff(@)", header: "UEGenBindings.h".}
proc `impulseStrength`*(obj {.inject.}: URadialForceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `impulseStrength=`*(obj {.inject.}: URadialForceComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setimpulseStrength(@)", header: "UEGenBindings.h".}
proc `bImpulseVelChange`*(obj {.inject.}: URadialForceComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bImpulseVelChange=`*(obj {.inject.}: URadialForceComponentPtr;
                           val {.inject.}: uint8): void {.
    importcpp: "setbImpulseVelChange(@)", header: "UEGenBindings.h".}
proc `bIgnoreOwningActor`*(obj {.inject.}: URadialForceComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bIgnoreOwningActor=`*(obj {.inject.}: URadialForceComponentPtr;
                            val {.inject.}: uint8): void {.
    importcpp: "setbIgnoreOwningActor(@)", header: "UEGenBindings.h".}
proc `forceStrength`*(obj {.inject.}: URadialForceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `forceStrength=`*(obj {.inject.}: URadialForceComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setforceStrength(@)", header: "UEGenBindings.h".}
proc `destructibleDamage`*(obj {.inject.}: URadialForceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `destructibleDamage=`*(obj {.inject.}: URadialForceComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setdestructibleDamage(@)", header: "UEGenBindings.h".}
proc removeObjectTypeToAffect*(obj {.inject.}: URadialForceComponentPtr;
                               objectType {.inject.}: EObjectTypeQuery): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc fireImpulse*(obj {.inject.}: URadialForceComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addObjectTypeToAffect*(obj {.inject.}: URadialForceComponentPtr;
                            objectType {.inject.}: EObjectTypeQuery): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rectLightComponent`*(obj {.inject.}: ARectLightPtr): TObjectPtr[
    URectLightComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rectLightComponent=`*(obj {.inject.}: ARectLightPtr;
                            val {.inject.}: TObjectPtr[URectLightComponent]): void {.
    importcpp: "setrectLightComponent(@)", header: "UEGenBindings.h".}
proc `sourceWidth`*(obj {.inject.}: URectLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceWidth=`*(obj {.inject.}: URectLightComponentPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setsourceWidth(@)", header: "UEGenBindings.h".}
proc `sourceHeight`*(obj {.inject.}: URectLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceHeight=`*(obj {.inject.}: URectLightComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setsourceHeight(@)", header: "UEGenBindings.h".}
proc `barnDoorAngle`*(obj {.inject.}: URectLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `barnDoorAngle=`*(obj {.inject.}: URectLightComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setbarnDoorAngle(@)", header: "UEGenBindings.h".}
proc `barnDoorLength`*(obj {.inject.}: URectLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `barnDoorLength=`*(obj {.inject.}: URectLightComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setbarnDoorLength(@)", header: "UEGenBindings.h".}
proc `sourceTexture`*(obj {.inject.}: URectLightComponentPtr): TObjectPtr[
    UTexture] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceTexture=`*(obj {.inject.}: URectLightComponentPtr;
                       val {.inject.}: TObjectPtr[UTexture]): void {.
    importcpp: "setsourceTexture(@)", header: "UEGenBindings.h".}
proc setSourceWidth*(obj {.inject.}: URectLightComponentPtr;
                     bNewValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSourceTexture*(obj {.inject.}: URectLightComponentPtr;
                       bNewValue {.inject.}: UTexturePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSourceHeight*(obj {.inject.}: URectLightComponentPtr;
                      newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setBarnDoorLength*(obj {.inject.}: URectLightComponentPtr;
                        newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBarnDoorAngle*(obj {.inject.}: URectLightComponentPtr;
                       newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc requestCheckpoint*(obj {.inject.}: UReplaySubsystemPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isRecording*(obj {.inject.}: UReplaySubsystemPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPlaying*(obj {.inject.}: UReplaySubsystemPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getReplayCurrentTime*(obj {.inject.}: UReplaySubsystemPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getActiveReplayName*(obj {.inject.}: UReplaySubsystemPtr): FString {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bBypassEarlyReflections`*(obj {.inject.}: UReverbEffectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bBypassEarlyReflections=`*(obj {.inject.}: UReverbEffectPtr;
                                 val {.inject.}: bool): void {.
    importcpp: "setbBypassEarlyReflections(@)", header: "UEGenBindings.h".}
proc `bBypassLateReflections`*(obj {.inject.}: UReverbEffectPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bBypassLateReflections=`*(obj {.inject.}: UReverbEffectPtr;
                                val {.inject.}: bool): void {.
    importcpp: "setbBypassLateReflections(@)", header: "UEGenBindings.h".}
proc `rotationRate`*(obj {.inject.}: URotatingMovementComponentPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rotationRate=`*(obj {.inject.}: URotatingMovementComponentPtr;
                      val {.inject.}: FRotator): void {.
    importcpp: "setrotationRate(@)", header: "UEGenBindings.h".}
proc `pivotTranslation`*(obj {.inject.}: URotatingMovementComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pivotTranslation=`*(obj {.inject.}: URotatingMovementComponentPtr;
                          val {.inject.}: FVector): void {.
    importcpp: "setpivotTranslation(@)", header: "UEGenBindings.h".}
proc `bRotationInLocalSpace`*(obj {.inject.}: URotatingMovementComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRotationInLocalSpace=`*(obj {.inject.}: URotatingMovementComponentPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbRotationInLocalSpace(@)", header: "UEGenBindings.h".}
proc `tileCount`*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `tileCount=`*(obj {.inject.}: URuntimeVirtualTexturePtr;
                   val {.inject.}: int32): void {.importcpp: "settileCount(@)",
    header: "UEGenBindings.h".}
proc `tileSize`*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `tileSize=`*(obj {.inject.}: URuntimeVirtualTexturePtr;
                  val {.inject.}: int32): void {.importcpp: "settileSize(@)",
    header: "UEGenBindings.h".}
proc `tileBorderSize`*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `tileBorderSize=`*(obj {.inject.}: URuntimeVirtualTexturePtr;
                        val {.inject.}: int32): void {.
    importcpp: "settileBorderSize(@)", header: "UEGenBindings.h".}
proc `materialType`*(obj {.inject.}: URuntimeVirtualTexturePtr): ERuntimeVirtualTextureMaterialType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `materialType=`*(obj {.inject.}: URuntimeVirtualTexturePtr;
                      val {.inject.}: ERuntimeVirtualTextureMaterialType): void {.
    importcpp: "setmaterialType(@)", header: "UEGenBindings.h".}
proc `bCompressTextures`*(obj {.inject.}: URuntimeVirtualTexturePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCompressTextures=`*(obj {.inject.}: URuntimeVirtualTexturePtr;
                           val {.inject.}: bool): void {.
    importcpp: "setbCompressTextures(@)", header: "UEGenBindings.h".}
proc `bUseLowQualityCompression`*(obj {.inject.}: URuntimeVirtualTexturePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseLowQualityCompression=`*(obj {.inject.}: URuntimeVirtualTexturePtr;
                                   val {.inject.}: bool): void {.
    importcpp: "setbUseLowQualityCompression(@)", header: "UEGenBindings.h".}
proc `lODGroup`*(obj {.inject.}: URuntimeVirtualTexturePtr): TextureGroup {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lODGroup=`*(obj {.inject.}: URuntimeVirtualTexturePtr;
                  val {.inject.}: TextureGroup): void {.
    importcpp: "setlODGroup(@)", header: "UEGenBindings.h".}
proc getTileSize*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTileCount*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTileBorderSize*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSize*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPageTableSize*(obj {.inject.}: URuntimeVirtualTexturePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `virtualTexture`*(obj {.inject.}: URuntimeVirtualTextureComponentPtr): TObjectPtr[
    URuntimeVirtualTexture] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `virtualTexture=`*(obj {.inject.}: URuntimeVirtualTextureComponentPtr;
                        val {.inject.}: TObjectPtr[URuntimeVirtualTexture]): void {.
    importcpp: "setvirtualTexture(@)", header: "UEGenBindings.h".}
proc `streamingTexture`*(obj {.inject.}: URuntimeVirtualTextureComponentPtr): TObjectPtr[
    UVirtualTextureBuilder] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `streamingTexture=`*(obj {.inject.}: URuntimeVirtualTextureComponentPtr;
                          val {.inject.}: TObjectPtr[UVirtualTextureBuilder]): void {.
    importcpp: "setstreamingTexture(@)", header: "UEGenBindings.h".}
proc `bBuildDebugStreamingMips`*(obj {.inject.}: URuntimeVirtualTextureComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bBuildDebugStreamingMips=`*(obj {.inject.}: URuntimeVirtualTextureComponentPtr;
                                  val {.inject.}: bool): void {.
    importcpp: "setbBuildDebugStreamingMips(@)", header: "UEGenBindings.h".}
proc invalidate*(obj {.inject.}: URuntimeVirtualTextureComponentPtr;
                 worldBounds {.inject.}: var FBoxSphereBounds): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `virtualTextureComponent`*(obj {.inject.}: ARuntimeVirtualTextureVolumePtr): TObjectPtr[
    URuntimeVirtualTextureComponent] {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc `virtualTextureComponent=`*(obj {.inject.}: ARuntimeVirtualTextureVolumePtr;
    val {.inject.}: TObjectPtr[URuntimeVirtualTextureComponent]): void {.
    importcpp: "setvirtualTextureComponent(@)", header: "UEGenBindings.h".}
proc `captureComponent2D`*(obj {.inject.}: ASceneCapture2DPtr): TObjectPtr[
    USceneCaptureComponent2D] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureComponent2D=`*(obj {.inject.}: ASceneCapture2DPtr;
                            val {.inject.}: TObjectPtr[USceneCaptureComponent2D]): void {.
    importcpp: "setcaptureComponent2D(@)", header: "UEGenBindings.h".}
proc onInterpToggle*(obj {.inject.}: ASceneCapture2DPtr; bEnable {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `projectionType`*(obj {.inject.}: USceneCaptureComponent2DPtr): ECameraProjectionMode::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `projectionType=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                        val {.inject.}: ECameraProjectionMode::Type): void {.
    importcpp: "setprojectionType(@)", header: "UEGenBindings.h".}
proc `fOVAngle`*(obj {.inject.}: USceneCaptureComponent2DPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `fOVAngle=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                  val {.inject.}: float32): void {.importcpp: "setfOVAngle(@)",
    header: "UEGenBindings.h".}
proc `orthoWidth`*(obj {.inject.}: USceneCaptureComponent2DPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `orthoWidth=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setorthoWidth(@)", header: "UEGenBindings.h".}
proc `textureTarget`*(obj {.inject.}: USceneCaptureComponent2DPtr): TObjectPtr[
    UTextureRenderTarget2D] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textureTarget=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                       val {.inject.}: TObjectPtr[UTextureRenderTarget2D]): void {.
    importcpp: "settextureTarget(@)", header: "UEGenBindings.h".}
proc `compositeMode`*(obj {.inject.}: USceneCaptureComponent2DPtr): ESceneCaptureCompositeMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `compositeMode=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                       val {.inject.}: ESceneCaptureCompositeMode): void {.
    importcpp: "setcompositeMode(@)", header: "UEGenBindings.h".}
proc `postProcessSettings`*(obj {.inject.}: USceneCaptureComponent2DPtr): FPostProcessSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `postProcessSettings=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                             val {.inject.}: FPostProcessSettings): void {.
    importcpp: "setpostProcessSettings(@)", header: "UEGenBindings.h".}
proc `postProcessBlendWeight`*(obj {.inject.}: USceneCaptureComponent2DPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `postProcessBlendWeight=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setpostProcessBlendWeight(@)", header: "UEGenBindings.h".}
proc `customNearClippingPlane`*(obj {.inject.}: USceneCaptureComponent2DPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customNearClippingPlane=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                                 val {.inject.}: float32): void {.
    importcpp: "setcustomNearClippingPlane(@)", header: "UEGenBindings.h".}
proc `bUseCustomProjectionMatrix`*(obj {.inject.}: USceneCaptureComponent2DPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseCustomProjectionMatrix=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                                    val {.inject.}: bool): void {.
    importcpp: "setbUseCustomProjectionMatrix(@)", header: "UEGenBindings.h".}
proc `customProjectionMatrix`*(obj {.inject.}: USceneCaptureComponent2DPtr): FMatrix {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `customProjectionMatrix=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                                val {.inject.}: FMatrix): void {.
    importcpp: "setcustomProjectionMatrix(@)", header: "UEGenBindings.h".}
proc `bUseFauxOrthoViewPos`*(obj {.inject.}: USceneCaptureComponent2DPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseFauxOrthoViewPos=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                              val {.inject.}: bool): void {.
    importcpp: "setbUseFauxOrthoViewPos(@)", header: "UEGenBindings.h".}
proc `bEnableOrthographicTiling`*(obj {.inject.}: USceneCaptureComponent2DPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableOrthographicTiling=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                                   val {.inject.}: bool): void {.
    importcpp: "setbEnableOrthographicTiling(@)", header: "UEGenBindings.h".}
proc `numXTiles`*(obj {.inject.}: USceneCaptureComponent2DPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numXTiles=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                   val {.inject.}: int32): void {.importcpp: "setnumXTiles(@)",
    header: "UEGenBindings.h".}
proc `numYTiles`*(obj {.inject.}: USceneCaptureComponent2DPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `numYTiles=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                   val {.inject.}: int32): void {.importcpp: "setnumYTiles(@)",
    header: "UEGenBindings.h".}
proc `bEnableClipPlane`*(obj {.inject.}: USceneCaptureComponent2DPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableClipPlane=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                          val {.inject.}: bool): void {.
    importcpp: "setbEnableClipPlane(@)", header: "UEGenBindings.h".}
proc `clipPlaneBase`*(obj {.inject.}: USceneCaptureComponent2DPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `clipPlaneBase=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                       val {.inject.}: FVector): void {.
    importcpp: "setclipPlaneBase(@)", header: "UEGenBindings.h".}
proc `clipPlaneNormal`*(obj {.inject.}: USceneCaptureComponent2DPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `clipPlaneNormal=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                         val {.inject.}: FVector): void {.
    importcpp: "setclipPlaneNormal(@)", header: "UEGenBindings.h".}
proc `bCameraCutThisFrame`*(obj {.inject.}: USceneCaptureComponent2DPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCameraCutThisFrame=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbCameraCutThisFrame(@)", header: "UEGenBindings.h".}
proc `bConsiderUnrenderedOpaquePixelAsFullyTranslucent`*(
    obj {.inject.}: USceneCaptureComponent2DPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bConsiderUnrenderedOpaquePixelAsFullyTranslucent=`*(
    obj {.inject.}: USceneCaptureComponent2DPtr; val {.inject.}: uint8): void {.
    importcpp: "setbConsiderUnrenderedOpaquePixelAsFullyTranslucent(@)",
    header: "UEGenBindings.h".}
proc `bDisableFlipCopyGLES`*(obj {.inject.}: USceneCaptureComponent2DPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDisableFlipCopyGLES=`*(obj {.inject.}: USceneCaptureComponent2DPtr;
                              val {.inject.}: bool): void {.
    importcpp: "setbDisableFlipCopyGLES(@)", header: "UEGenBindings.h".}
proc removeBlendable*(obj {.inject.}: USceneCaptureComponent2DPtr;
    inBlendableObject {.inject.}: TScriptInterface[UBlendableInterface]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc captureScene*(obj {.inject.}: USceneCaptureComponent2DPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addOrUpdateBlendable*(obj {.inject.}: USceneCaptureComponent2DPtr;
    inBlendableObject {.inject.}: TScriptInterface[UBlendableInterface];
                           inWeight {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textureTarget`*(obj {.inject.}: USceneCaptureComponentCubePtr): TObjectPtr[
    UTextureRenderTargetCube] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textureTarget=`*(obj {.inject.}: USceneCaptureComponentCubePtr;
                       val {.inject.}: TObjectPtr[UTextureRenderTargetCube]): void {.
    importcpp: "settextureTarget(@)", header: "UEGenBindings.h".}
proc `bCaptureRotation`*(obj {.inject.}: USceneCaptureComponentCubePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCaptureRotation=`*(obj {.inject.}: USceneCaptureComponentCubePtr;
                          val {.inject.}: bool): void {.
    importcpp: "setbCaptureRotation(@)", header: "UEGenBindings.h".}
proc `textureTargetLeft`*(obj {.inject.}: USceneCaptureComponentCubePtr): TObjectPtr[
    UTextureRenderTargetCube] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textureTargetLeft=`*(obj {.inject.}: USceneCaptureComponentCubePtr;
                           val {.inject.}: TObjectPtr[UTextureRenderTargetCube]): void {.
    importcpp: "settextureTargetLeft(@)", header: "UEGenBindings.h".}
proc `textureTargetRight`*(obj {.inject.}: USceneCaptureComponentCubePtr): TObjectPtr[
    UTextureRenderTargetCube] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textureTargetRight=`*(obj {.inject.}: USceneCaptureComponentCubePtr;
                            val {.inject.}: TObjectPtr[UTextureRenderTargetCube]): void {.
    importcpp: "settextureTargetRight(@)", header: "UEGenBindings.h".}
proc `textureTargetODS`*(obj {.inject.}: USceneCaptureComponentCubePtr): TObjectPtr[
    UTextureRenderTarget2D] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textureTargetODS=`*(obj {.inject.}: USceneCaptureComponentCubePtr;
                          val {.inject.}: TObjectPtr[UTextureRenderTarget2D]): void {.
    importcpp: "settextureTargetODS(@)", header: "UEGenBindings.h".}
proc `iPD`*(obj {.inject.}: USceneCaptureComponentCubePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `iPD=`*(obj {.inject.}: USceneCaptureComponentCubePtr;
             val {.inject.}: float32): void {.importcpp: "setiPD(@)",
    header: "UEGenBindings.h".}
proc captureScene*(obj {.inject.}: USceneCaptureComponentCubePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureComponentCube`*(obj {.inject.}: ASceneCaptureCubePtr): TObjectPtr[
    USceneCaptureComponentCube] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `captureComponentCube=`*(obj {.inject.}: ASceneCaptureCubePtr;
    val {.inject.}: TObjectPtr[USceneCaptureComponentCube]): void {.
    importcpp: "setcaptureComponentCube(@)", header: "UEGenBindings.h".}
proc onInterpToggle*(obj {.inject.}: ASceneCaptureCubePtr;
                     bEnable {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `skeleton`*(obj {.inject.}: USkeletalMeshPtr): TObjectPtr[USkeleton] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skeleton=`*(obj {.inject.}: USkeletalMeshPtr;
                  val {.inject.}: TObjectPtr[USkeleton]): void {.
    importcpp: "setskeleton(@)", header: "UEGenBindings.h".}
proc `positiveBoundsExtension`*(obj {.inject.}: USkeletalMeshPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `positiveBoundsExtension=`*(obj {.inject.}: USkeletalMeshPtr;
                                 val {.inject.}: FVector): void {.
    importcpp: "setpositiveBoundsExtension(@)", header: "UEGenBindings.h".}
proc `negativeBoundsExtension`*(obj {.inject.}: USkeletalMeshPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `negativeBoundsExtension=`*(obj {.inject.}: USkeletalMeshPtr;
                                 val {.inject.}: FVector): void {.
    importcpp: "setnegativeBoundsExtension(@)", header: "UEGenBindings.h".}
proc `materials`*(obj {.inject.}: USkeletalMeshPtr): var TArray[
    FSkeletalMaterial] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `materials=`*(obj {.inject.}: USkeletalMeshPtr;
                   val {.inject.}: TArray[FSkeletalMaterial]): void {.
    importcpp: "setmaterials(@)", header: "UEGenBindings.h".}
proc `lODSettings`*(obj {.inject.}: USkeletalMeshPtr): TObjectPtr[
    USkeletalMeshLODSettings] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lODSettings=`*(obj {.inject.}: USkeletalMeshPtr;
                     val {.inject.}: TObjectPtr[USkeletalMeshLODSettings]): void {.
    importcpp: "setlODSettings(@)", header: "UEGenBindings.h".}
proc `defaultAnimatingRig`*(obj {.inject.}: USkeletalMeshPtr): TSoftObjectPtr[
    UObject] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultAnimatingRig=`*(obj {.inject.}: USkeletalMeshPtr;
                             val {.inject.}: TSoftObjectPtr[UObject]): void {.
    importcpp: "setdefaultAnimatingRig(@)", header: "UEGenBindings.h".}
proc `physicsAsset`*(obj {.inject.}: USkeletalMeshPtr): TObjectPtr[UPhysicsAsset] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `physicsAsset=`*(obj {.inject.}: USkeletalMeshPtr;
                      val {.inject.}: TObjectPtr[UPhysicsAsset]): void {.
    importcpp: "setphysicsAsset(@)", header: "UEGenBindings.h".}
proc `shadowPhysicsAsset`*(obj {.inject.}: USkeletalMeshPtr): TObjectPtr[
    UPhysicsAsset] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowPhysicsAsset=`*(obj {.inject.}: USkeletalMeshPtr;
                            val {.inject.}: TObjectPtr[UPhysicsAsset]): void {.
    importcpp: "setshadowPhysicsAsset(@)", header: "UEGenBindings.h".}
proc `nodeMappingData`*(obj {.inject.}: USkeletalMeshPtr): var TArray[
    TObjectPtr[UNodeMappingContainer]] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `nodeMappingData=`*(obj {.inject.}: USkeletalMeshPtr; val {.inject.}: TArray[
    TObjectPtr[UNodeMappingContainer]]): void {.
    importcpp: "setnodeMappingData(@)", header: "UEGenBindings.h".}
proc `morphTargets`*(obj {.inject.}: USkeletalMeshPtr): var TArray[
    TObjectPtr[UMorphTarget]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `morphTargets=`*(obj {.inject.}: USkeletalMeshPtr;
                      val {.inject.}: TArray[TObjectPtr[UMorphTarget]]): void {.
    importcpp: "setmorphTargets(@)", header: "UEGenBindings.h".}
proc `postProcessAnimBlueprint`*(obj {.inject.}: USkeletalMeshPtr): TSubclassOf[
    UAnimInstance] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `postProcessAnimBlueprint=`*(obj {.inject.}: USkeletalMeshPtr;
                                  val {.inject.}: TSubclassOf[UAnimInstance]): void {.
    importcpp: "setpostProcessAnimBlueprint(@)", header: "UEGenBindings.h".}
proc `meshClothingAssets`*(obj {.inject.}: USkeletalMeshPtr): var TArray[
    TObjectPtr[UClothingAssetBase]] {.importcpp: "$1(@)",
                                      header: "UEGenBindings.h".}
proc `meshClothingAssets=`*(obj {.inject.}: USkeletalMeshPtr; val {.inject.}: TArray[
    TObjectPtr[UClothingAssetBase]]): void {.
    importcpp: "setmeshClothingAssets(@)", header: "UEGenBindings.h".}
proc setSkeleton*(obj {.inject.}: USkeletalMeshPtr;
                  inSkeleton {.inject.}: USkeletonPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMorphTargets*(obj {.inject.}: USkeletalMeshPtr;
                      inMorphTargets {.inject.}: var TArray[UMorphTargetPtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMeshClothingAssets*(obj {.inject.}: USkeletalMeshPtr;
    inMeshClothingAssets {.inject.}: var TArray[UClothingAssetBasePtr]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaterials*(obj {.inject.}: USkeletalMeshPtr;
                   inMaterials {.inject.}: var TArray[FSkeletalMaterial]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLODSettings*(obj {.inject.}: USkeletalMeshPtr;
                     inLODSettings {.inject.}: USkeletalMeshLODSettingsPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDefaultAnimatingRig*(obj {.inject.}: USkeletalMeshPtr;
                             inAnimatingRig {.inject.}: TSoftObjectPtr[UObject]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc numSockets*(obj {.inject.}: USkeletalMeshPtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getAllMorphTargetNames*(obj {.inject.}: USkeletalMeshPtr): TArray[FString] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isSectionUsingCloth*(obj {.inject.}: USkeletalMeshPtr;
                          inSectionIndex {.inject.}: int32;
                          bCheckCorrespondingSections {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSocketByIndex*(obj {.inject.}: USkeletalMeshPtr; index {.inject.}: int32): USkeletalMeshSocketPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSkeleton*(obj {.inject.}: USkeletalMeshPtr): USkeletonPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getShadowPhysicsAsset*(obj {.inject.}: USkeletalMeshPtr): UPhysicsAssetPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPhysicsAsset*(obj {.inject.}: USkeletalMeshPtr): UPhysicsAssetPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNodeMappingData*(obj {.inject.}: USkeletalMeshPtr): TArray[UNodeMappingContainerPtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNodeMappingContainer*(obj {.inject.}: USkeletalMeshPtr;
                              sourceAsset {.inject.}: UBlueprintPtr): UNodeMappingContainerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMorphTargets*(obj {.inject.}: USkeletalMeshPtr): TArray[UMorphTargetPtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMeshClothingAssets*(obj {.inject.}: USkeletalMeshPtr): TArray[UClothingAssetBasePtr] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterials*(obj {.inject.}: USkeletalMeshPtr): TArray[FSkeletalMaterial] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLODSettings*(obj {.inject.}: USkeletalMeshPtr): USkeletalMeshLODSettingsPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getImportedBounds*(obj {.inject.}: USkeletalMeshPtr): FBoxSphereBounds {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultAnimatingRig*(obj {.inject.}: USkeletalMeshPtr): TSoftObjectPtr[UObject] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBounds*(obj {.inject.}: USkeletalMeshPtr): FBoxSphereBounds {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findSocketInfo*(obj {.inject.}: USkeletalMeshPtr;
                     inSocketName {.inject.}: FName;
                     outTransform {.inject.}: var FTransform;
                     outBoneIndex {.inject.}: var int32;
                     outIndex {.inject.}: var int32): USkeletalMeshSocketPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findSocketAndIndex*(obj {.inject.}: USkeletalMeshPtr;
                         inSocketName {.inject.}: FName;
                         outIndex {.inject.}: var int32): USkeletalMeshSocketPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findSocket*(obj {.inject.}: USkeletalMeshPtr; inSocketName {.inject.}: FName): USkeletalMeshSocketPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `socketName`*(obj {.inject.}: USkeletalMeshSocketPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `socketName=`*(obj {.inject.}: USkeletalMeshSocketPtr; val {.inject.}: FName): void {.
    importcpp: "setsocketName(@)", header: "UEGenBindings.h".}
proc `boneName`*(obj {.inject.}: USkeletalMeshSocketPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `boneName=`*(obj {.inject.}: USkeletalMeshSocketPtr; val {.inject.}: FName): void {.
    importcpp: "setboneName(@)", header: "UEGenBindings.h".}
proc `relativeLocation`*(obj {.inject.}: USkeletalMeshSocketPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeLocation=`*(obj {.inject.}: USkeletalMeshSocketPtr;
                          val {.inject.}: FVector): void {.
    importcpp: "setrelativeLocation(@)", header: "UEGenBindings.h".}
proc `relativeRotation`*(obj {.inject.}: USkeletalMeshSocketPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeRotation=`*(obj {.inject.}: USkeletalMeshSocketPtr;
                          val {.inject.}: FRotator): void {.
    importcpp: "setrelativeRotation(@)", header: "UEGenBindings.h".}
proc `relativeScale`*(obj {.inject.}: USkeletalMeshSocketPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeScale=`*(obj {.inject.}: USkeletalMeshSocketPtr;
                       val {.inject.}: FVector): void {.
    importcpp: "setrelativeScale(@)", header: "UEGenBindings.h".}
proc `bForceAlwaysAnimated`*(obj {.inject.}: USkeletalMeshSocketPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bForceAlwaysAnimated=`*(obj {.inject.}: USkeletalMeshSocketPtr;
                              val {.inject.}: bool): void {.
    importcpp: "setbForceAlwaysAnimated(@)", header: "UEGenBindings.h".}
proc initializeSocketFromLocation*(obj {.inject.}: USkeletalMeshSocketPtr;
    skelComp {.inject.}: USkeletalMeshComponentPtr;
                                   worldLocation {.inject.}: FVector;
                                   worldNormal {.inject.}: FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSocketLocation*(obj {.inject.}: USkeletalMeshSocketPtr;
                        skelComp {.inject.}: USkeletalMeshComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skyAtmosphereComponent`*(obj {.inject.}: ASkyAtmospherePtr): TObjectPtr[
    USkyAtmosphereComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skyAtmosphereComponent=`*(obj {.inject.}: ASkyAtmospherePtr; val {.inject.}: TObjectPtr[
    USkyAtmosphereComponent]): void {.importcpp: "setskyAtmosphereComponent(@)",
                                      header: "UEGenBindings.h".}
proc `bRealTimeCapture`*(obj {.inject.}: USkyLightComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bRealTimeCapture=`*(obj {.inject.}: USkyLightComponentPtr;
                          val {.inject.}: bool): void {.
    importcpp: "setbRealTimeCapture(@)", header: "UEGenBindings.h".}
proc `sourceType`*(obj {.inject.}: USkyLightComponentPtr): ESkyLightSourceType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceType=`*(obj {.inject.}: USkyLightComponentPtr;
                    val {.inject.}: ESkyLightSourceType): void {.
    importcpp: "setsourceType(@)", header: "UEGenBindings.h".}
proc `cubemap`*(obj {.inject.}: USkyLightComponentPtr): TObjectPtr[UTextureCube] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cubemap=`*(obj {.inject.}: USkyLightComponentPtr;
                 val {.inject.}: TObjectPtr[UTextureCube]): void {.
    importcpp: "setcubemap(@)", header: "UEGenBindings.h".}
proc `sourceCubemapAngle`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sourceCubemapAngle=`*(obj {.inject.}: USkyLightComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "setsourceCubemapAngle(@)", header: "UEGenBindings.h".}
proc `cubemapResolution`*(obj {.inject.}: USkyLightComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cubemapResolution=`*(obj {.inject.}: USkyLightComponentPtr;
                           val {.inject.}: int32): void {.
    importcpp: "setcubemapResolution(@)", header: "UEGenBindings.h".}
proc `skyDistanceThreshold`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skyDistanceThreshold=`*(obj {.inject.}: USkyLightComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setskyDistanceThreshold(@)", header: "UEGenBindings.h".}
proc `bCaptureEmissiveOnly`*(obj {.inject.}: USkyLightComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCaptureEmissiveOnly=`*(obj {.inject.}: USkyLightComponentPtr;
                              val {.inject.}: bool): void {.
    importcpp: "setbCaptureEmissiveOnly(@)", header: "UEGenBindings.h".}
proc `bLowerHemisphereIsBlack`*(obj {.inject.}: USkyLightComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bLowerHemisphereIsBlack=`*(obj {.inject.}: USkyLightComponentPtr;
                                 val {.inject.}: bool): void {.
    importcpp: "setbLowerHemisphereIsBlack(@)", header: "UEGenBindings.h".}
proc `lowerHemisphereColor`*(obj {.inject.}: USkyLightComponentPtr): FLinearColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lowerHemisphereColor=`*(obj {.inject.}: USkyLightComponentPtr;
                              val {.inject.}: FLinearColor): void {.
    importcpp: "setlowerHemisphereColor(@)", header: "UEGenBindings.h".}
proc `occlusionMaxDistance`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `occlusionMaxDistance=`*(obj {.inject.}: USkyLightComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setocclusionMaxDistance(@)", header: "UEGenBindings.h".}
proc `contrast`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `contrast=`*(obj {.inject.}: USkyLightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setcontrast(@)", header: "UEGenBindings.h".}
proc `occlusionExponent`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `occlusionExponent=`*(obj {.inject.}: USkyLightComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setocclusionExponent(@)", header: "UEGenBindings.h".}
proc `minOcclusion`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minOcclusion=`*(obj {.inject.}: USkyLightComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setminOcclusion(@)", header: "UEGenBindings.h".}
proc `occlusionTint`*(obj {.inject.}: USkyLightComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `occlusionTint=`*(obj {.inject.}: USkyLightComponentPtr;
                       val {.inject.}: FColor): void {.
    importcpp: "setocclusionTint(@)", header: "UEGenBindings.h".}
proc `bCloudAmbientOcclusion`*(obj {.inject.}: USkyLightComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bCloudAmbientOcclusion=`*(obj {.inject.}: USkyLightComponentPtr;
                                val {.inject.}: uint8): void {.
    importcpp: "setbCloudAmbientOcclusion(@)", header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionStrength`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionStrength=`*(obj {.inject.}: USkyLightComponentPtr;
                                       val {.inject.}: float32): void {.
    importcpp: "setcloudAmbientOcclusionStrength(@)", header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionExtent`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionExtent=`*(obj {.inject.}: USkyLightComponentPtr;
                                     val {.inject.}: float32): void {.
    importcpp: "setcloudAmbientOcclusionExtent(@)", header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionMapResolutionScale`*(
    obj {.inject.}: USkyLightComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionMapResolutionScale=`*(
    obj {.inject.}: USkyLightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setcloudAmbientOcclusionMapResolutionScale(@)",
    header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionApertureScale`*(obj {.inject.}: USkyLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cloudAmbientOcclusionApertureScale=`*(
    obj {.inject.}: USkyLightComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setcloudAmbientOcclusionApertureScale(@)",
    header: "UEGenBindings.h".}
proc `occlusionCombineMode`*(obj {.inject.}: USkyLightComponentPtr): EOcclusionCombineMode {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `occlusionCombineMode=`*(obj {.inject.}: USkyLightComponentPtr;
                              val {.inject.}: EOcclusionCombineMode): void {.
    importcpp: "setocclusionCombineMode(@)", header: "UEGenBindings.h".}
proc setVolumetricScatteringIntensity*(obj {.inject.}: USkyLightComponentPtr;
                                       newIntensity {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOcclusionTint*(obj {.inject.}: USkyLightComponentPtr;
                       inTint {.inject.}: var FColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOcclusionExponent*(obj {.inject.}: USkyLightComponentPtr;
                           inOcclusionExponent {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setOcclusionContrast*(obj {.inject.}: USkyLightComponentPtr;
                           inOcclusionContrast {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMinOcclusion*(obj {.inject.}: USkyLightComponentPtr;
                      inMinOcclusion {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLowerHemisphereColor*(obj {.inject.}: USkyLightComponentPtr;
    inLowerHemisphereColor {.inject.}: var FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLightColor*(obj {.inject.}: USkyLightComponentPtr;
                    newLightColor {.inject.}: FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIntensity*(obj {.inject.}: USkyLightComponentPtr;
                   newIntensity {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setIndirectLightingIntensity*(obj {.inject.}: USkyLightComponentPtr;
                                   newIntensity {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCubemapBlend*(obj {.inject.}: USkyLightComponentPtr;
                      sourceCubemap {.inject.}: UTextureCubePtr;
                      destinationCubemap {.inject.}: UTextureCubePtr;
                      inBlendFraction {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setCubemap*(obj {.inject.}: USkyLightComponentPtr;
                 newCubemap {.inject.}: UTextureCubePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc recaptureSky*(obj {.inject.}: USkyLightComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuation`*(obj {.inject.}: USoundAttenuationPtr): FSoundAttenuationSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `attenuation=`*(obj {.inject.}: USoundAttenuationPtr;
                     val {.inject.}: FSoundAttenuationSettings): void {.
    importcpp: "setattenuation(@)", header: "UEGenBindings.h".}
proc `properties`*(obj {.inject.}: USoundClassPtr): FSoundClassProperties {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `properties=`*(obj {.inject.}: USoundClassPtr;
                    val {.inject.}: FSoundClassProperties): void {.
    importcpp: "setproperties(@)", header: "UEGenBindings.h".}
proc `childClasses`*(obj {.inject.}: USoundClassPtr): var TArray[
    TObjectPtr[USoundClass]] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `childClasses=`*(obj {.inject.}: USoundClassPtr;
                      val {.inject.}: TArray[TObjectPtr[USoundClass]]): void {.
    importcpp: "setchildClasses(@)", header: "UEGenBindings.h".}
proc `passiveSoundMixModifiers`*(obj {.inject.}: USoundClassPtr): var TArray[
    FPassiveSoundMixModifier] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `passiveSoundMixModifiers=`*(obj {.inject.}: USoundClassPtr; val {.inject.}: TArray[
    FPassiveSoundMixModifier]): void {.importcpp: "setpassiveSoundMixModifiers(@)",
                                       header: "UEGenBindings.h".}
proc `parentClass`*(obj {.inject.}: USoundClassPtr): TObjectPtr[USoundClass] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `parentClass=`*(obj {.inject.}: USoundClassPtr;
                     val {.inject.}: TObjectPtr[USoundClass]): void {.
    importcpp: "setparentClass(@)", header: "UEGenBindings.h".}
proc `concurrency`*(obj {.inject.}: USoundConcurrencyPtr): FSoundConcurrencySettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `concurrency=`*(obj {.inject.}: USoundConcurrencyPtr;
                     val {.inject.}: FSoundConcurrencySettings): void {.
    importcpp: "setconcurrency(@)", header: "UEGenBindings.h".}
proc `volumeMultiplier`*(obj {.inject.}: USoundCuePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumeMultiplier=`*(obj {.inject.}: USoundCuePtr; val {.inject.}: float32): void {.
    importcpp: "setvolumeMultiplier(@)", header: "UEGenBindings.h".}
proc `pitchMultiplier`*(obj {.inject.}: USoundCuePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `pitchMultiplier=`*(obj {.inject.}: USoundCuePtr; val {.inject.}: float32): void {.
    importcpp: "setpitchMultiplier(@)", header: "UEGenBindings.h".}
proc `soundClassEffects`*(obj {.inject.}: USoundMixPtr): var TArray[
    FSoundClassAdjuster] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `soundClassEffects=`*(obj {.inject.}: USoundMixPtr;
                           val {.inject.}: TArray[FSoundClassAdjuster]): void {.
    importcpp: "setsoundClassEffects(@)", header: "UEGenBindings.h".}
proc stringToAudioParameter*(name {.inject.}: FName; string {.inject.}: FString): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stringArrayToAudioParameter*(name {.inject.}: FName;
                                  strings {.inject.}: TArray[FString]): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc objectToAudioParameter*(name {.inject.}: FName;
                             `object` {.inject.}: UObjectPtr): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc objectArrayToAudioParameter*(name {.inject.}: FName;
                                  objects {.inject.}: TArray[UObjectPtr]): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc integerToAudioParameter*(name {.inject.}: FName; integer {.inject.}: int32): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc integerArrayToAudioParameter*(name {.inject.}: FName;
                                   integers {.inject.}: TArray[int32]): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc floatToAudioParameter*(name {.inject.}: FName; float {.inject.}: float32): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc floatArrayToAudioParameter*(name {.inject.}: FName;
                                 floats {.inject.}: TArray[float]): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc booleanToAudioParameter*(name {.inject.}: FName; bool {.inject.}: bool): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc booleanArrayToAudioParameter*(name {.inject.}: FName;
                                   bools {.inject.}: TArray[bool]): FAudioParameter {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoDisable`*(obj {.inject.}: USoundSubmixBasePtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAutoDisable=`*(obj {.inject.}: USoundSubmixBasePtr; val {.inject.}: bool): void {.
    importcpp: "setbAutoDisable(@)", header: "UEGenBindings.h".}
proc `autoDisableTime`*(obj {.inject.}: USoundSubmixBasePtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `autoDisableTime=`*(obj {.inject.}: USoundSubmixBasePtr;
                         val {.inject.}: float32): void {.
    importcpp: "setautoDisableTime(@)", header: "UEGenBindings.h".}
proc `childSubmixes`*(obj {.inject.}: USoundSubmixBasePtr): var TArray[
    TObjectPtr[USoundSubmixBase]] {.importcpp: "$1(@)",
                                    header: "UEGenBindings.h".}
proc `childSubmixes=`*(obj {.inject.}: USoundSubmixBasePtr;
                       val {.inject.}: TArray[TObjectPtr[USoundSubmixBase]]): void {.
    importcpp: "setchildSubmixes(@)", header: "UEGenBindings.h".}
proc `parentSubmix`*(obj {.inject.}: USoundSubmixWithParentBasePtr): TObjectPtr[
    USoundSubmixBase] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `parentSubmix=`*(obj {.inject.}: USoundSubmixWithParentBasePtr;
                      val {.inject.}: TObjectPtr[USoundSubmixBase]): void {.
    importcpp: "setparentSubmix(@)", header: "UEGenBindings.h".}
proc `bMuteWhenBackgrounded`*(obj {.inject.}: USoundSubmixPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bMuteWhenBackgrounded=`*(obj {.inject.}: USoundSubmixPtr;
                               val {.inject.}: uint8): void {.
    importcpp: "setbMuteWhenBackgrounded(@)", header: "UEGenBindings.h".}
proc `submixEffectChain`*(obj {.inject.}: USoundSubmixPtr): var TArray[
    TObjectPtr[USoundEffectSubmixPreset]] {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `submixEffectChain=`*(obj {.inject.}: USoundSubmixPtr; val {.inject.}: TArray[
    TObjectPtr[USoundEffectSubmixPreset]]): void {.
    importcpp: "setsubmixEffectChain(@)", header: "UEGenBindings.h".}
proc `ambisonicsPluginSettings`*(obj {.inject.}: USoundSubmixPtr): TObjectPtr[
    USoundfieldEncodingSettingsBase] {.importcpp: "$1(@)",
                                       header: "UEGenBindings.h".}
proc `ambisonicsPluginSettings=`*(obj {.inject.}: USoundSubmixPtr; val {.inject.}: TObjectPtr[
    USoundfieldEncodingSettingsBase]): void {.
    importcpp: "setambisonicsPluginSettings(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerAttackTime`*(obj {.inject.}: USoundSubmixPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerAttackTime=`*(obj {.inject.}: USoundSubmixPtr;
                                    val {.inject.}: int32): void {.
    importcpp: "setenvelopeFollowerAttackTime(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerReleaseTime`*(obj {.inject.}: USoundSubmixPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `envelopeFollowerReleaseTime=`*(obj {.inject.}: USoundSubmixPtr;
                                     val {.inject.}: int32): void {.
    importcpp: "setenvelopeFollowerReleaseTime(@)", header: "UEGenBindings.h".}
proc `outputVolumeModulation`*(obj {.inject.}: USoundSubmixPtr): FSoundModulationDestinationSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `outputVolumeModulation=`*(obj {.inject.}: USoundSubmixPtr; val {.inject.}: FSoundModulationDestinationSettings): void {.
    importcpp: "setoutputVolumeModulation(@)", header: "UEGenBindings.h".}
proc `wetLevelModulation`*(obj {.inject.}: USoundSubmixPtr): FSoundModulationDestinationSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `wetLevelModulation=`*(obj {.inject.}: USoundSubmixPtr;
                            val {.inject.}: FSoundModulationDestinationSettings): void {.
    importcpp: "setwetLevelModulation(@)", header: "UEGenBindings.h".}
proc `dryLevelModulation`*(obj {.inject.}: USoundSubmixPtr): FSoundModulationDestinationSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `dryLevelModulation=`*(obj {.inject.}: USoundSubmixPtr;
                            val {.inject.}: FSoundModulationDestinationSettings): void {.
    importcpp: "setdryLevelModulation(@)", header: "UEGenBindings.h".}
proc stopSpectralAnalysis*(obj {.inject.}: USoundSubmixPtr;
                           worldContextObject {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopRecordingOutput*(obj {.inject.}: USoundSubmixPtr;
                          worldContextObject {.inject.}: UObjectPtr;
                          exportType {.inject.}: EAudioRecordingExportType;
                          name {.inject.}: FString; path {.inject.}: FString;
                          existingSoundWaveToOverwrite {.inject.}: USoundWavePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc stopEnvelopeFollowing*(obj {.inject.}: USoundSubmixPtr;
                            worldContextObject {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startSpectralAnalysis*(obj {.inject.}: USoundSubmixPtr;
                            worldContextObject {.inject.}: UObjectPtr;
                            fFTSize {.inject.}: EFFTSize;
    interpolationMethod {.inject.}: EFFTPeakInterpolationMethod;
                            windowType {.inject.}: EFFTWindowType;
                            hopSize {.inject.}: float32;
                            spectrumType {.inject.}: EAudioSpectrumType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startRecordingOutput*(obj {.inject.}: USoundSubmixPtr;
                           worldContextObject {.inject.}: UObjectPtr;
                           expectedDuration {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc startEnvelopeFollowing*(obj {.inject.}: USoundSubmixPtr;
                             worldContextObject {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSubmixWetLevel*(obj {.inject.}: USoundSubmixPtr;
                        worldContextObject {.inject.}: UObjectPtr;
                        inWetLevel {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSubmixOutputVolume*(obj {.inject.}: USoundSubmixPtr;
                            worldContextObject {.inject.}: UObjectPtr;
                            inOutputVolume {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSubmixDryLevel*(obj {.inject.}: USoundSubmixPtr;
                        worldContextObject {.inject.}: UObjectPtr;
                        inDryLevel {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeSpectralAnalysisDelegate*(obj {.inject.}: USoundSubmixPtr;
                                     worldContextObject {.inject.}: UObjectPtr;
    onSubmixSpectralAnalysisBP {.inject.}: var FOnSubmixSpectralAnalysisBP): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addSpectralAnalysisDelegate*(obj {.inject.}: USoundSubmixPtr;
                                  worldContextObject {.inject.}: UObjectPtr;
    inBandSettings {.inject.}: var TArray[
    FSoundSubmixSpectralAnalysisBandSettings];
    onSubmixSpectralAnalysisBP {.inject.}: var FOnSubmixSpectralAnalysisBP;
                                  updateRate {.inject.}: float32;
                                  decibelNoiseFloor {.inject.}: float32;
                                  bDoNormalize {.inject.}: bool;
                                  bDoAutoRange {.inject.}: bool;
                                  autoRangeAttackTime {.inject.}: float32;
                                  autoRangeReleaseTime {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addEnvelopeFollowerDelegate*(obj {.inject.}: USoundSubmixPtr;
                                  worldContextObject {.inject.}: UObjectPtr;
    onSubmixEnvelopeBP {.inject.}: var FOnSubmixEnvelopeBP): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `influenceRadius`*(obj {.inject.}: USphereReflectionCaptureComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `influenceRadius=`*(obj {.inject.}: USphereReflectionCaptureComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "setinfluenceRadius(@)", header: "UEGenBindings.h".}
proc `duration`*(obj {.inject.}: USplineComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `duration=`*(obj {.inject.}: USplineComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setduration(@)", header: "UEGenBindings.h".}
proc `bStationaryEndpoints`*(obj {.inject.}: USplineComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bStationaryEndpoints=`*(obj {.inject.}: USplineComponentPtr;
                              val {.inject.}: bool): void {.
    importcpp: "setbStationaryEndpoints(@)", header: "UEGenBindings.h".}
proc `bInputSplinePointsToConstructionScript`*(
    obj {.inject.}: USplineComponentPtr): bool {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bInputSplinePointsToConstructionScript=`*(
    obj {.inject.}: USplineComponentPtr; val {.inject.}: bool): void {.
    importcpp: "setbInputSplinePointsToConstructionScript(@)",
    header: "UEGenBindings.h".}
proc `bDrawDebug`*(obj {.inject.}: USplineComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDrawDebug=`*(obj {.inject.}: USplineComponentPtr; val {.inject.}: bool): void {.
    importcpp: "setbDrawDebug(@)", header: "UEGenBindings.h".}
proc `defaultUpVector`*(obj {.inject.}: USplineComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `defaultUpVector=`*(obj {.inject.}: USplineComponentPtr;
                         val {.inject.}: FVector): void {.
    importcpp: "setdefaultUpVector(@)", header: "UEGenBindings.h".}
proc updateSpline*(obj {.inject.}: USplineComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWorldLocationAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                    pointIndex {.inject.}: int32;
                                    inLocation {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUpVectorAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                               pointIndex {.inject.}: int32;
                               inUpVector {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                               bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setUnselectedSplineSegmentColor*(obj {.inject.}: USplineComponentPtr;
                                      segmentColor {.inject.}: var FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTangentsAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                               pointIndex {.inject.}: int32;
                               inArriveTangent {.inject.}: var FVector;
                               inLeaveTangent {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                               bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTangentColor*(obj {.inject.}: USplineComponentPtr;
                      tangentColor {.inject.}: var FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTangentAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                              pointIndex {.inject.}: int32;
                              inTangent {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                              bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSplineWorldPoints*(obj {.inject.}: USplineComponentPtr;
                           points {.inject.}: var TArray[FVector]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSplinePointType*(obj {.inject.}: USplineComponentPtr;
                         pointIndex {.inject.}: int32;
                         `type` {.inject.}: ESplinePointType::Type;
                         bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSplinePoints*(obj {.inject.}: USplineComponentPtr;
                      points {.inject.}: var TArray[FVector];
                      coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                      bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSplineLocalPoints*(obj {.inject.}: USplineComponentPtr;
                           points {.inject.}: var TArray[FVector]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSelectedSplineSegmentColor*(obj {.inject.}: USplineComponentPtr;
                                    segmentColor {.inject.}: var FLinearColor): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setScaleAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                            pointIndex {.inject.}: int32;
                            inScaleVector {.inject.}: var FVector;
                            bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRotationAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                               pointIndex {.inject.}: int32;
                               inRotation {.inject.}: var FRotator;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                               bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLocationAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                               pointIndex {.inject.}: int32;
                               inLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                               bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDrawDebug*(obj {.inject.}: USplineComponentPtr; bShow {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setDefaultUpVector*(obj {.inject.}: USplineComponentPtr;
                         upVector {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setClosedLoopAtPosition*(obj {.inject.}: USplineComponentPtr;
                              bInClosedLoop {.inject.}: bool;
                              key {.inject.}: float32;
                              bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setClosedLoop*(obj {.inject.}: USplineComponentPtr;
                    bInClosedLoop {.inject.}: bool;
                    bUpdateSpline {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc removeSplinePoint*(obj {.inject.}: USplineComponentPtr;
                        index {.inject.}: int32; bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isClosedLoop*(obj {.inject.}: USplineComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldTangentAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
    distance {.inject.}: float32): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getWorldRotationAtTime*(obj {.inject.}: USplineComponentPtr;
                             time {.inject.}: float32;
                             bUseConstantVelocity {.inject.}: bool): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldRotationAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
    distance {.inject.}: float32): FRotator {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getWorldLocationAtTime*(obj {.inject.}: USplineComponentPtr;
                             time {.inject.}: float32;
                             bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldLocationAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                    pointIndex {.inject.}: int32): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldLocationAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
    distance {.inject.}: float32): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getWorldDirectionAtTime*(obj {.inject.}: USplineComponentPtr;
                              time {.inject.}: float32;
                              bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldDirectionAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
    distance {.inject.}: float32): FVector {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getVectorPropertyAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                     index {.inject.}: int32;
                                     propertyName {.inject.}: FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVectorPropertyAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                        inKey {.inject.}: float32;
                                        propertyName {.inject.}: FName): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUpVectorAtTime*(obj {.inject.}: USplineComponentPtr;
                        time {.inject.}: float32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                        bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUpVectorAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                               pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUpVectorAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                  inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUpVectorAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                       distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTransformAtTime*(obj {.inject.}: USplineComponentPtr;
                         time {.inject.}: float32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                         bUseConstantVelocity {.inject.}: bool;
                         bUseScale {.inject.}: bool): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTransformAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                                bUseScale {.inject.}: bool): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTransformAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                   inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                                   bUseScale {.inject.}: bool): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTransformAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                        distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                                        bUseScale {.inject.}: bool): FTransform {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTangentAtTime*(obj {.inject.}: USplineComponentPtr;
                       time {.inject.}: float32;
                       coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                       bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTangentAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                              pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTangentAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                 inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTangentAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                      distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSplinePointType*(obj {.inject.}: USplineComponentPtr;
                         pointIndex {.inject.}: int32): ESplinePointType::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSplineLength*(obj {.inject.}: USplineComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaleAtTime*(obj {.inject.}: USplineComponentPtr;
                     time {.inject.}: float32;
                     bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaleAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                            pointIndex {.inject.}: int32): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaleAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                               inKey {.inject.}: float32): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaleAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                    distance {.inject.}: float32): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRotationAtTime*(obj {.inject.}: USplineComponentPtr;
                        time {.inject.}: float32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                        bUseConstantVelocity {.inject.}: bool): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRotationAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                               pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRotationAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                  inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRotationAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                       distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRollAtTime*(obj {.inject.}: USplineComponentPtr;
                    time {.inject.}: float32;
                    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                    bUseConstantVelocity {.inject.}: bool): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRollAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                           pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRollAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                              inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRollAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                   distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRightVectorAtTime*(obj {.inject.}: USplineComponentPtr;
                           time {.inject.}: float32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                           bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRightVectorAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                  pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRightVectorAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                     inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRightVectorAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
    distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumberOfSplineSegments*(obj {.inject.}: USplineComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumberOfSplinePoints*(obj {.inject.}: USplineComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocationAtTime*(obj {.inject.}: USplineComponentPtr;
                        time {.inject.}: float32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                        bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocationAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                               pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocationAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                  inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocationAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                       distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocationAndTangentAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
    pointIndex {.inject.}: int32; location {.inject.}: var FVector;
    tangent {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocalLocationAndTangentAtSplinePoint*(
    obj {.inject.}: USplineComponentPtr; pointIndex {.inject.}: int32;
    localLocation {.inject.}: var FVector; localTangent {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLeaveTangentAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                   pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getInputKeyAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                       distance {.inject.}: float32): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFloatPropertyAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                    index {.inject.}: int32;
                                    propertyName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getFloatPropertyAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                       inKey {.inject.}: float32;
                                       propertyName {.inject.}: FName): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDistanceAlongSplineAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
    pointIndex {.inject.}: int32): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getDistanceAlongSplineAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
    inKey {.inject.}: float32): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getDirectionAtTime*(obj {.inject.}: USplineComponentPtr;
                         time {.inject.}: float32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                         bUseConstantVelocity {.inject.}: bool): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDirectionAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDirectionAtSplineInputKey*(obj {.inject.}: USplineComponentPtr;
                                   inKey {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDirectionAtDistanceAlongSpline*(obj {.inject.}: USplineComponentPtr;
                                        distance {.inject.}: float32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getDefaultUpVector*(obj {.inject.}: USplineComponentPtr;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getArriveTangentAtSplinePoint*(obj {.inject.}: USplineComponentPtr;
                                    pointIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findUpVectorClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
    worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findTransformClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
    worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
    bUseScale {.inject.}: bool): FTransform {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc findTangentClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
                                        worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findScaleClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
                                      worldLocation {.inject.}: var FVector): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findRotationClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
    worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findRollClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
                                     worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findRightVectorClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
    worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findLocationClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
    worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc findInputKeyClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
    worldLocation {.inject.}: var FVector): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc findDirectionClosestToWorldLocation*(obj {.inject.}: USplineComponentPtr;
    worldLocation {.inject.}: var FVector;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc divideSplineIntoPolylineRecursive*(obj {.inject.}: USplineComponentPtr;
    startDistanceAlongSpline {.inject.}: float32;
    endDistanceAlongSpline {.inject.}: float32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
    maxSquareDistanceFromSpline {.inject.}: float32; outPoints {.inject.}: var TArray[
    FVector]): bool {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertSplineToPolyLine*(obj {.inject.}: USplineComponentPtr;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                              maxSquareDistanceFromSpline {.inject.}: float32;
                              outPoints {.inject.}: var TArray[FVector]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc convertSplineSegmentToPolyLine*(obj {.inject.}: USplineComponentPtr;
                                     splinePointStartIndex {.inject.}: int32;
    coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
    maxSquareDistanceFromSpline {.inject.}: float32;
                                     outPoints {.inject.}: var TArray[FVector]): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc clearSplinePoints*(obj {.inject.}: USplineComponentPtr;
                        bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addSplineWorldPoint*(obj {.inject.}: USplineComponentPtr;
                          position {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addSplinePointAtIndex*(obj {.inject.}: USplineComponentPtr;
                            position {.inject.}: var FVector;
                            index {.inject.}: int32; coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                            bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addSplinePoint*(obj {.inject.}: USplineComponentPtr;
                     position {.inject.}: var FVector;
                     coordinateSpace {.inject.}: ESplineCoordinateSpace::Type;
                     bUpdateSpline {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addSplineLocalPoint*(obj {.inject.}: USplineComponentPtr;
                          position {.inject.}: var FVector): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addPoints*(obj {.inject.}: USplineComponentPtr;
                points {.inject.}: var TArray[FSplinePoint];
                bUpdateSpline {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc addPoint*(obj {.inject.}: USplineComponentPtr;
               point {.inject.}: var FSplinePoint; bUpdateSpline {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc updateMesh*(obj {.inject.}: USplineMeshComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStartTangent*(obj {.inject.}: USplineMeshComponentPtr;
                      startTangent {.inject.}: FVector;
                      bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setStartScale*(obj {.inject.}: USplineMeshComponentPtr;
                    startScale {.inject.}: FVector2D;
                    bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setStartRoll*(obj {.inject.}: USplineMeshComponentPtr;
                   startRoll {.inject.}: float32; bUpdateMesh {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStartPosition*(obj {.inject.}: USplineMeshComponentPtr;
                       startPos {.inject.}: FVector; bUpdateMesh {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStartOffset*(obj {.inject.}: USplineMeshComponentPtr;
                     startOffset {.inject.}: FVector2D;
                     bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setStartAndEnd*(obj {.inject.}: USplineMeshComponentPtr;
                     startPos {.inject.}: FVector;
                     startTangent {.inject.}: FVector;
                     endPos {.inject.}: FVector; endTangent {.inject.}: FVector;
                     bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSplineUpDir*(obj {.inject.}: USplineMeshComponentPtr;
                     inSplineUpDir {.inject.}: var FVector;
                     bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setForwardAxis*(obj {.inject.}: USplineMeshComponentPtr;
                     inForwardAxis {.inject.}: ESplineMeshAxis::Type;
                     bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setEndTangent*(obj {.inject.}: USplineMeshComponentPtr;
                    endTangent {.inject.}: FVector; bUpdateMesh {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEndScale*(obj {.inject.}: USplineMeshComponentPtr;
                  endScale {.inject.}: FVector2D; bUpdateMesh {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEndRoll*(obj {.inject.}: USplineMeshComponentPtr;
                 endRoll {.inject.}: float32; bUpdateMesh {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEndPosition*(obj {.inject.}: USplineMeshComponentPtr;
                     endPos {.inject.}: FVector; bUpdateMesh {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEndOffset*(obj {.inject.}: USplineMeshComponentPtr;
                   endOffset {.inject.}: FVector2D; bUpdateMesh {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setBoundaryMin*(obj {.inject.}: USplineMeshComponentPtr;
                     inBoundaryMin {.inject.}: float32;
                     bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setBoundaryMax*(obj {.inject.}: USplineMeshComponentPtr;
                     inBoundaryMax {.inject.}: float32;
                     bUpdateMesh {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getStartTangent*(obj {.inject.}: USplineMeshComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStartScale*(obj {.inject.}: USplineMeshComponentPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStartRoll*(obj {.inject.}: USplineMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStartPosition*(obj {.inject.}: USplineMeshComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStartOffset*(obj {.inject.}: USplineMeshComponentPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getSplineUpDir*(obj {.inject.}: USplineMeshComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getForwardAxis*(obj {.inject.}: USplineMeshComponentPtr): ESplineMeshAxis::Type {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEndTangent*(obj {.inject.}: USplineMeshComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEndScale*(obj {.inject.}: USplineMeshComponentPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEndRoll*(obj {.inject.}: USplineMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEndPosition*(obj {.inject.}: USplineMeshComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEndOffset*(obj {.inject.}: USplineMeshComponentPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoundaryMin*(obj {.inject.}: USplineMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoundaryMax*(obj {.inject.}: USplineMeshComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `innerConeAngle`*(obj {.inject.}: USpotLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `innerConeAngle=`*(obj {.inject.}: USpotLightComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setinnerConeAngle(@)", header: "UEGenBindings.h".}
proc `outerConeAngle`*(obj {.inject.}: USpotLightComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `outerConeAngle=`*(obj {.inject.}: USpotLightComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setouterConeAngle(@)", header: "UEGenBindings.h".}
proc setOuterConeAngle*(obj {.inject.}: USpotLightComponentPtr;
                        newOuterConeAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setInnerConeAngle*(obj {.inject.}: USpotLightComponentPtr;
                        newInnerConeAngle {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetArmLength`*(obj {.inject.}: USpringArmComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetArmLength=`*(obj {.inject.}: USpringArmComponentPtr;
                         val {.inject.}: float32): void {.
    importcpp: "settargetArmLength(@)", header: "UEGenBindings.h".}
proc `socketOffset`*(obj {.inject.}: USpringArmComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `socketOffset=`*(obj {.inject.}: USpringArmComponentPtr;
                      val {.inject.}: FVector): void {.
    importcpp: "setsocketOffset(@)", header: "UEGenBindings.h".}
proc `targetOffset`*(obj {.inject.}: USpringArmComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetOffset=`*(obj {.inject.}: USpringArmComponentPtr;
                      val {.inject.}: FVector): void {.
    importcpp: "settargetOffset(@)", header: "UEGenBindings.h".}
proc `probeSize`*(obj {.inject.}: USpringArmComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `probeSize=`*(obj {.inject.}: USpringArmComponentPtr;
                   val {.inject.}: float32): void {.
    importcpp: "setprobeSize(@)", header: "UEGenBindings.h".}
proc `probeChannel`*(obj {.inject.}: USpringArmComponentPtr): ECollisionChannel {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `probeChannel=`*(obj {.inject.}: USpringArmComponentPtr;
                      val {.inject.}: ECollisionChannel): void {.
    importcpp: "setprobeChannel(@)", header: "UEGenBindings.h".}
proc `bDoCollisionTest`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDoCollisionTest=`*(obj {.inject.}: USpringArmComponentPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbDoCollisionTest(@)", header: "UEGenBindings.h".}
proc `bUsePawnControlRotation`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUsePawnControlRotation=`*(obj {.inject.}: USpringArmComponentPtr;
                                 val {.inject.}: uint8): void {.
    importcpp: "setbUsePawnControlRotation(@)", header: "UEGenBindings.h".}
proc `bInheritPitch`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bInheritPitch=`*(obj {.inject.}: USpringArmComponentPtr;
                       val {.inject.}: uint8): void {.
    importcpp: "setbInheritPitch(@)", header: "UEGenBindings.h".}
proc `bInheritYaw`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bInheritYaw=`*(obj {.inject.}: USpringArmComponentPtr;
                     val {.inject.}: uint8): void {.
    importcpp: "setbInheritYaw(@)", header: "UEGenBindings.h".}
proc `bInheritRoll`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bInheritRoll=`*(obj {.inject.}: USpringArmComponentPtr;
                      val {.inject.}: uint8): void {.
    importcpp: "setbInheritRoll(@)", header: "UEGenBindings.h".}
proc `bEnableCameraLag`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableCameraLag=`*(obj {.inject.}: USpringArmComponentPtr;
                          val {.inject.}: uint8): void {.
    importcpp: "setbEnableCameraLag(@)", header: "UEGenBindings.h".}
proc `bEnableCameraRotationLag`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bEnableCameraRotationLag=`*(obj {.inject.}: USpringArmComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbEnableCameraRotationLag(@)", header: "UEGenBindings.h".}
proc `bUseCameraLagSubstepping`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bUseCameraLagSubstepping=`*(obj {.inject.}: USpringArmComponentPtr;
                                  val {.inject.}: uint8): void {.
    importcpp: "setbUseCameraLagSubstepping(@)", header: "UEGenBindings.h".}
proc `bDrawDebugLagMarkers`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bDrawDebugLagMarkers=`*(obj {.inject.}: USpringArmComponentPtr;
                              val {.inject.}: uint8): void {.
    importcpp: "setbDrawDebugLagMarkers(@)", header: "UEGenBindings.h".}
proc `cameraLagSpeed`*(obj {.inject.}: USpringArmComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraLagSpeed=`*(obj {.inject.}: USpringArmComponentPtr;
                        val {.inject.}: float32): void {.
    importcpp: "setcameraLagSpeed(@)", header: "UEGenBindings.h".}
proc `cameraRotationLagSpeed`*(obj {.inject.}: USpringArmComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraRotationLagSpeed=`*(obj {.inject.}: USpringArmComponentPtr;
                                val {.inject.}: float32): void {.
    importcpp: "setcameraRotationLagSpeed(@)", header: "UEGenBindings.h".}
proc `cameraLagMaxTimeStep`*(obj {.inject.}: USpringArmComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraLagMaxTimeStep=`*(obj {.inject.}: USpringArmComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setcameraLagMaxTimeStep(@)", header: "UEGenBindings.h".}
proc `cameraLagMaxDistance`*(obj {.inject.}: USpringArmComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `cameraLagMaxDistance=`*(obj {.inject.}: USpringArmComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setcameraLagMaxDistance(@)", header: "UEGenBindings.h".}
proc `bClampToMaxPhysicsDeltaTime`*(obj {.inject.}: USpringArmComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bClampToMaxPhysicsDeltaTime=`*(obj {.inject.}: USpringArmComponentPtr;
                                     val {.inject.}: uint8): void {.
    importcpp: "setbClampToMaxPhysicsDeltaTime(@)", header: "UEGenBindings.h".}
proc isCollisionFixApplied*(obj {.inject.}: USpringArmComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUnfixedCameraPosition*(obj {.inject.}: USpringArmComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTargetRotation*(obj {.inject.}: USpringArmComponentPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `staticMaterials`*(obj {.inject.}: UStaticMeshPtr): var TArray[
    FStaticMaterial] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `staticMaterials=`*(obj {.inject.}: UStaticMeshPtr;
                         val {.inject.}: TArray[FStaticMaterial]): void {.
    importcpp: "setstaticMaterials(@)", header: "UEGenBindings.h".}
proc `lODForCollision`*(obj {.inject.}: UStaticMeshPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `lODForCollision=`*(obj {.inject.}: UStaticMeshPtr; val {.inject.}: int32): void {.
    importcpp: "setlODForCollision(@)", header: "UEGenBindings.h".}
proc setStaticMaterials*(obj {.inject.}: UStaticMeshPtr;
    inStaticMaterials {.inject.}: var TArray[FStaticMaterial]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setNumSourceModels*(obj {.inject.}: UStaticMeshPtr; num {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMinimumLODForPlatforms*(obj {.inject.}: UStaticMeshPtr;
    platformMinimumLODs {.inject.}: var TMap[FName, int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMinimumLODForPlatform*(obj {.inject.}: UStaticMeshPtr;
                               platformName {.inject.}: var FName;
                               inMinLOD {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaterial*(obj {.inject.}: UStaticMeshPtr;
                  materialIndex {.inject.}: int32;
                  newMaterial {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc removeSocket*(obj {.inject.}: UStaticMeshPtr;
                   socket {.inject.}: UStaticMeshSocketPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStaticMeshDescription*(obj {.inject.}: UStaticMeshPtr;
                               lODIndex {.inject.}: int32): UStaticMeshDescriptionPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getStaticMaterials*(obj {.inject.}: UStaticMeshPtr): TArray[FStaticMaterial] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumSections*(obj {.inject.}: UStaticMeshPtr; inLOD {.inject.}: int32): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getNumLODs*(obj {.inject.}: UStaticMeshPtr): int32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getMinimumLODForQualityLevels*(obj {.inject.}: UStaticMeshPtr;
    qualityLevelMinimumLODs {.inject.}: var TMap[FName, int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMinimumLODForQualityLevel*(obj {.inject.}: UStaticMeshPtr;
                                   qualityLevel {.inject.}: var FName): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMinimumLODForPlatforms*(obj {.inject.}: UStaticMeshPtr;
    platformMinimumLODs {.inject.}: var TMap[FName, int32]): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMinimumLODForPlatform*(obj {.inject.}: UStaticMeshPtr;
                               platformName {.inject.}: var FName): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterialIndex*(obj {.inject.}: UStaticMeshPtr;
                       materialSlotName {.inject.}: FName): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getMaterial*(obj {.inject.}: UStaticMeshPtr; materialIndex {.inject.}: int32): UMaterialInterfacePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBounds*(obj {.inject.}: UStaticMeshPtr): FBoxSphereBounds {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBoundingBox*(obj {.inject.}: UStaticMeshPtr): FBox {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc findSocket*(obj {.inject.}: UStaticMeshPtr; inSocketName {.inject.}: FName): UStaticMeshSocketPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createStaticMeshDescription*(outer {.inject.}: UObjectPtr): UStaticMeshDescriptionPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc buildFromStaticMeshDescriptions*(obj {.inject.}: UStaticMeshPtr;
    staticMeshDescriptions {.inject.}: var TArray[UStaticMeshDescriptionPtr];
                                      bBuildSimpleCollision {.inject.}: bool;
                                      bFastBuild {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addSocket*(obj {.inject.}: UStaticMeshPtr;
                socket {.inject.}: UStaticMeshSocketPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addMaterial*(obj {.inject.}: UStaticMeshPtr;
                  material {.inject.}: UMaterialInterfacePtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `socketName`*(obj {.inject.}: UStaticMeshSocketPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `socketName=`*(obj {.inject.}: UStaticMeshSocketPtr; val {.inject.}: FName): void {.
    importcpp: "setsocketName(@)", header: "UEGenBindings.h".}
proc `relativeLocation`*(obj {.inject.}: UStaticMeshSocketPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeLocation=`*(obj {.inject.}: UStaticMeshSocketPtr;
                          val {.inject.}: FVector): void {.
    importcpp: "setrelativeLocation(@)", header: "UEGenBindings.h".}
proc `relativeRotation`*(obj {.inject.}: UStaticMeshSocketPtr): FRotator {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeRotation=`*(obj {.inject.}: UStaticMeshSocketPtr;
                          val {.inject.}: FRotator): void {.
    importcpp: "setrelativeRotation(@)", header: "UEGenBindings.h".}
proc `relativeScale`*(obj {.inject.}: UStaticMeshSocketPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `relativeScale=`*(obj {.inject.}: UStaticMeshSocketPtr;
                       val {.inject.}: FVector): void {.
    importcpp: "setrelativeScale(@)", header: "UEGenBindings.h".}
proc `tag`*(obj {.inject.}: UStaticMeshSocketPtr): FString {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `tag=`*(obj {.inject.}: UStaticMeshSocketPtr; val {.inject.}: FString): void {.
    importcpp: "settag(@)", header: "UEGenBindings.h".}
proc `radius`*(obj {.inject.}: UStereoLayerShapeCylinderPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `radius=`*(obj {.inject.}: UStereoLayerShapeCylinderPtr;
                val {.inject.}: float32): void {.importcpp: "setradius(@)",
    header: "UEGenBindings.h".}
proc `overlayArc`*(obj {.inject.}: UStereoLayerShapeCylinderPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `overlayArc=`*(obj {.inject.}: UStereoLayerShapeCylinderPtr;
                    val {.inject.}: float32): void {.
    importcpp: "setoverlayArc(@)", header: "UEGenBindings.h".}
proc `height`*(obj {.inject.}: UStereoLayerShapeCylinderPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `height=`*(obj {.inject.}: UStereoLayerShapeCylinderPtr;
                val {.inject.}: int32): void {.importcpp: "setheight(@)",
    header: "UEGenBindings.h".}
proc setRadius*(obj {.inject.}: UStereoLayerShapeCylinderPtr;
                inRadius {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setOverlayArc*(obj {.inject.}: UStereoLayerShapeCylinderPtr;
                    inOverlayArc {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setHeight*(obj {.inject.}: UStereoLayerShapeCylinderPtr;
                inHeight {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `leftUVRect`*(obj {.inject.}: UStereoLayerShapeEquirectPtr): FBox2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `leftUVRect=`*(obj {.inject.}: UStereoLayerShapeEquirectPtr;
                    val {.inject.}: FBox2D): void {.
    importcpp: "setleftUVRect(@)", header: "UEGenBindings.h".}
proc `rightUVRect`*(obj {.inject.}: UStereoLayerShapeEquirectPtr): FBox2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rightUVRect=`*(obj {.inject.}: UStereoLayerShapeEquirectPtr;
                     val {.inject.}: FBox2D): void {.
    importcpp: "setrightUVRect(@)", header: "UEGenBindings.h".}
proc `leftScale`*(obj {.inject.}: UStereoLayerShapeEquirectPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `leftScale=`*(obj {.inject.}: UStereoLayerShapeEquirectPtr;
                   val {.inject.}: FVector2D): void {.
    importcpp: "setleftScale(@)", header: "UEGenBindings.h".}
proc `rightScale`*(obj {.inject.}: UStereoLayerShapeEquirectPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rightScale=`*(obj {.inject.}: UStereoLayerShapeEquirectPtr;
                    val {.inject.}: FVector2D): void {.
    importcpp: "setrightScale(@)", header: "UEGenBindings.h".}
proc `leftBias`*(obj {.inject.}: UStereoLayerShapeEquirectPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `leftBias=`*(obj {.inject.}: UStereoLayerShapeEquirectPtr;
                  val {.inject.}: FVector2D): void {.
    importcpp: "setleftBias(@)", header: "UEGenBindings.h".}
proc `rightBias`*(obj {.inject.}: UStereoLayerShapeEquirectPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `rightBias=`*(obj {.inject.}: UStereoLayerShapeEquirectPtr;
                   val {.inject.}: FVector2D): void {.
    importcpp: "setrightBias(@)", header: "UEGenBindings.h".}
proc setEquirectProps*(obj {.inject.}: UStereoLayerShapeEquirectPtr;
                       inScaleBiases {.inject.}: FEquirectProps): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bLiveTexture`*(obj {.inject.}: UStereoLayerComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bLiveTexture=`*(obj {.inject.}: UStereoLayerComponentPtr;
                      val {.inject.}: uint8): void {.
    importcpp: "setbLiveTexture(@)", header: "UEGenBindings.h".}
proc `bSupportsDepth`*(obj {.inject.}: UStereoLayerComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bSupportsDepth=`*(obj {.inject.}: UStereoLayerComponentPtr;
                        val {.inject.}: uint8): void {.
    importcpp: "setbSupportsDepth(@)", header: "UEGenBindings.h".}
proc `bNoAlphaChannel`*(obj {.inject.}: UStereoLayerComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bNoAlphaChannel=`*(obj {.inject.}: UStereoLayerComponentPtr;
                         val {.inject.}: uint8): void {.
    importcpp: "setbNoAlphaChannel(@)", header: "UEGenBindings.h".}
proc `texture`*(obj {.inject.}: UStereoLayerComponentPtr): TObjectPtr[UTexture] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `texture=`*(obj {.inject.}: UStereoLayerComponentPtr;
                 val {.inject.}: TObjectPtr[UTexture]): void {.
    importcpp: "settexture(@)", header: "UEGenBindings.h".}
proc `leftTexture`*(obj {.inject.}: UStereoLayerComponentPtr): TObjectPtr[
    UTexture] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `leftTexture=`*(obj {.inject.}: UStereoLayerComponentPtr;
                     val {.inject.}: TObjectPtr[UTexture]): void {.
    importcpp: "setleftTexture(@)", header: "UEGenBindings.h".}
proc `bQuadPreserveTextureRatio`*(obj {.inject.}: UStereoLayerComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bQuadPreserveTextureRatio=`*(obj {.inject.}: UStereoLayerComponentPtr;
                                   val {.inject.}: uint8): void {.
    importcpp: "setbQuadPreserveTextureRatio(@)", header: "UEGenBindings.h".}
proc `quadSize`*(obj {.inject.}: UStereoLayerComponentPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `quadSize=`*(obj {.inject.}: UStereoLayerComponentPtr;
                  val {.inject.}: FVector2D): void {.
    importcpp: "setquadSize(@)", header: "UEGenBindings.h".}
proc `uVRect`*(obj {.inject.}: UStereoLayerComponentPtr): FBox2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `uVRect=`*(obj {.inject.}: UStereoLayerComponentPtr; val {.inject.}: FBox2D): void {.
    importcpp: "setuVRect(@)", header: "UEGenBindings.h".}
proc `stereoLayerType`*(obj {.inject.}: UStereoLayerComponentPtr): EStereoLayerType {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `stereoLayerType=`*(obj {.inject.}: UStereoLayerComponentPtr;
                         val {.inject.}: EStereoLayerType): void {.
    importcpp: "setstereoLayerType(@)", header: "UEGenBindings.h".}
proc `shape`*(obj {.inject.}: UStereoLayerComponentPtr): TObjectPtr[
    UStereoLayerShape] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shape=`*(obj {.inject.}: UStereoLayerComponentPtr;
               val {.inject.}: TObjectPtr[UStereoLayerShape]): void {.
    importcpp: "setshape(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: UStereoLayerComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: UStereoLayerComponentPtr; val {.inject.}: int32): void {.
    importcpp: "setpriority(@)", header: "UEGenBindings.h".}
proc setUVRect*(obj {.inject.}: UStereoLayerComponentPtr;
                inUVRect {.inject.}: FBox2D): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setTexture*(obj {.inject.}: UStereoLayerComponentPtr;
                 inTexture {.inject.}: UTexturePtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setQuadSize*(obj {.inject.}: UStereoLayerComponentPtr;
                  inQuadSize {.inject.}: FVector2D): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPriority*(obj {.inject.}: UStereoLayerComponentPtr;
                  inPriority {.inject.}: int32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLeftTexture*(obj {.inject.}: UStereoLayerComponentPtr;
                     inTexture {.inject.}: UTexturePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setEquirectProps*(obj {.inject.}: UStereoLayerComponentPtr;
                       inScaleBiases {.inject.}: FEquirectProps): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc markTextureForUpdate*(obj {.inject.}: UStereoLayerComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getUVRect*(obj {.inject.}: UStereoLayerComponentPtr): FBox2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTexture*(obj {.inject.}: UStereoLayerComponentPtr): UTexturePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getQuadSize*(obj {.inject.}: UStereoLayerComponentPtr): FVector2D {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPriority*(obj {.inject.}: UStereoLayerComponentPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLeftTexture*(obj {.inject.}: UStereoLayerComponentPtr): UTexturePtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc showSplashScreen*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSplashScreen*(texture {.inject.}: UTexturePtr;
                      scale {.inject.}: FVector2D; offset {.inject.}: FVector;
                      bShowLoadingMovie {.inject.}: bool;
                      bShowOnSet {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc hideSplashScreen*(): void {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enableAutoLoadingSplashScreen*(inAutoShowEnabled {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldSubsystem*(contextObject {.inject.}: UObjectPtr;
                        class {.inject.}: TSubclassOf[UWorldSubsystem]): UWorldSubsystemPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocalPlayerSubSystemFromPlayerController*(
    playerController {.inject.}: APlayerControllerPtr;
    class {.inject.}: TSubclassOf[ULocalPlayerSubsystem]): ULocalPlayerSubsystemPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getLocalPlayerSubsystem*(contextObject {.inject.}: UObjectPtr;
    class {.inject.}: TSubclassOf[ULocalPlayerSubsystem]): ULocalPlayerSubsystemPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getGameInstanceSubsystem*(contextObject {.inject.}: UObjectPtr;
    class {.inject.}: TSubclassOf[UGameInstanceSubsystem]): UGameInstanceSubsystemPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getEngineSubsystem*(class {.inject.}: TSubclassOf[UEngineSubsystem]): UEngineSubsystemPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getAudioEngineSubsystem*(contextObject {.inject.}: UObjectPtr;
    class {.inject.}: TSubclassOf[UAudioEngineSubsystem]): UAudioEngineSubsystemPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spriteComponent`*(obj {.inject.}: ATargetPointPtr): TObjectPtr[
    UBillboardComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spriteComponent=`*(obj {.inject.}: ATargetPointPtr;
                         val {.inject.}: TObjectPtr[UBillboardComponent]): void {.
    importcpp: "setspriteComponent(@)", header: "UEGenBindings.h".}
proc `arrowComponent`*(obj {.inject.}: ATargetPointPtr): TObjectPtr[
    UArrowComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `arrowComponent=`*(obj {.inject.}: ATargetPointPtr;
                        val {.inject.}: TObjectPtr[UArrowComponent]): void {.
    importcpp: "setarrowComponent(@)", header: "UEGenBindings.h".}
proc `textRender`*(obj {.inject.}: ATextRenderActorPtr): TObjectPtr[
    UTextRenderComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textRender=`*(obj {.inject.}: ATextRenderActorPtr;
                    val {.inject.}: TObjectPtr[UTextRenderComponent]): void {.
    importcpp: "settextRender(@)", header: "UEGenBindings.h".}
proc `text`*(obj {.inject.}: UTextRenderComponentPtr): FText {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `text=`*(obj {.inject.}: UTextRenderComponentPtr; val {.inject.}: FText): void {.
    importcpp: "settext(@)", header: "UEGenBindings.h".}
proc `textMaterial`*(obj {.inject.}: UTextRenderComponentPtr): TObjectPtr[
    UMaterialInterface] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textMaterial=`*(obj {.inject.}: UTextRenderComponentPtr;
                      val {.inject.}: TObjectPtr[UMaterialInterface]): void {.
    importcpp: "settextMaterial(@)", header: "UEGenBindings.h".}
proc `font`*(obj {.inject.}: UTextRenderComponentPtr): TObjectPtr[UFont] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `font=`*(obj {.inject.}: UTextRenderComponentPtr;
              val {.inject.}: TObjectPtr[UFont]): void {.
    importcpp: "setfont(@)", header: "UEGenBindings.h".}
proc `horizontalAlignment`*(obj {.inject.}: UTextRenderComponentPtr): EHorizTextAligment {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `horizontalAlignment=`*(obj {.inject.}: UTextRenderComponentPtr;
                             val {.inject.}: EHorizTextAligment): void {.
    importcpp: "sethorizontalAlignment(@)", header: "UEGenBindings.h".}
proc `verticalAlignment`*(obj {.inject.}: UTextRenderComponentPtr): EVerticalTextAligment {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `verticalAlignment=`*(obj {.inject.}: UTextRenderComponentPtr;
                           val {.inject.}: EVerticalTextAligment): void {.
    importcpp: "setverticalAlignment(@)", header: "UEGenBindings.h".}
proc `textRenderColor`*(obj {.inject.}: UTextRenderComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `textRenderColor=`*(obj {.inject.}: UTextRenderComponentPtr;
                         val {.inject.}: FColor): void {.
    importcpp: "settextRenderColor(@)", header: "UEGenBindings.h".}
proc `xScale`*(obj {.inject.}: UTextRenderComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `xScale=`*(obj {.inject.}: UTextRenderComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setxScale(@)", header: "UEGenBindings.h".}
proc `yScale`*(obj {.inject.}: UTextRenderComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `yScale=`*(obj {.inject.}: UTextRenderComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setyScale(@)", header: "UEGenBindings.h".}
proc `worldSize`*(obj {.inject.}: UTextRenderComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `worldSize=`*(obj {.inject.}: UTextRenderComponentPtr;
                   val {.inject.}: float32): void {.
    importcpp: "setworldSize(@)", header: "UEGenBindings.h".}
proc `horizSpacingAdjust`*(obj {.inject.}: UTextRenderComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `horizSpacingAdjust=`*(obj {.inject.}: UTextRenderComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "sethorizSpacingAdjust(@)", header: "UEGenBindings.h".}
proc `vertSpacingAdjust`*(obj {.inject.}: UTextRenderComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `vertSpacingAdjust=`*(obj {.inject.}: UTextRenderComponentPtr;
                           val {.inject.}: float32): void {.
    importcpp: "setvertSpacingAdjust(@)", header: "UEGenBindings.h".}
proc `bAlwaysRenderAsText`*(obj {.inject.}: UTextRenderComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bAlwaysRenderAsText=`*(obj {.inject.}: UTextRenderComponentPtr;
                             val {.inject.}: uint8): void {.
    importcpp: "setbAlwaysRenderAsText(@)", header: "UEGenBindings.h".}
proc setYScale*(obj {.inject.}: UTextRenderComponentPtr;
                value {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setXScale*(obj {.inject.}: UTextRenderComponentPtr;
                value {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setWorldSize*(obj {.inject.}: UTextRenderComponentPtr;
                   value {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setVertSpacingAdjust*(obj {.inject.}: UTextRenderComponentPtr;
                           value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setVerticalAlignment*(obj {.inject.}: UTextRenderComponentPtr;
                           value {.inject.}: EVerticalTextAligment): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTextRenderColor*(obj {.inject.}: UTextRenderComponentPtr;
                         value {.inject.}: FColor): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setTextMaterial*(obj {.inject.}: UTextRenderComponentPtr;
                      material {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setHorizSpacingAdjust*(obj {.inject.}: UTextRenderComponentPtr;
                            value {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setHorizontalAlignment*(obj {.inject.}: UTextRenderComponentPtr;
                             value {.inject.}: EHorizTextAligment): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFont*(obj {.inject.}: UTextRenderComponentPtr; value {.inject.}: UFontPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setText*(obj {.inject.}: UTextRenderComponentPtr;
              value {.inject.}: var FText): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc getTextWorldSize*(obj {.inject.}: UTextRenderComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTextLocalSize*(obj {.inject.}: UTextRenderComponentPtr): FVector {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeX`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeX=`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr;
               val {.inject.}: int32): void {.importcpp: "setsizeX(@)",
    header: "UEGenBindings.h".}
proc `sizeY`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeY=`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr;
               val {.inject.}: int32): void {.importcpp: "setsizeY(@)",
    header: "UEGenBindings.h".}
proc `slices`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `slices=`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr;
                val {.inject.}: int32): void {.importcpp: "setslices(@)",
    header: "UEGenBindings.h".}
proc `bHDR`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bHDR=`*(obj {.inject.}: UTextureRenderTarget2DArrayPtr;
              val {.inject.}: uint8): void {.importcpp: "setbHDR(@)",
    header: "UEGenBindings.h".}
proc `sizeX`*(obj {.inject.}: UTextureRenderTargetCubePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeX=`*(obj {.inject.}: UTextureRenderTargetCubePtr; val {.inject.}: int32): void {.
    importcpp: "setsizeX(@)", header: "UEGenBindings.h".}
proc `bHDR`*(obj {.inject.}: UTextureRenderTargetCubePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bHDR=`*(obj {.inject.}: UTextureRenderTargetCubePtr; val {.inject.}: uint8): void {.
    importcpp: "setbHDR(@)", header: "UEGenBindings.h".}
proc `sizeX`*(obj {.inject.}: UTextureRenderTargetVolumePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeX=`*(obj {.inject.}: UTextureRenderTargetVolumePtr;
               val {.inject.}: int32): void {.importcpp: "setsizeX(@)",
    header: "UEGenBindings.h".}
proc `sizeY`*(obj {.inject.}: UTextureRenderTargetVolumePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeY=`*(obj {.inject.}: UTextureRenderTargetVolumePtr;
               val {.inject.}: int32): void {.importcpp: "setsizeY(@)",
    header: "UEGenBindings.h".}
proc `sizeZ`*(obj {.inject.}: UTextureRenderTargetVolumePtr): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `sizeZ=`*(obj {.inject.}: UTextureRenderTargetVolumePtr;
               val {.inject.}: int32): void {.importcpp: "setsizeZ(@)",
    header: "UEGenBindings.h".}
proc `bHDR`*(obj {.inject.}: UTextureRenderTargetVolumePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bHDR=`*(obj {.inject.}: UTextureRenderTargetVolumePtr;
              val {.inject.}: uint8): void {.importcpp: "setbHDR(@)",
    header: "UEGenBindings.h".}
proc stop*(obj {.inject.}: UTimelineComponentPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setVectorCurve*(obj {.inject.}: UTimelineComponentPtr;
                     newVectorCurve {.inject.}: UCurveVectorPtr;
                     vectorTrackName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTimelineLengthMode*(obj {.inject.}: UTimelineComponentPtr;
                            newLengthMode {.inject.}: ETimelineLengthMode): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTimelineLength*(obj {.inject.}: UTimelineComponentPtr;
                        newLength {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlayRate*(obj {.inject.}: UTimelineComponentPtr;
                  newRate {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setPlaybackPosition*(obj {.inject.}: UTimelineComponentPtr;
                          newPosition {.inject.}: float32;
                          bFireEvents {.inject.}: bool;
                          bFireUpdate {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setNewTime*(obj {.inject.}: UTimelineComponentPtr;
                 newTime {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLooping*(obj {.inject.}: UTimelineComponentPtr;
                 bNewLooping {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLinearColorCurve*(obj {.inject.}: UTimelineComponentPtr;
                          newLinearColorCurve {.inject.}: UCurveLinearColorPtr;
                          linearColorTrackName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setIgnoreTimeDilation*(obj {.inject.}: UTimelineComponentPtr;
                            bNewIgnoreTimeDilation {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setFloatCurve*(obj {.inject.}: UTimelineComponentPtr;
                    newFloatCurve {.inject.}: UCurveFloatPtr;
                    floatTrackName {.inject.}: FName): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc reverseFromEnd*(obj {.inject.}: UTimelineComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc reverse*(obj {.inject.}: UTimelineComponentPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc playFromStart*(obj {.inject.}: UTimelineComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc play*(obj {.inject.}: UTimelineComponentPtr): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc isReversing*(obj {.inject.}: UTimelineComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isPlaying*(obj {.inject.}: UTimelineComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isLooping*(obj {.inject.}: UTimelineComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getTimelineLength*(obj {.inject.}: UTimelineComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getScaledTimelineLength*(obj {.inject.}: UTimelineComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlayRate*(obj {.inject.}: UTimelineComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPlaybackPosition*(obj {.inject.}: UTimelineComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getIgnoreTimeDilation*(obj {.inject.}: UTimelineComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReplicated`*(obj {.inject.}: UTimelineTemplatePtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bReplicated=`*(obj {.inject.}: UTimelineTemplatePtr; val {.inject.}: uint8): void {.
    importcpp: "setbReplicated(@)", header: "UEGenBindings.h".}
proc `collisionComponent`*(obj {.inject.}: ATriggerBasePtr): TObjectPtr[
    UShapeComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `collisionComponent=`*(obj {.inject.}: ATriggerBasePtr;
                            val {.inject.}: TObjectPtr[UShapeComponent]): void {.
    importcpp: "setcollisionComponent(@)", header: "UEGenBindings.h".}
proc `spriteComponent`*(obj {.inject.}: ATriggerBasePtr): TObjectPtr[
    UBillboardComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `spriteComponent=`*(obj {.inject.}: ATriggerBasePtr;
                         val {.inject.}: TObjectPtr[UBillboardComponent]): void {.
    importcpp: "setspriteComponent(@)", header: "UEGenBindings.h".}
proc duplicateSelectedElements*(obj {.inject.}: UTypedElementCommonActionsPtr;
    selectionSet {.inject.}: UTypedElementSelectionSetPtr;
                                locationOffset {.inject.}: var FVector): TArray[FScriptTypedElementHandle] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc duplicateNormalizedElements*(obj {.inject.}: UTypedElementCommonActionsPtr;
    elementList {.inject.}: FScriptTypedElementListProxy;
                                  locationOffset {.inject.}: var FVector): TArray[FScriptTypedElementHandle] {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deleteSelectedElements*(obj {.inject.}: UTypedElementCommonActionsPtr;
    selectionSet {.inject.}: UTypedElementSelectionSetPtr;
    deletionOptions {.inject.}: var FTypedElementDeletionOptions): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deleteNormalizedElements*(obj {.inject.}: UTypedElementCommonActionsPtr;
    elementList {.inject.}: FScriptTypedElementListProxy;
    inSelectionSet {.inject.}: UTypedElementSelectionSetPtr;
    deletionOptions {.inject.}: var FTypedElementDeletionOptions): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setWorldTransform*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle;
                        inTransform {.inject.}: var FTransform): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setRelativeTransform*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle;
                           inTransform {.inject.}: var FTransform): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPivotOffset*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                     inElementHandle {.inject.}: var FScriptTypedElementHandle;
                     inPivotOffset {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notifyMovementStarted*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notifyMovementOngoing*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc notifyMovementEnded*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isTemplateElement*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getWorldTransform*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle;
                        outTransform {.inject.}: var FTransform): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getRelativeTransform*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle;
                           outTransform {.inject.}: var FTransform): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getPivotOffset*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                     inElementHandle {.inject.}: var FScriptTypedElementHandle;
                     outPivotOffset {.inject.}: var FVector): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOwnerWorld*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                    inElementHandle {.inject.}: var FScriptTypedElementHandle): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getOwnerLevel*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                    inElementHandle {.inject.}: var FScriptTypedElementHandle): ULevelPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getBounds*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                inElementHandle {.inject.}: var FScriptTypedElementHandle;
                outBounds {.inject.}: var FBoxSphereBounds): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc duplicateElement*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle;
                       inLocationOffset {.inject.}: var FVector): FScriptTypedElementHandle {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc deleteElement*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                    inElementHandle {.inject.}: var FScriptTypedElementHandle;
                    inSelectionSet {.inject.}: UTypedElementSelectionSetPtr;
    inDeletionOptions {.inject.}: var FTypedElementDeletionOptions): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canMoveElement*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                     inElementHandle {.inject.}: var FScriptTypedElementHandle;
                     inWorldType {.inject.}: ETypedElementWorldType): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canEditElement*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                     inElementHandle {.inject.}: var FScriptTypedElementHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canDuplicateElement*(obj {.inject.}: UTypedElementWorldInterfacePtr;
    inElementHandle {.inject.}: var FScriptTypedElementHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc canDeleteElement*(obj {.inject.}: UTypedElementWorldInterfacePtr;
                       inElementHandle {.inject.}: var FScriptTypedElementHandle): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `vectorField`*(obj {.inject.}: UVectorFieldComponentPtr): TObjectPtr[
    UVectorField] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `vectorField=`*(obj {.inject.}: UVectorFieldComponentPtr;
                     val {.inject.}: TObjectPtr[UVectorField]): void {.
    importcpp: "setvectorField(@)", header: "UEGenBindings.h".}
proc `intensity`*(obj {.inject.}: UVectorFieldComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `intensity=`*(obj {.inject.}: UVectorFieldComponentPtr;
                   val {.inject.}: float32): void {.
    importcpp: "setintensity(@)", header: "UEGenBindings.h".}
proc `tightness`*(obj {.inject.}: UVectorFieldComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `tightness=`*(obj {.inject.}: UVectorFieldComponentPtr;
                   val {.inject.}: float32): void {.
    importcpp: "settightness(@)", header: "UEGenBindings.h".}
proc setIntensity*(obj {.inject.}: UVectorFieldComponentPtr;
                   newIntensity {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `vectorFieldComponent`*(obj {.inject.}: AVectorFieldVolumePtr): TObjectPtr[
    UVectorFieldComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `vectorFieldComponent=`*(obj {.inject.}: AVectorFieldVolumePtr;
                              val {.inject.}: TObjectPtr[UVectorFieldComponent]): void {.
    importcpp: "setvectorFieldComponent(@)", header: "UEGenBindings.h".}
proc removeDisplayDelegate*(obj {.inject.}: UViewportStatsSubsystemPtr;
                            indexToRemove {.inject.}: int32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addTimedDisplay*(obj {.inject.}: UViewportStatsSubsystemPtr;
                      text {.inject.}: FText; color {.inject.}: FLinearColor;
                      duration {.inject.}: float32;
                      displayOffset {.inject.}: var FVector2D): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc addDisplayDelegate*(obj {.inject.}: UViewportStatsSubsystemPtr;
                         delegate {.inject.}: var FViewportDisplayCallback): int32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc redirectVislog*(sourceOwner {.inject.}: UObjectPtr;
                     destinationOwner {.inject.}: UObjectPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc logText*(worldContextObject {.inject.}: UObjectPtr;
              text {.inject.}: FString; logCategory {.inject.}: FName;
              bAddToMessageLog {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc logSegment*(worldContextObject {.inject.}: UObjectPtr;
                 segmentStart {.inject.}: FVector;
                 segmentEnd {.inject.}: FVector; text {.inject.}: FString;
                 objectColor {.inject.}: FLinearColor;
                 thickness {.inject.}: float32; categoryName {.inject.}: FName;
                 bAddToMessageLog {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc logLocation*(worldContextObject {.inject.}: UObjectPtr;
                  location {.inject.}: FVector; text {.inject.}: FString;
                  objectColor {.inject.}: FLinearColor;
                  radius {.inject.}: float32; logCategory {.inject.}: FName;
                  bAddToMessageLog {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc logBox*(worldContextObject {.inject.}: UObjectPtr;
             boxShape {.inject.}: FBox; text {.inject.}: FString;
             objectColor {.inject.}: FLinearColor; logCategory {.inject.}: FName;
             bAddToMessageLog {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc enableRecording*(bEnabled {.inject.}: bool): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `settings`*(obj {.inject.}: UVOIPTalkerPtr): FVoiceSettings {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `settings=`*(obj {.inject.}: UVOIPTalkerPtr; val {.inject.}: FVoiceSettings): void {.
    importcpp: "setsettings(@)", header: "UEGenBindings.h".}
proc registerWithPlayerState*(obj {.inject.}: UVOIPTalkerPtr;
                              owningState {.inject.}: APlayerStatePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc getVoiceLevel*(obj {.inject.}: UVOIPTalkerPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc createTalkerForPlayer*(owningState {.inject.}: APlayerStatePtr): UVOIPTalkerPtr {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMicThreshold*(inThreshold {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `layerBottomAltitude`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `layerBottomAltitude=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                             val {.inject.}: float32): void {.
    importcpp: "setlayerBottomAltitude(@)", header: "UEGenBindings.h".}
proc `layerHeight`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `layerHeight=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                     val {.inject.}: float32): void {.
    importcpp: "setlayerHeight(@)", header: "UEGenBindings.h".}
proc `tracingStartMaxDistance`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `tracingStartMaxDistance=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                 val {.inject.}: float32): void {.
    importcpp: "settracingStartMaxDistance(@)", header: "UEGenBindings.h".}
proc `tracingMaxDistance`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `tracingMaxDistance=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                            val {.inject.}: float32): void {.
    importcpp: "settracingMaxDistance(@)", header: "UEGenBindings.h".}
proc `planetRadius`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `planetRadius=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                      val {.inject.}: float32): void {.
    importcpp: "setplanetRadius(@)", header: "UEGenBindings.h".}
proc `groundAlbedo`*(obj {.inject.}: UVolumetricCloudComponentPtr): FColor {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `groundAlbedo=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                      val {.inject.}: FColor): void {.
    importcpp: "setgroundAlbedo(@)", header: "UEGenBindings.h".}
proc `material`*(obj {.inject.}: UVolumetricCloudComponentPtr): TObjectPtr[
    UMaterialInterface] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `material=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                  val {.inject.}: TObjectPtr[UMaterialInterface]): void {.
    importcpp: "setmaterial(@)", header: "UEGenBindings.h".}
proc `bUsePerSampleAtmosphericLightTransmittance`*(
    obj {.inject.}: UVolumetricCloudComponentPtr): uint8 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `bUsePerSampleAtmosphericLightTransmittance=`*(
    obj {.inject.}: UVolumetricCloudComponentPtr; val {.inject.}: uint8): void {.
    importcpp: "setbUsePerSampleAtmosphericLightTransmittance(@)",
    header: "UEGenBindings.h".}
proc `skyLightCloudBottomOcclusion`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `skyLightCloudBottomOcclusion=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                      val {.inject.}: float32): void {.
    importcpp: "setskyLightCloudBottomOcclusion(@)", header: "UEGenBindings.h".}
proc `viewSampleCountScale`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `viewSampleCountScale=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                              val {.inject.}: float32): void {.
    importcpp: "setviewSampleCountScale(@)", header: "UEGenBindings.h".}
proc `reflectionViewSampleCountScale`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `reflectionViewSampleCountScale=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                        val {.inject.}: float32): void {.
    importcpp: "setreflectionViewSampleCountScale(@)", header: "UEGenBindings.h".}
proc `shadowViewSampleCountScale`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowViewSampleCountScale=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                    val {.inject.}: float32): void {.
    importcpp: "setshadowViewSampleCountScale(@)", header: "UEGenBindings.h".}
proc `shadowReflectionViewSampleCountScale`*(
    obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `shadowReflectionViewSampleCountScale=`*(
    obj {.inject.}: UVolumetricCloudComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setshadowReflectionViewSampleCountScale(@)",
    header: "UEGenBindings.h".}
proc `shadowTracingDistance`*(obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shadowTracingDistance=`*(obj {.inject.}: UVolumetricCloudComponentPtr;
                               val {.inject.}: float32): void {.
    importcpp: "setshadowTracingDistance(@)", header: "UEGenBindings.h".}
proc `stopTracingTransmittanceThreshold`*(
    obj {.inject.}: UVolumetricCloudComponentPtr): float32 {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc `stopTracingTransmittanceThreshold=`*(
    obj {.inject.}: UVolumetricCloudComponentPtr; val {.inject.}: float32): void {.
    importcpp: "setstopTracingTransmittanceThreshold(@)",
    header: "UEGenBindings.h".}
proc setViewSampleCountScale*(obj {.inject.}: UVolumetricCloudComponentPtr;
                              newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTracingStartMaxDistance*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                 newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setTracingMaxDistance*(obj {.inject.}: UVolumetricCloudComponentPtr;
                            newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStopTracingTransmittanceThreshold*(
    obj {.inject.}: UVolumetricCloudComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setSkyLightCloudBottomOcclusion*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                      newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowViewSampleCountScale*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                    newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowTracingDistance*(obj {.inject.}: UVolumetricCloudComponentPtr;
                               newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowReflectionViewSampleCountScale*(
    obj {.inject.}: UVolumetricCloudComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setShadowReflectionSampleCountScale*(
    obj {.inject.}: UVolumetricCloudComponentPtr; newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReflectionViewSampleCountScale*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                        newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setReflectionSampleCountScale*(obj {.inject.}: UVolumetricCloudComponentPtr;
                                    newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setPlanetRadius*(obj {.inject.}: UVolumetricCloudComponentPtr;
                      newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setMaterial*(obj {.inject.}: UVolumetricCloudComponentPtr;
                  newValue {.inject.}: UMaterialInterfacePtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setLayerHeight*(obj {.inject.}: UVolumetricCloudComponentPtr;
                     newValue {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setLayerBottomAltitude*(obj {.inject.}: UVolumetricCloudComponentPtr;
                             newValue {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setGroundAlbedo*(obj {.inject.}: UVolumetricCloudComponentPtr;
                      newValue {.inject.}: FColor): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setbUsePerSampleAtmosphericLightTransmittance*(
    obj {.inject.}: UVolumetricCloudComponentPtr; newValue {.inject.}: bool): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricCloudComponent`*(obj {.inject.}: AVolumetricCloudPtr): TObjectPtr[
    UVolumetricCloudComponent] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `volumetricCloudComponent=`*(obj {.inject.}: AVolumetricCloudPtr;
    val {.inject.}: TObjectPtr[UVolumetricCloudComponent]): void {.
    importcpp: "setvolumetricCloudComponent(@)", header: "UEGenBindings.h".}
proc `strength`*(obj {.inject.}: UWindDirectionalSourceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `strength=`*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                  val {.inject.}: float32): void {.importcpp: "setstrength(@)",
    header: "UEGenBindings.h".}
proc `speed`*(obj {.inject.}: UWindDirectionalSourceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `speed=`*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
               val {.inject.}: float32): void {.importcpp: "setspeed(@)",
    header: "UEGenBindings.h".}
proc `minGustAmount`*(obj {.inject.}: UWindDirectionalSourceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `minGustAmount=`*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setminGustAmount(@)", header: "UEGenBindings.h".}
proc `maxGustAmount`*(obj {.inject.}: UWindDirectionalSourceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `maxGustAmount=`*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                       val {.inject.}: float32): void {.
    importcpp: "setmaxGustAmount(@)", header: "UEGenBindings.h".}
proc `radius`*(obj {.inject.}: UWindDirectionalSourceComponentPtr): float32 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `radius=`*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                val {.inject.}: float32): void {.importcpp: "setradius(@)",
    header: "UEGenBindings.h".}
proc `bPointWind`*(obj {.inject.}: UWindDirectionalSourceComponentPtr): uint8 {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `bPointWind=`*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                    val {.inject.}: uint8): void {.
    importcpp: "setbPointWind(@)", header: "UEGenBindings.h".}
proc setWindType*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                  inNewType {.inject.}: EWindSourceType): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setStrength*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                  inNewStrength {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setSpeed*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
               inNewSpeed {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setRadius*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                inNewRadius {.inject.}: float32): void {.importcpp: "$1(@)",
    header: "UEGenBindings.h".}
proc setMinimumGustAmount*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                           inNewMinGust {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc setMaximumGustAmount*(obj {.inject.}: UWindDirectionalSourceComponentPtr;
                           inNewMaxGust {.inject.}: float32): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetGrid`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): FName {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetGrid=`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr;
                    val {.inject.}: FName): void {.
    importcpp: "settargetGrid(@)", header: "UEGenBindings.h".}
proc `targetHLODLayer`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): TObjectPtr[
    UHLODLayer] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `targetHLODLayer=`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr;
                         val {.inject.}: TObjectPtr[UHLODLayer]): void {.
    importcpp: "settargetHLODLayer(@)", header: "UEGenBindings.h".}
proc `shapes`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): var TArray[
    FStreamingSourceShape] {.importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `shapes=`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr;
                val {.inject.}: TArray[FStreamingSourceShape]): void {.
    importcpp: "setshapes(@)", header: "UEGenBindings.h".}
proc `priority`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): EStreamingSourcePriority {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc `priority=`*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr;
                  val {.inject.}: EStreamingSourcePriority): void {.
    importcpp: "setpriority(@)", header: "UEGenBindings.h".}
proc isStreamingSourceEnabled*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isStreamingCompleted*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc enableStreamingSource*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc disableStreamingSource*(obj {.inject.}: UWorldPartitionStreamingSourceComponentPtr): void {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}
proc isStreamingCompleted*(obj {.inject.}: UWorldPartitionSubsystemPtr;
    queryState {.inject.}: EWorldPartitionRuntimeCellState;
    querySources {.inject.}: var TArray[FWorldPartitionStreamingQuerySource];
                           bExactState {.inject.}: bool): bool {.
    importcpp: "$1(@)", header: "UEGenBindings.h".}