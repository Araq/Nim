2016-XX-XX Version 0.14.0 released
==================================

Changes affecting backwards compatibility
-----------------------------------------

- ``--out`` and ``--nimcache`` command line arguments are now relative to
  current directory. Previously they were relative to project directory.
- The json module now stores the name/value pairs in objects internally as a
  hash table of type ``fields*: Table[string, JsonNode]`` instead of a
  sequence. This means that order is no longer preserved. When using the
  ``table.mpairs`` iterator only the returned values can be modified, no
  longer the keys.
- The deprecated Nim shebang notation ``#!`` was removed from the language. Use ``#?`` instead.
- The ``using`` statement now means something completely different. You can use the
  new experimental ``this`` pragma to achieve a similar effect to what the old ``using`` statement tried to achieve.
- Typeless parameters have been removed from the language since it would
  clash with ``using``.
- Procedures in ``mersenne.nim`` (Mersenne Twister implementation) no longer
  accept and produce ``int`` values which have platform-dependent size -
  they use ``uint32`` instead.
- The ``strutils.unindent`` procedure has been rewritten. Its parameters now
  match the parameters of ``strutils.indent``. See issue [#4037](https://github.com/nim-lang/Nim/issues/4037)
  for more details.
- The ``matchers`` module has been deprecated. See issue [#2446](https://github.com/nim-lang/Nim/issues/2446)
  for more details.
- The ``json.[]`` no longer returns ``nil`` when a key is not found. Instead it
  raises a ``KeyError`` exception. You can compile with the ``-d:nimJsonGet``
  flag to get a list of usages of ``[]``, as well as to restore the operator's
  previous behaviour.
- When using ``useMalloc``, an additional header containing the size of the
  allocation will be allocated, to support zeroing memory on realloc as expected
  by the language. With this change, ``alloc`` and ``dealloc`` are no longer
  aliases for ``malloc`` and ``free`` - use ``c_malloc`` and ``c_free`` if
  you need that.
- The ``json.%`` operator is now overloaded for ``object``, ``ref object`` and
  ``openarray[T]``.
- The procs related to ``random`` number generation in ``math.nim`` have
  been moved to its own ``random`` module and been reimplemented in pure
  Nim.
- The path handling changed. The project directory is not added to the
  search path automatically anymore. Add this line to your project's
  config to get back the old behaviour: ``--path:"$projectdir"``.
- The ``round`` function in ``math.nim`` now returns a float and has been
  corrected such that the C implementation always rounds up from .5 rather
  than changing the operation for even and odd numbers.
- The ``round`` function now accepts a ``places`` argument to round to a
  given number of places (e.g. round 4.35 to 4.4 if ``places`` is 1).
- In ``strutils.nim``, ``formatSize`` now returns a number representing the
  size in conventional decimal format (e.g. 2.234GB meaning 2.234 GB rather
  than meaning 2.285 GB as in the previous implementation).  By default it
  also uses IEC prefixes (KiB, MiB) etc and optionally uses colloquial names
  (kB, MB etc) and the (SI-preferred) space.
- The ``==`` operator for ``cstring`` now implements a value comparision
  for the C backend (using ``strcmp``), not reference comparisons anymore.
  Convert the cstrings to pointers if you really want reference equality
  for speed.
- HTTP headers are now stored in a ``HttpHeaders`` object instead of a
  ``StringTableRef``. This object allows multiple values to be associated with
  a single key. A new ``httpcore`` module implements it and it is used by
  both ``asynchttpserver`` and ``httpclient``.


Library Additions
-----------------

- The rlocks module has been added providing reentrant lock synchronization
  primitive.
- A generic "sink operator" written as ``&=`` has been added to the ``system`` and the ``net`` modules.
- Added ``strscans`` module that implements a ``scanf`` for easy input extraction.
- Added a version of ``parseutils.parseUntil`` that can deal with a string ``until`` token. The other
  versions are for ``char`` and ``set[char]``.
- Added ``splitDecimal`` to ``math.nim`` to split a floating point value
  into an integer part and a floating part (in the range -1<x<1).
- Added ``trimZeros`` to ```strutils.nim`` to trim trailing zeros in a
  floating point number.
- Added ``formatEng`` to ``strutils.nim`` to format numbers using engineering
  notation.


Compiler Additions
------------------

- Added a new ``--noCppExceptions`` switch that allows to use default exception
  handling (no ``throw`` or ``try``/``catch`` generated) when compiling to C++
  code.

Language Additions
------------------

- Nim now supports a ``.this`` pragma for more notational convenience.
- Nim now supports a different ``using`` statement for more convenience.
- ``include`` statements are not restricted to top level statements anymore.

..
  - Nim now supports ``partial`` object declarations to mitigate the problems
    that arise when types are mutually dependent and yet should be kept in
    different modules.

Bug fixes
---------


  - Fixed "Calling generic templates with explicit generic arguments crashes compiler"
    (`#3496 <https://github.com/nim-lang/Nim/issues/3496>`_)
  - Fixed "JS backend - strange utf-8 handling"
    (`#3714 <https://github.com/nim-lang/Nim/issues/3714>`_)
  - Fixed "JS backend - strange utf-8 handling"
    (`#3714 <https://github.com/nim-lang/Nim/issues/3714>`_)
  - Fixed "execvpe is glibc specific"
    (`#3759 <https://github.com/nim-lang/Nim/issues/3759>`_)
  - Fixed "GC stack overflow with in data structures with circular references."
    (`#1895 <https://github.com/nim-lang/Nim/issues/1895>`_)
  - Fixed "Internal compiler error in genTraverseProc"
    (`#3794 <https://github.com/nim-lang/Nim/issues/3794>`_)
  - Fixed "unsafeAddr fails in generic context"
    (`#3736 <https://github.com/nim-lang/Nim/issues/3736>`_)
  - Fixed "Generic converters produce internal errors"
    (`#3799 <https://github.com/nim-lang/Nim/issues/3799>`_)
  - Fixed "Cannot have two anonymous iterators in one proc"
    (`#3788 <https://github.com/nim-lang/Nim/issues/3788>`_)
  - Fixed "pure/net.nim fails to compile with --taintMode:on on HEAD"
    (`#3789 <https://github.com/nim-lang/Nim/issues/3789>`_)
  - Fixed "Using break inside iterator may produce memory/resource leak"
    (`#3802 <https://github.com/nim-lang/Nim/issues/3802>`_)

  - Fixed "--out and --nimcache wrong paths"
    (`#3871 <https://github.com/nim-lang/Nim/issues/3871>`_)
  - Fixed "Release 0.13.0: documentation build failure"
    (`#3823 <https://github.com/nim-lang/Nim/issues/3823>`_)
  - Fixed "https post request"
    (`#3895 <https://github.com/nim-lang/Nim/issues/3895>`_)
  - Fixed "writeFile regression in nimscript"
    (`#3901 <https://github.com/nim-lang/Nim/issues/3901>`_)
  - Fixed "Cannot convert variables to int16 at compile time"
    (`#3916 <https://github.com/nim-lang/Nim/issues/3916>`_)
  - Fixed "Error in concepts when using functions on typedesc"
    (`#3686 <https://github.com/nim-lang/Nim/issues/3686>`_)
  - Fixed "Multiple generic table types with different type signatures lead to compilation errors."
    (`#3669 <https://github.com/nim-lang/Nim/issues/3669>`_)
  - Fixed "Explicit arguments with overloaded procedure?"
    (`#3836 <https://github.com/nim-lang/Nim/issues/3836>`_)
  - Fixed "doc2 generates strange output for proc generated by template"
    (`#3868 <https://github.com/nim-lang/Nim/issues/3868>`_)
  - Fixed "Passing const value as static[] argument to immediate macro leads to infinite memory consumption by compiler"
    (`#3872 <https://github.com/nim-lang/Nim/issues/3872>`_)
  - Fixed "`..<` is not happy with `BiggestInt` from `intVal`"
    (`#3767 <https://github.com/nim-lang/Nim/issues/3767>`_)
  - Fixed "stdtmpl filter does not support anything apart from '#' metachar"
    (`#3924 <https://github.com/nim-lang/Nim/issues/3924>`_)
  - Fixed "lib/pure/net: Can't bind to ports >= 32768"
    (`#3484 <https://github.com/nim-lang/Nim/issues/3484>`_)
  - Fixed "int and float assignment compatibility badly broken for generics"
    (`#3998 <https://github.com/nim-lang/Nim/issues/3998>`_)
  - Fixed "Adding echo statement causes "type mismatch" error"
    (`#3975 <https://github.com/nim-lang/Nim/issues/3975>`_)
  - Fixed "Dynlib error messages should be written to stderr, not stdout"
    (`#3987 <https://github.com/nim-lang/Nim/issues/3987>`_)
  - Fixed "Tests regressions while using the devel branch"
    (`#4005 <https://github.com/nim-lang/Nim/issues/4005>`_)

  - Fixed "Lambda lifting bug: wrong c code generation"
    (`#3995 <https://github.com/nim-lang/Nim/issues/3995>`_)
  - Fixed "VM crashes in asgnComplex"
    (`#3973 <https://github.com/nim-lang/Nim/issues/3973>`_)
  - Fixed "Unknown opcode opcNGetType"
    (`#1152 <https://github.com/nim-lang/Nim/issues/1152>`_)
  - Fixed "`&` operator mutates first operand when used in compileTime proc while assigning result to seq"
    (`#3804 <https://github.com/nim-lang/Nim/issues/3804>`_)
  - Fixed "''nil' statement is deprecated' in macro"
    (`#3561 <https://github.com/nim-lang/Nim/issues/3561>`_)
  - Fixed "vm crash when accessing seq with mitems iterator"
    (`#3731 <https://github.com/nim-lang/Nim/issues/3731>`_)
  - Fixed "`mitems` or `mpairs` does not work for `seq[NimNode]` or `array[T,NimNode]` in a macro"
    (`#3859 <https://github.com/nim-lang/Nim/issues/3859>`_)
  - Fixed "passing "proc `,`()" to nim check causes an infinite loop"
    (`#4036 <https://github.com/nim-lang/Nim/issues/4036>`_)
  - Fixed "--dynlibOverride does not work with {.push dynlib: name.}"
    (`#3646 <https://github.com/nim-lang/Nim/issues/3646>`_)
  - Fixed "system.readChars fails on big len"
    (`#3752 <https://github.com/nim-lang/Nim/issues/3752>`_)
  - Fixed "strutils.unindent"
    (`#4037 <https://github.com/nim-lang/Nim/issues/4037>`_)
  - Fixed "Compiler's infinite recursion in generic resolution"
    (`#2006 <https://github.com/nim-lang/Nim/issues/2006>`_)
  - Fixed "Linux: readLineFromStdin calls quit(0) upon EOF"
    (`#3159 <https://github.com/nim-lang/Nim/issues/3159>`_)
  - Fixed "Forum sign up not possible"
    (`#2446 <https://github.com/nim-lang/Nim/issues/2446>`_)
  - Fixed "Json module - SIGSEGV if key not exists"
    (`#3107 <https://github.com/nim-lang/Nim/issues/3107>`_)
  - Fixed "About asyncdispatch.await and exception"
    (`#3964 <https://github.com/nim-lang/Nim/issues/3964>`_)
  - Fixed "Need testcase for JS backend to ensure closure callbacks don't break"
    (`#3132 <https://github.com/nim-lang/Nim/issues/3132>`_)
  - Fixed "Unexpected behaviour of C++ templates in conjunction with N_NIMCALL"
    (`#4093 <https://github.com/nim-lang/Nim/issues/4093>`_)
  - Fixed "SIGSEGV at compile time when using a compileTime variable as counter"
    (`#4097 <https://github.com/nim-lang/Nim/issues/4097>`_)
  - Fixed "Compiler crash issue on 32-bit machines only"
    (`#4089 <https://github.com/nim-lang/Nim/issues/4089>`_)
  - Fixed "type mismatch: got (<type>) but expected 'outType' in mapIt"
    (`#4124 <https://github.com/nim-lang/Nim/issues/4124>`_)
  - Fixed "Generic type constraints broken?"
    (`#4084 <https://github.com/nim-lang/Nim/issues/4084>`_)
  - Fixed "Invalid C code generated"
    (`#3544 <https://github.com/nim-lang/Nim/issues/3544>`_)
  - Fixed "An exit variable in proc shadows exit function called by quit()"
    (`#3471 <https://github.com/nim-lang/Nim/issues/3471>`_)
  - Fixed "ubuntu 16.04 build error"
    (`#4144 <https://github.com/nim-lang/Nim/issues/4144>`_)
  - Fixed "Ambiguous identifier error should list all possible qualifiers"
    (`#177 <https://github.com/nim-lang/Nim/issues/177>`_)
  - Fixed "Parameters are not captured inside closures inside closure iterators"
    (`#4070 <https://github.com/nim-lang/Nim/issues/4070>`_)
  - Fixed "`$` For array crashes the compiler when assigned to const"
    (`#4040 <https://github.com/nim-lang/Nim/issues/4040>`_)
