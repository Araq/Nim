#? stdtmpl(subsChar = '?') | standard
#proc generateInstallScript(c: ConfigData): string =
#  result = "#!/bin/sh\n# Generated by niminst\n"
#  var proj = c.name.toLowerAscii

set -e

if [ $# -eq 1 ] ; then
# if c.cat[fcUnixBin].len > 0:
  if test -f ?{"bin/nim".toUnix}
  then
    echo "?c.displayName build detected"
  else
    echo "Please build ?c.displayName before installing it"
    exit 1
  fi
#  end if
  case $1 in
    "--help"|"-h"|"help"|"h")
      echo "?c.displayName installation script"
      echo "Usage: [sudo] sh install.sh DIR"
      echo "Where DIR may be:"
      echo "  /usr/bin"
      echo "  /usr/local/bin"
      echo "  /opt"
      echo "  <some other dir> (treated similar to '/opt')"
      echo "To deinstall, use the command:"
      echo "sh deinstall.sh DIR"
      exit 1
      ;;
    "/usr/bin")
      bindir=/usr/bin
      configdir=/etc/?proj
      libdir=/usr/lib/?proj
      docdir=/usr/share/?proj/doc
      datadir=/usr/share/?proj/data
      nimbleDir="/opt/nimble/pkgs"
      ;;
    "/usr/local/bin")
      bindir=/usr/local/bin
      configdir=/etc/?proj
      libdir=/usr/local/lib/?proj
      docdir=/usr/local/share/?proj/doc
      datadir=/usr/local/share/?proj/data
      nimbleDir="/opt/nimble/pkgs"
      ;;
    "/opt")
      bindir="/opt/?proj/bin"
      configdir="/opt/?proj/config"
      libdir="/opt/?proj/lib"
      docdir="/opt/?proj/doc"
      datadir="/opt/?proj/data"
      nimbleDir="/opt/nimble/pkgs"
      mkdir -p /opt/?proj
      mkdir -p $bindir
      mkdir -p $configdir
      ;;
    *)
      bindir="$1/?proj/bin"
      configdir="$1/?proj/config"
      libdir="$1/?proj/lib"
      docdir="$1/?proj/doc"
      datadir="$1/?proj/data"
      nimbleDir="$1/?proj"
      mkdir -p $1/?proj
      mkdir -p $bindir
      mkdir -p $configdir
      ;;
  esac

  mkdir -p $libdir
  mkdir -p $docdir
  mkdir -p $configdir
  mkdir -p $nimbleDir/
  echo "copying files..."
#var createdDirs = newStringTable()
#for cat in {fcConfig..fcLib, fcNimble}:
#  for dest in c.cat[cat].values:
#    var mk = splitFile(dest.skipRoot).dir
#    if cat != fcNimble:
#      mk = unixDirVars[cat] & "/" & mk
#    else:
#      mk = "$nimbleDir" / splitFile(dest).dir
#    end if
#    if mk.len > 0 and not createdDirs.hasKey(mk):
#      createdDirs[mk] = "true"
  mkdir -p ?{mk.toUnix}
#    end if
#  end for
#end for

#for src, dest in c.cat[fcUnixBin].pairs:
  cp ?src.toUnix $bindir/?dest.skipRoot.toUnix
  chmod 755 $bindir/?dest.skipRoot.toUnix
#end for
#for src, dest in c.cat[fcConfig].pairs:
  cp ?src.toUnix $configdir/?dest.skipRoot.toUnix
  chmod 644 $configdir/?dest.skipRoot.toUnix
#end for
#for src, dest in c.cat[fcData].pairs:
  if [ -f ?src.toUnix ]; then
    cp ?src.toUnix $datadir/?src.skipRoot.toUnix
    chmod 644 $datadir/?src.skipRoot.toUnix
  fi
#end for
#for src, dest in c.cat[fcDoc].pairs:
  if [ -f ?src.toUnix ]; then
    cp ?src.toUnix $docdir/?dest.skipRoot.toUnix
    chmod 644 $docdir/?dest.skipRoot.toUnix
  fi
#end for
#for src, dest in c.cat[fcLib].pairs:
  cp ?src.toUnix $libdir/?dest.skipRoot.toUnix
  chmod 644 $libdir/?dest.skipRoot.toUnix
#end for
#for src, dest in c.cat[fcNimble].pairs:
  cp ?src.toUnix $nimbleDir/?dest
  chmod 644 $nimbleDir/?dest
#end for

  echo "installation successful"
else
  echo "?c.displayName installation script"
  echo "Usage: [sudo] sh install.sh DIR"
  echo "Where DIR may be:"
  echo "  /usr/bin"
  echo "  /usr/local/bin"
  echo "  /opt"
  echo "  <some other dir> (treated similar to '/opt')"
  echo "To deinstall, use the command:"
  echo "sh deinstall.sh DIR"
  exit 1
fi
