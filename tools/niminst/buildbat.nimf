#? stdtmpl(subsChar='?') | standard
#proc generateBuildBatchScript(c: ConfigData, winIndex, cpuIndex32, cpuIndex64: int): string =
#  result = "@ECHO OFF\nREM Generated by niminst\n"
SETLOCAL ENABLEEXTENSIONS
SETLOCAL ENABLEDELAYEDEXPANSION

SET CC=gcc
SET LINKER=gcc
SET COMP_FLAGS=?{c.ccompiler.flags}
SET LINK_FLAGS=?{c.linker.flags}
SET BIN_DIR=?{firstBinPath(c).toWin}

IF [%1] EQU [] GOTO :Init

IF %1 EQU thread GOTO :NewThread

EXIT /B 0

:Init
REM Detect gcc arch
IF DEFINED ARCH (
  ECHO Forcing %CC% arch
) ELSE (
  ECHO Detecting %CC% arch
  ECHO int main^(^) { return sizeof^(void *^); } | gcc -xc - -o archtest && archtest
  IF ERRORLEVEL 4 SET ARCH=32
  IF ERRORLEVEL 8 SET ARCH=64
  del archtest.*
)
ECHO Building with %ARCH% bit %CC%

CALL :GetNumberOfLogicalProcessors

ECHO Building with %NumberOfLogicalProcessors% thread(s)

:MakeTmpDir
SET /a tmpRand=%random%
SET tmpDir=%temp%\Nim-%tmpRand%
IF EXIST "%tmpDir%" (
  GOTO :MakeTmpDir
) ELSE (
  MD "%tmpDir%"
)

IF EXIST ..\koch.nim SET BIN_DIR=..\bin

IF NOT EXIST %BIN_DIR%\nul mkdir %BIN_DIR%

REM call the compiler:

IF %ARCH% EQU 32 (

#  block win32:
#    var ccFiles = newSeqOfCap[string](len(c.cfiles[winIndex][cpuIndex32]))
#    if cpuIndex32 != -1:
#      for ff in items(c.cfiles[winIndex][cpuIndex32]):
#        let f = ff.toWin
#        ccFiles.add(f)
#      end for
#    end if

  SET ccFiles="?{join(ccFiles, ":")}"

#  end block

) ELSE IF %ARCH% EQU 64 (

#  block win64:
#    var ccFiles = newSeqOfCap[string](len(c.cfiles[winIndex][cpuIndex64]))
#    if cpuIndex64 != -1:
#      for ff in items(c.cfiles[winIndex][cpuIndex64]):
#        let f = ff.toWin
#        ccFiles.add(f)
#      end for
#    end if

  SET ccFiles="?{join(ccFiles, ":")}"

#  end block
)

ECHO 1 > "%tmpDir%\cc.lock"

SET /A maxThreads=%NumberOfLogicalProcessors% + 1
SET /A x=1
SET /A ERROR=0

:LOOP
IF EXIST "%tmpDir%\error.error" GOTO :END

IF %ccFiles% NEQ "" (
  ECHO 1 > "%tmpDir%\!x!.lock"
  
  CALL :GetNextCCFile
  
  ECHO %CC% %COMP_FLAGS% -Ic_code -c !nextCCFile! -o !nextCCFile:~0,-1!o
  START "" /B cmd.exe /Q /V:ON /C build.bat thread !x! !nextCCFile! "%tmpDir%"
  
  SET linkFiles=!linkFiles! !nextCCFile:~0,-1!o
  
  set /A x+=1
  
  :Waiting
  FOR /f %%A in ('DIR "%tmpDir%" /a-d-s-h /b ^| FIND /v /c ""') DO SET /A cnt=%%A + 0
  IF !maxThreads! LEQ !cnt! (
    IF EXIST "%tmpDir%\error.error" (
      SET /A ERROR=1
      GOTO :END
    )
    GOTO :Waiting
  )
  
  GOTO :LOOP
)

:Waiting2
FOR /f %%A in ('DIR "%tmpDir%" /a-d-s-h /b ^| FIND /v /c ""') DO SET /A cnt=%%A + 0
IF !cnt! GTR 1 (
  IF EXIST "%tmpDir%\error.error" (
    SET /A ERROR=1
    GOTO :END
  )
  GOTO :Waiting2
)


ECHO %LINKER% -o %BIN_DIR%\nim.exe %linkFiles% %LINK_FLAGS%
%LINKER% -o %BIN_DIR%\nim.exe %linkFiles% %LINK_FLAGS%

IF ERRORLEVEL 1 (
  SET /A ERROR=1
  GOTO :END
)

:END
IF %ERROR% EQU 1 (
  DEL /F /Q "%tmpDir%\error.error"
  
  ECHO FAILURE
  ECHO.
  ECHO CSource compilation failed. Please check that the gcc compiler is in
  ECHO the PATH environment variable, and that you are calling the batch script
  ECHO that matches the target architecture of the compiler.
  ECHO.
  ECHO Use build.bat to autodetect the compiler architecture.
  ECHO.
  ECHO Waiting for the end of all processes...
) ELSE (
  ECHO SUCCESS
)

:Waiting3
FOR /f %%A in ('DIR "%tmpDir%" /a-d-s-h /b ^| FIND /v /c ""') DO SET /A cnt=%%A + 0
IF !cnt! GTR 1 (
  GOTO :Waiting3
)

RD "%tmpDir%" /S /Q

EXIT /B

REM Functions

:GetNextCCFile
FOR /f "tokens=1-1* delims=:" %%a IN (%ccFiles%) DO (
  SET nextCCFile=%%a
  SET ccFiles="%%b"
)
EXIT /B

:GetNumberOfLogicalProcessors
IF DEFINED %NUMBER_OF_PROCESSORS% (
  SET /A NumberOfLogicalProcessors=%NUMBER_OF_PROCESSORS%
) ELSE (
  for /f "tokens=*" %%f in ('wmic cpu get NumberOfLogicalProcessors /value ^| find "="') do set %%f
)
EXIT /B

:NewThread
SET cFile=%3

CALL %CC% %COMP_FLAGS% -Ic_code -c %cFile% -o %cFile:~0,-1%o
IF ERRORLEVEL 1 (ECHO 1 > "%4\error.error")
DEL /F /Q "%4\%2.lock"
EXIT /B 0
